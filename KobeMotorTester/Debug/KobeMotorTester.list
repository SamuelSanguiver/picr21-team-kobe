
KobeMotorTester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fec  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a1c4  0800a1c4  0001a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a21c  0800a21c  000201d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a21c  0800a21c  000201d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a21c  0800a21c  000201d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a21c  0800a21c  0001a21c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a220  0800a220  0001a220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  0800a224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001458  200001d0  0800a3f4  000201d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001628  0800a3f4  00021628  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d811  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003af7  00000000  00000000  0003da11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d8  00000000  00000000  00041508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  000428e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020d64  00000000  00000000  00043b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001738b  00000000  00000000  00064894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c5d13  00000000  00000000  0007bc1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141932  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005234  00000000  00000000  00141988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001d0 	.word	0x200001d0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a1ac 	.word	0x0800a1ac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d4 	.word	0x200001d4
 8000214:	0800a1ac 	.word	0x0800a1ac

08000218 <clamp>:
		.delimiter = 0xAAAA

};


int32_t clamp(int32_t value, int32_t minValue, int32_t maxValue) {
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	60f8      	str	r0, [r7, #12]
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
	if (value > maxValue) {
 8000224:	68fa      	ldr	r2, [r7, #12]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	429a      	cmp	r2, r3
 800022a:	dd01      	ble.n	8000230 <clamp+0x18>
		return maxValue;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	e006      	b.n	800023e <clamp+0x26>
	}

	if (value < minValue) {
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	429a      	cmp	r2, r3
 8000236:	da01      	bge.n	800023c <clamp+0x24>
		return minValue;
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	e000      	b.n	800023e <clamp+0x26>
	}

	return value;
 800023c:	68fb      	ldr	r3, [r7, #12]
}
 800023e:	4618      	mov	r0, r3
 8000240:	3714      	adds	r7, #20
 8000242:	46bd      	mov	sp, r7
 8000244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000248:	4770      	bx	lr
	...

0800024c <CDC_On_Receive>:


void CDC_On_Receive(uint8_t* buffer, uint32_t* length) { // (6)
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
 8000254:	6039      	str	r1, [r7, #0]
  if (*length == sizeof(Command)) { // (7)
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	2b0a      	cmp	r3, #10
 800025c:	d116      	bne.n	800028c <CDC_On_Receive+0x40>
    memcpy(&command, buffer, sizeof(Command)); // (8)
 800025e:	220a      	movs	r2, #10
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	480c      	ldr	r0, [pc, #48]	; (8000294 <CDC_On_Receive+0x48>)
 8000264:	f009 ff8c 	bl	800a180 <memcpy>

    if (command.delimiter == 0xAAAA) { // (9)
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <CDC_On_Receive+0x48>)
 800026a:	891b      	ldrh	r3, [r3, #8]
 800026c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000270:	4293      	cmp	r3, r2
 8000272:	d102      	bne.n	800027a <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <CDC_On_Receive+0x4c>)
 8000276:	2201      	movs	r2, #1
 8000278:	701a      	strb	r2, [r3, #0]
    }
    if (command.delimiter == 0xBBBB) { // (9)
 800027a:	4b06      	ldr	r3, [pc, #24]	; (8000294 <CDC_On_Receive+0x48>)
 800027c:	891b      	ldrh	r3, [r3, #8]
 800027e:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000282:	4293      	cmp	r3, r2
 8000284:	d102      	bne.n	800028c <CDC_On_Receive+0x40>
          sendData = 1;
 8000286:	4b05      	ldr	r3, [pc, #20]	; (800029c <CDC_On_Receive+0x50>)
 8000288:	2201      	movs	r2, #1
 800028a:	701a      	strb	r2, [r3, #0]
        }
  }
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}
 8000294:	200001ec 	.word	0x200001ec
 8000298:	200001f6 	.word	0x200001f6
 800029c:	200001f7 	.word	0x200001f7

080002a0 <PIDcontrol>:

int32_t PIDcontrol(MotorControl* control, int16_t position){
 80002a0:	b480      	push	{r7}
 80002a2:	b085      	sub	sp, #20
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	460b      	mov	r3, r1
 80002aa:	807b      	strh	r3, [r7, #2]
	control->positionChange = position - control->position; //Lahutab vana positsiooni, et saada kiiruse
 80002ac:	887a      	ldrh	r2, [r7, #2]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80002b4:	b29b      	uxth	r3, r3
 80002b6:	1ad3      	subs	r3, r2, r3
 80002b8:	b29b      	uxth	r3, r3
 80002ba:	b21a      	sxth	r2, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	821a      	strh	r2, [r3, #16]
	control->position = position; //Salvestab asendi struktuuri
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	887a      	ldrh	r2, [r7, #2]
 80002c4:	805a      	strh	r2, [r3, #2]
	int32_t error = control->speed - control->positionChange; //Kui suur on erinevus kiiruste vahel
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002cc:	461a      	mov	r2, r3
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80002d4:	1ad3      	subs	r3, r2, r3
 80002d6:	60fb      	str	r3, [r7, #12]
	control->integraal += error;
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	685a      	ldr	r2, [r3, #4]
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	441a      	add	r2, r3
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	605a      	str	r2, [r3, #4]

	return control->p_gain * error + control->i_gain * control->integraal;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002ea:	461a      	mov	r2, r3
 80002ec:	68fb      	ldr	r3, [r7, #12]
 80002ee:	fb03 f202 	mul.w	r2, r3, r2
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002f8:	4619      	mov	r1, r3
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685b      	ldr	r3, [r3, #4]
 80002fe:	fb03 f301 	mul.w	r3, r3, r1
 8000302:	4413      	add	r3, r2
}
 8000304:	4618      	mov	r0, r3
 8000306:	3714      	adds	r7, #20
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8000310:	b580      	push	{r7, lr}
 8000312:	b084      	sub	sp, #16
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
			motor1Control.newspeed = new_speed;
			HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, 1);
		}

	TIM4->CCR1 = motor1Control.newspeed;*/
	position = (int16_t)TIM1->CNT;
 8000318:	4b42      	ldr	r3, [pc, #264]	; (8000424 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800031a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800031c:	81fb      	strh	r3, [r7, #14]
	int32_t pwmValue = PIDcontrol(&motor1Control, position);
 800031e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000322:	4619      	mov	r1, r3
 8000324:	4840      	ldr	r0, [pc, #256]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000326:	f7ff ffbb 	bl	80002a0 <PIDcontrol>
 800032a:	60b8      	str	r0, [r7, #8]
	HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	0fdb      	lsrs	r3, r3, #31
 8000330:	b2db      	uxtb	r3, r3
 8000332:	461a      	mov	r2, r3
 8000334:	2108      	movs	r1, #8
 8000336:	483d      	ldr	r0, [pc, #244]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000338:	f001 fbd0 	bl	8001adc <HAL_GPIO_WritePin>
	TIM4->CCR1 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	2b00      	cmp	r3, #0
 8000340:	bfb8      	it	lt
 8000342:	425b      	neglt	r3, r3
 8000344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff ff64 	bl	8000218 <clamp>
 8000350:	4603      	mov	r3, r0
 8000352:	b29a      	uxth	r2, r3
 8000354:	4b36      	ldr	r3, [pc, #216]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000356:	635a      	str	r2, [r3, #52]	; 0x34

	position = (int16_t)TIM2->CNT;
 8000358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800035e:	81fb      	strh	r3, [r7, #14]
	pwmValue = PIDcontrol(&motor2Control, position);
 8000360:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000364:	4619      	mov	r1, r3
 8000366:	4833      	ldr	r0, [pc, #204]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000368:	f7ff ff9a 	bl	80002a0 <PIDcontrol>
 800036c:	60b8      	str	r0, [r7, #8]
	HAL_GPIO_WritePin(M2_D_GPIO_Port, M2_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	0fdb      	lsrs	r3, r3, #31
 8000372:	b2db      	uxtb	r3, r3
 8000374:	461a      	mov	r2, r3
 8000376:	2110      	movs	r1, #16
 8000378:	482c      	ldr	r0, [pc, #176]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800037a:	f001 fbaf 	bl	8001adc <HAL_GPIO_WritePin>
	TIM4->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 800037e:	68bb      	ldr	r3, [r7, #8]
 8000380:	2b00      	cmp	r3, #0
 8000382:	bfb8      	it	lt
 8000384:	425b      	neglt	r3, r3
 8000386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800038a:	2100      	movs	r1, #0
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff43 	bl	8000218 <clamp>
 8000392:	4603      	mov	r3, r0
 8000394:	b29a      	uxth	r2, r3
 8000396:	4b26      	ldr	r3, [pc, #152]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000398:	639a      	str	r2, [r3, #56]	; 0x38

	position = (int16_t)TIM3->CNT;
 800039a:	4b27      	ldr	r3, [pc, #156]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039e:	81fb      	strh	r3, [r7, #14]
	pwmValue = PIDcontrol(&motor3Control, position);
 80003a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003a4:	4619      	mov	r1, r3
 80003a6:	4825      	ldr	r0, [pc, #148]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80003a8:	f7ff ff7a 	bl	80002a0 <PIDcontrol>
 80003ac:	60b8      	str	r0, [r7, #8]
	HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	0fdb      	lsrs	r3, r3, #31
 80003b2:	b2db      	uxtb	r3, r3
 80003b4:	461a      	mov	r2, r3
 80003b6:	2120      	movs	r1, #32
 80003b8:	481c      	ldr	r0, [pc, #112]	; (800042c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80003ba:	f001 fb8f 	bl	8001adc <HAL_GPIO_WritePin>
	TIM4->CCR3 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80003be:	68bb      	ldr	r3, [r7, #8]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	bfb8      	it	lt
 80003c4:	425b      	neglt	r3, r3
 80003c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003ca:	2100      	movs	r1, #0
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff23 	bl	8000218 <clamp>
 80003d2:	4603      	mov	r3, r0
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	4b16      	ldr	r3, [pc, #88]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80003d8:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, 1);
				}

	TIM4->CCR3 = motor3Control.newspeed;*/

	timer+=1;
 80003da:	4b19      	ldr	r3, [pc, #100]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003dc:	881b      	ldrh	r3, [r3, #0]
 80003de:	3301      	adds	r3, #1
 80003e0:	b29a      	uxth	r2, r3
 80003e2:	4b17      	ldr	r3, [pc, #92]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003e4:	801a      	strh	r2, [r3, #0]
	if (timer == 100){
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	2b64      	cmp	r3, #100	; 0x64
 80003ec:	d115      	bne.n	800041a <HAL_TIM_PeriodElapsedCallback+0x10a>
		timer = 0;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	801a      	strh	r2, [r3, #0]

		encoder.speed1 = motor1Control.positionChange;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80003f6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80003fc:	801a      	strh	r2, [r3, #0]
		encoder.speed2 = motor2Control.positionChange;
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000400:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000404:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000406:	805a      	strh	r2, [r3, #2]
		encoder.speed3 = motor3Control.positionChange;
 8000408:	4b0c      	ldr	r3, [pc, #48]	; (800043c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800040a:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 800040e:	4b0d      	ldr	r3, [pc, #52]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000410:	809a      	strh	r2, [r3, #4]

		CDC_Transmit_FS(&encoder, sizeof(encoder));
 8000412:	2108      	movs	r1, #8
 8000414:	480b      	ldr	r0, [pc, #44]	; (8000444 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8000416:	f009 fa57 	bl	80098c8 <CDC_Transmit_FS>
		TIM4->CCR3 = motor3Control.speed;
		TIM8->CCR1 = 0;
		timer=0;*/
	}

}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40012c00 	.word	0x40012c00
 8000428:	20000000 	.word	0x20000000
 800042c:	48000400 	.word	0x48000400
 8000430:	40000800 	.word	0x40000800
 8000434:	20000014 	.word	0x20000014
 8000438:	40000400 	.word	0x40000400
 800043c:	20000028 	.word	0x20000028
 8000440:	200001f8 	.word	0x200001f8
 8000444:	20000044 	.word	0x20000044

08000448 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044c:	f000 ff17 	bl	800127e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000450:	f000 f90e 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000454:	f000 fc76 	bl	8000d44 <MX_GPIO_Init>
  MX_DMA_Init();
 8000458:	f000 fc2c 	bl	8000cb4 <MX_DMA_Init>
  MX_TIM2_Init();
 800045c:	f000 f9ca 	bl	80007f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000460:	f000 fa1c 	bl	800089c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000464:	f000 f96c 	bl	8000740 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000468:	f000 fa6e 	bl	8000948 <MX_TIM4_Init>
  MX_TIM8_Init();
 800046c:	f000 fb14 	bl	8000a98 <MX_TIM8_Init>
  MX_TIM6_Init();
 8000470:	f000 fada 	bl	8000a28 <MX_TIM6_Init>
  MX_USB_Device_Init();
 8000474:	f009 f966 	bl	8009744 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8000478:	f000 fba2 	bl	8000bc0 <MX_TIM17_Init>
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 0);
  //HAL_GPIO_WritePin(DRIVER_GPIO_Port, DRIVER_Pin, 1);



  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800047c:	2100      	movs	r1, #0
 800047e:	486a      	ldr	r0, [pc, #424]	; (8000628 <main+0x1e0>)
 8000480:	f004 f8ac 	bl	80045dc <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000484:	2104      	movs	r1, #4
 8000486:	4869      	ldr	r0, [pc, #420]	; (800062c <main+0x1e4>)
 8000488:	f004 fa4e 	bl	8004928 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800048c:	2104      	movs	r1, #4
 800048e:	4868      	ldr	r0, [pc, #416]	; (8000630 <main+0x1e8>)
 8000490:	f004 fa4a 	bl	8004928 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000494:	2104      	movs	r1, #4
 8000496:	4867      	ldr	r0, [pc, #412]	; (8000634 <main+0x1ec>)
 8000498:	f004 fa46 	bl	8004928 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800049c:	2100      	movs	r1, #0
 800049e:	4866      	ldr	r0, [pc, #408]	; (8000638 <main+0x1f0>)
 80004a0:	f004 f89c 	bl	80045dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80004a4:	2104      	movs	r1, #4
 80004a6:	4864      	ldr	r0, [pc, #400]	; (8000638 <main+0x1f0>)
 80004a8:	f004 f898 	bl	80045dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80004ac:	2108      	movs	r1, #8
 80004ae:	4862      	ldr	r0, [pc, #392]	; (8000638 <main+0x1f0>)
 80004b0:	f004 f894 	bl	80045dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80004b4:	2100      	movs	r1, #0
 80004b6:	4861      	ldr	r0, [pc, #388]	; (800063c <main+0x1f4>)
 80004b8:	f004 f890 	bl	80045dc <HAL_TIM_PWM_Start>



  TIM17->CCR1 = 65535;
 80004bc:	4b60      	ldr	r3, [pc, #384]	; (8000640 <main+0x1f8>)
 80004be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004c2:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(100);
 80004c4:	2064      	movs	r0, #100	; 0x64
 80004c6:	f000 ff4b 	bl	8001360 <HAL_Delay>
  TIM17->CCR1 = 61750;
 80004ca:	4b5d      	ldr	r3, [pc, #372]	; (8000640 <main+0x1f8>)
 80004cc:	f24f 1236 	movw	r2, #61750	; 0xf136
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_Delay(100);
 80004d2:	2064      	movs	r0, #100	; 0x64
 80004d4:	f000 ff44 	bl	8001360 <HAL_Delay>
  TIM17->CCR1 = 65535;
 80004d8:	4b59      	ldr	r3, [pc, #356]	; (8000640 <main+0x1f8>)
 80004da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004de:	635a      	str	r2, [r3, #52]	; 0x34
  //TIM4->CCR1 = 10000;
  //TIM4->CCR2 = 10000;
  //TIM4->CCR3 = 9000;


  HAL_TIM_Base_Start_IT(&htim6);
 80004e0:	4858      	ldr	r0, [pc, #352]	; (8000644 <main+0x1fc>)
 80004e2:	f003 ffb9 	bl	8004458 <HAL_TIM_Base_Start_IT>
	  TIM4->CCR1 = 5000;
	  TIM4->CCR2 = 5000;
	  TIM4->CCR3 = 5000;
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/

	  if (sendData) {
 80004e6:	4b58      	ldr	r3, [pc, #352]	; (8000648 <main+0x200>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d015      	beq.n	800051c <main+0xd4>
		  sendData = 0;
 80004f0:	4b55      	ldr	r3, [pc, #340]	; (8000648 <main+0x200>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	701a      	strb	r2, [r3, #0]
		  feedback.speed1 = motor1Control.positionChange; // (4)
 80004f6:	4b55      	ldr	r3, [pc, #340]	; (800064c <main+0x204>)
 80004f8:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80004fc:	4b54      	ldr	r3, [pc, #336]	; (8000650 <main+0x208>)
 80004fe:	801a      	strh	r2, [r3, #0]
		  feedback.speed2 = motor2Control.positionChange;
 8000500:	4b54      	ldr	r3, [pc, #336]	; (8000654 <main+0x20c>)
 8000502:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000506:	4b52      	ldr	r3, [pc, #328]	; (8000650 <main+0x208>)
 8000508:	805a      	strh	r2, [r3, #2]
		  feedback.speed3 = motor3Control.positionChange;
 800050a:	4b53      	ldr	r3, [pc, #332]	; (8000658 <main+0x210>)
 800050c:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8000510:	4b4f      	ldr	r3, [pc, #316]	; (8000650 <main+0x208>)
 8000512:	809a      	strh	r2, [r3, #4]

		  CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 8000514:	2108      	movs	r1, #8
 8000516:	484e      	ldr	r0, [pc, #312]	; (8000650 <main+0x208>)
 8000518:	f009 f9d6 	bl	80098c8 <CDC_Transmit_FS>

	  }



	  if (isCommandReceived) { // (2)
 800051c:	4b4f      	ldr	r3, [pc, #316]	; (800065c <main+0x214>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0df      	beq.n	80004e6 <main+0x9e>
	        isCommandReceived = 0;
 8000526:	4b4d      	ldr	r3, [pc, #308]	; (800065c <main+0x214>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // (3)
 800052c:	2104      	movs	r1, #4
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f001 faeb 	bl	8001b0c <HAL_GPIO_TogglePin>
	        motor1Control.speed = command.speed1;
 8000536:	4b4a      	ldr	r3, [pc, #296]	; (8000660 <main+0x218>)
 8000538:	f9b3 2000 	ldrsh.w	r2, [r3]
 800053c:	4b43      	ldr	r3, [pc, #268]	; (800064c <main+0x204>)
 800053e:	801a      	strh	r2, [r3, #0]
	        motor2Control.speed = command.speed2;
 8000540:	4b47      	ldr	r3, [pc, #284]	; (8000660 <main+0x218>)
 8000542:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000546:	4b43      	ldr	r3, [pc, #268]	; (8000654 <main+0x20c>)
 8000548:	801a      	strh	r2, [r3, #0]
	        motor3Control.speed = command.speed3;
 800054a:	4b45      	ldr	r3, [pc, #276]	; (8000660 <main+0x218>)
 800054c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000550:	4b41      	ldr	r3, [pc, #260]	; (8000658 <main+0x210>)
 8000552:	801a      	strh	r2, [r3, #0]


	        if (motor1Control.speed < 0){
 8000554:	4b3d      	ldr	r3, [pc, #244]	; (800064c <main+0x204>)
 8000556:	f9b3 3000 	ldrsh.w	r3, [r3]
 800055a:	2b00      	cmp	r3, #0
 800055c:	da0b      	bge.n	8000576 <main+0x12e>
					HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	4840      	ldr	r0, [pc, #256]	; (8000664 <main+0x21c>)
 8000564:	f001 faba 	bl	8001adc <HAL_GPIO_WritePin>
					TIM4->CCR1 = - motor1Control.speed;
 8000568:	4b38      	ldr	r3, [pc, #224]	; (800064c <main+0x204>)
 800056a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800056e:	425a      	negs	r2, r3
 8000570:	4b3d      	ldr	r3, [pc, #244]	; (8000668 <main+0x220>)
 8000572:	635a      	str	r2, [r3, #52]	; 0x34
 8000574:	e009      	b.n	800058a <main+0x142>
				}
				else{
					TIM4->CCR1 = motor1Control.speed;
 8000576:	4b35      	ldr	r3, [pc, #212]	; (800064c <main+0x204>)
 8000578:	f9b3 2000 	ldrsh.w	r2, [r3]
 800057c:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <main+0x220>)
 800057e:	635a      	str	r2, [r3, #52]	; 0x34
					HAL_GPIO_WritePin(M1_D_GPIO_Port, M1_D_Pin, 1);
 8000580:	2201      	movs	r2, #1
 8000582:	2108      	movs	r1, #8
 8000584:	4837      	ldr	r0, [pc, #220]	; (8000664 <main+0x21c>)
 8000586:	f001 faa9 	bl	8001adc <HAL_GPIO_WritePin>
				}

	        if (motor2Control.speed < 0){
 800058a:	4b32      	ldr	r3, [pc, #200]	; (8000654 <main+0x20c>)
 800058c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000590:	2b00      	cmp	r3, #0
 8000592:	da0b      	bge.n	80005ac <main+0x164>
					HAL_GPIO_WritePin(M2_D_GPIO_Port, M2_D_Pin, 1);
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4832      	ldr	r0, [pc, #200]	; (8000664 <main+0x21c>)
 800059a:	f001 fa9f 	bl	8001adc <HAL_GPIO_WritePin>
					TIM4->CCR2 = - motor2Control.speed;
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <main+0x20c>)
 80005a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005a4:	425a      	negs	r2, r3
 80005a6:	4b30      	ldr	r3, [pc, #192]	; (8000668 <main+0x220>)
 80005a8:	639a      	str	r2, [r3, #56]	; 0x38
 80005aa:	e009      	b.n	80005c0 <main+0x178>
				}
				else{
					TIM4->CCR2 = motor2Control.speed;
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <main+0x20c>)
 80005ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005b2:	4b2d      	ldr	r3, [pc, #180]	; (8000668 <main+0x220>)
 80005b4:	639a      	str	r2, [r3, #56]	; 0x38
					HAL_GPIO_WritePin(M2_D_GPIO_Port, M2_D_Pin, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2110      	movs	r1, #16
 80005ba:	482a      	ldr	r0, [pc, #168]	; (8000664 <main+0x21c>)
 80005bc:	f001 fa8e 	bl	8001adc <HAL_GPIO_WritePin>
				}

	        if (motor3Control.speed < 0){
 80005c0:	4b25      	ldr	r3, [pc, #148]	; (8000658 <main+0x210>)
 80005c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	da0b      	bge.n	80005e2 <main+0x19a>
					HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2120      	movs	r1, #32
 80005ce:	4825      	ldr	r0, [pc, #148]	; (8000664 <main+0x21c>)
 80005d0:	f001 fa84 	bl	8001adc <HAL_GPIO_WritePin>
					TIM4->CCR3 = - motor3Control.speed;
 80005d4:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0x210>)
 80005d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005da:	425a      	negs	r2, r3
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <main+0x220>)
 80005de:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e0:	e009      	b.n	80005f6 <main+0x1ae>
				}
				else{
					TIM4->CCR3 = motor3Control.speed;
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <main+0x210>)
 80005e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <main+0x220>)
 80005ea:	63da      	str	r2, [r3, #60]	; 0x3c
					HAL_GPIO_WritePin(M3_D_GPIO_Port, M3_D_Pin, 1);
 80005ec:	2201      	movs	r2, #1
 80005ee:	2120      	movs	r1, #32
 80005f0:	481c      	ldr	r0, [pc, #112]	; (8000664 <main+0x21c>)
 80005f2:	f001 fa73 	bl	8001adc <HAL_GPIO_WritePin>
				}


  	        TIM8->CCR1 = command.throwerSpeed;
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0x218>)
 80005f8:	88da      	ldrh	r2, [r3, #6]
 80005fa:	4b1c      	ldr	r3, [pc, #112]	; (800066c <main+0x224>)
 80005fc:	635a      	str	r2, [r3, #52]	; 0x34

	        feedback.speed1 = motor1Control.speed; // (4)
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <main+0x204>)
 8000600:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000604:	4b12      	ldr	r3, [pc, #72]	; (8000650 <main+0x208>)
 8000606:	801a      	strh	r2, [r3, #0]
	        feedback.speed2 = motor2Control.speed;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <main+0x20c>)
 800060a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <main+0x208>)
 8000610:	805a      	strh	r2, [r3, #2]
	        feedback.speed3 = motor3Control.speed;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <main+0x210>)
 8000614:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000618:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <main+0x208>)
 800061a:	809a      	strh	r2, [r3, #4]

	        CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 800061c:	2108      	movs	r1, #8
 800061e:	480c      	ldr	r0, [pc, #48]	; (8000650 <main+0x208>)
 8000620:	f009 f952 	bl	80098c8 <CDC_Transmit_FS>
	  if (sendData) {
 8000624:	e75f      	b.n	80004e6 <main+0x9e>
 8000626:	bf00      	nop
 8000628:	20000514 	.word	0x20000514
 800062c:	200005f8 	.word	0x200005f8
 8000630:	20000644 	.word	0x20000644
 8000634:	20000560 	.word	0x20000560
 8000638:	200004c8 	.word	0x200004c8
 800063c:	2000041c 	.word	0x2000041c
 8000640:	40014800 	.word	0x40014800
 8000644:	200005ac 	.word	0x200005ac
 8000648:	200001f7 	.word	0x200001f7
 800064c:	20000000 	.word	0x20000000
 8000650:	2000003c 	.word	0x2000003c
 8000654:	20000014 	.word	0x20000014
 8000658:	20000028 	.word	0x20000028
 800065c:	200001f6 	.word	0x200001f6
 8000660:	200001ec 	.word	0x200001ec
 8000664:	48000400 	.word	0x48000400
 8000668:	40000800 	.word	0x40000800
 800066c:	40013400 	.word	0x40013400

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b0a4      	sub	sp, #144	; 0x90
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800067a:	2238      	movs	r2, #56	; 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f009 fd8c 	bl	800a19c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
 800068c:	605a      	str	r2, [r3, #4]
 800068e:	609a      	str	r2, [r3, #8]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000694:	463b      	mov	r3, r7
 8000696:	2244      	movs	r2, #68	; 0x44
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f009 fd7e 	bl	800a19c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f002 fee1 	bl	8003468 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80006a6:	2322      	movs	r3, #34	; 0x22
 80006a8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006ae:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b0:	2340      	movs	r3, #64	; 0x40
 80006b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006c0:	2301      	movs	r3, #1
 80006c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006c4:	2314      	movs	r3, #20
 80006c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80006d0:	2304      	movs	r3, #4
 80006d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006e0:	4618      	mov	r0, r3
 80006e2:	f002 ff75 	bl	80035d0 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006ec:	f000 fb7e 	bl	8000dec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000704:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000708:	2104      	movs	r1, #4
 800070a:	4618      	mov	r0, r3
 800070c:	f003 fa78 	bl	8003c00 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000716:	f000 fb69 	bl	8000dec <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800071a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000720:	2300      	movs	r3, #0
 8000722:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4618      	mov	r0, r3
 8000728:	f003 fc4e 	bl	8003fc8 <HAL_RCCEx_PeriphCLKConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000732:	f000 fb5b 	bl	8000dec <Error_Handler>
  }
}
 8000736:	bf00      	nop
 8000738:	3790      	adds	r7, #144	; 0x90
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
	...

08000740 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08c      	sub	sp, #48	; 0x30
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000746:	f107 030c 	add.w	r3, r7, #12
 800074a:	2224      	movs	r2, #36	; 0x24
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f009 fd24 	bl	800a19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000754:	463b      	mov	r3, r7
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800075e:	4b23      	ldr	r3, [pc, #140]	; (80007ec <MX_TIM1_Init+0xac>)
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <MX_TIM1_Init+0xb0>)
 8000762:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_TIM1_Init+0xac>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b20      	ldr	r3, [pc, #128]	; (80007ec <MX_TIM1_Init+0xac>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000770:	4b1e      	ldr	r3, [pc, #120]	; (80007ec <MX_TIM1_Init+0xac>)
 8000772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000776:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_TIM1_Init+0xac>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800077e:	4b1b      	ldr	r3, [pc, #108]	; (80007ec <MX_TIM1_Init+0xac>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000784:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_TIM1_Init+0xac>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800078a:	2303      	movs	r3, #3
 800078c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000792:	2301      	movs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007a2:	2301      	movs	r3, #1
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80007ae:	f107 030c 	add.w	r3, r7, #12
 80007b2:	4619      	mov	r1, r3
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_TIM1_Init+0xac>)
 80007b6:	f004 f811 	bl	80047dc <HAL_TIM_Encoder_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 80007c0:	f000 fb14 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80007c8:	2300      	movs	r3, #0
 80007ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_TIM1_Init+0xac>)
 80007d6:	f004 ff99 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 80007e0:	f000 fb04 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3730      	adds	r7, #48	; 0x30
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	200005f8 	.word	0x200005f8
 80007f0:	40012c00 	.word	0x40012c00

080007f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08c      	sub	sp, #48	; 0x30
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	2224      	movs	r2, #36	; 0x24
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f009 fcca 	bl	800a19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000808:	463b      	mov	r3, r7
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000812:	4b21      	ldr	r3, [pc, #132]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000814:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000818:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800081a:	4b1f      	ldr	r3, [pc, #124]	; (8000898 <MX_TIM2_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000820:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000826:	4b1c      	ldr	r3, [pc, #112]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800082c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800083a:	2303      	movs	r3, #3
 800083c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000842:	2301      	movs	r3, #1
 8000844:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000852:	2301      	movs	r3, #1
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800085e:	f107 030c 	add.w	r3, r7, #12
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000866:	f003 ffb9 	bl	80047dc <HAL_TIM_Encoder_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000870:	f000 fabc 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4619      	mov	r1, r3
 8000880:	4805      	ldr	r0, [pc, #20]	; (8000898 <MX_TIM2_Init+0xa4>)
 8000882:	f004 ff43 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800088c:	f000 faae 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	3730      	adds	r7, #48	; 0x30
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000644 	.word	0x20000644

0800089c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08c      	sub	sp, #48	; 0x30
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2224      	movs	r2, #36	; 0x24
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f009 fc76 	bl	800a19c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b0:	463b      	mov	r3, r7
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ba:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_TIM3_Init+0xa4>)
 80008bc:	4a21      	ldr	r2, [pc, #132]	; (8000944 <MX_TIM3_Init+0xa8>)
 80008be:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008c0:	4b1f      	ldr	r3, [pc, #124]	; (8000940 <MX_TIM3_Init+0xa4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008c6:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_TIM3_Init+0xa4>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008cc:	4b1c      	ldr	r3, [pc, #112]	; (8000940 <MX_TIM3_Init+0xa4>)
 80008ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d4:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_TIM3_Init+0xa4>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008da:	4b19      	ldr	r3, [pc, #100]	; (8000940 <MX_TIM3_Init+0xa4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008e0:	2303      	movs	r3, #3
 80008e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80008f0:	2300      	movs	r3, #0
 80008f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008f4:	2300      	movs	r3, #0
 80008f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80008f8:	2301      	movs	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000904:	f107 030c 	add.w	r3, r7, #12
 8000908:	4619      	mov	r1, r3
 800090a:	480d      	ldr	r0, [pc, #52]	; (8000940 <MX_TIM3_Init+0xa4>)
 800090c:	f003 ff66 	bl	80047dc <HAL_TIM_Encoder_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000916:	f000 fa69 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	4806      	ldr	r0, [pc, #24]	; (8000940 <MX_TIM3_Init+0xa4>)
 8000928:	f004 fef0 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000932:	f000 fa5b 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	3730      	adds	r7, #48	; 0x30
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000560 	.word	0x20000560
 8000944:	40000400 	.word	0x40000400

08000948 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08a      	sub	sp, #40	; 0x28
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_TIM4_Init+0xd8>)
 800096e:	4a2d      	ldr	r2, [pc, #180]	; (8000a24 <MX_TIM4_Init+0xdc>)
 8000970:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_TIM4_Init+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_TIM4_Init+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_TIM4_Init+0xd8>)
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000986:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_TIM4_Init+0xd8>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <MX_TIM4_Init+0xd8>)
 800098e:	2200      	movs	r2, #0
 8000990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000992:	4823      	ldr	r0, [pc, #140]	; (8000a20 <MX_TIM4_Init+0xd8>)
 8000994:	f003 fdca 	bl	800452c <HAL_TIM_PWM_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800099e:	f000 fa25 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481b      	ldr	r0, [pc, #108]	; (8000a20 <MX_TIM4_Init+0xd8>)
 80009b2:	f004 feab 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80009bc:	f000 fa16 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	; 0x60
 80009c2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009cc:	2300      	movs	r3, #0
 80009ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	2200      	movs	r2, #0
 80009d4:	4619      	mov	r1, r3
 80009d6:	4812      	ldr	r0, [pc, #72]	; (8000a20 <MX_TIM4_Init+0xd8>)
 80009d8:	f004 f9b4 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009e2:	f000 fa03 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2204      	movs	r2, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	480c      	ldr	r0, [pc, #48]	; (8000a20 <MX_TIM4_Init+0xd8>)
 80009ee:	f004 f9a9 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80009f8:	f000 f9f8 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2208      	movs	r2, #8
 8000a00:	4619      	mov	r1, r3
 8000a02:	4807      	ldr	r0, [pc, #28]	; (8000a20 <MX_TIM4_Init+0xd8>)
 8000a04:	f004 f99e 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8000a0e:	f000 f9ed 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a12:	4803      	ldr	r0, [pc, #12]	; (8000a20 <MX_TIM4_Init+0xd8>)
 8000a14:	f000 fb2c 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200004c8 	.word	0x200004c8
 8000a24:	40000800 	.word	0x40000800

08000a28 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a3a:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <MX_TIM6_Init+0x6c>)
 8000a3c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a40:	f240 623f 	movw	r2, #1599	; 0x63f
 8000a44:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a52:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a5a:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a5c:	f003 fca4 	bl	80043a8 <HAL_TIM_Base_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000a66:	f000 f9c1 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_TIM6_Init+0x68>)
 8000a78:	f004 fe48 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000a82:	f000 f9b3 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200005ac 	.word	0x200005ac
 8000a94:	40001000 	.word	0x40001000

08000a98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b098      	sub	sp, #96	; 0x60
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2234      	movs	r2, #52	; 0x34
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f009 fb69 	bl	800a19c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000aca:	4b3b      	ldr	r3, [pc, #236]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000acc:	4a3b      	ldr	r2, [pc, #236]	; (8000bbc <MX_TIM8_Init+0x124>)
 8000ace:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000ad0:	4b39      	ldr	r3, [pc, #228]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b38      	ldr	r3, [pc, #224]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1998;
 8000adc:	4b36      	ldr	r3, [pc, #216]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000ade:	f240 72ce 	movw	r2, #1998	; 0x7ce
 8000ae2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b34      	ldr	r3, [pc, #208]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000aea:	4b33      	ldr	r3, [pc, #204]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000af6:	4830      	ldr	r0, [pc, #192]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000af8:	f003 fd18 	bl	800452c <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 f973 	bl	8000dec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b16:	4619      	mov	r1, r3
 8000b18:	4827      	ldr	r0, [pc, #156]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000b1a:	f004 fdf7 	bl	800570c <HAL_TIMEx_MasterConfigSynchronization>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000b24:	f000 f962 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b28:	2360      	movs	r3, #96	; 0x60
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b30:	2300      	movs	r3, #0
 8000b32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b34:	2300      	movs	r3, #0
 8000b36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b40:	2300      	movs	r3, #0
 8000b42:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481a      	ldr	r0, [pc, #104]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000b4e:	f004 f8f9 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000b58:	f000 f948 	bl	8000dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b64:	2300      	movs	r3, #0
 8000b66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000b9a:	f004 fe39 	bl	8005810 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000ba4:	f000 f922 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM8_Init+0x120>)
 8000baa:	f000 fa61 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000bae:	bf00      	nop
 8000bb0:	3760      	adds	r7, #96	; 0x60
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000041c 	.word	0x2000041c
 8000bbc:	40013400 	.word	0x40013400

08000bc0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	; 0x50
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2234      	movs	r2, #52	; 0x34
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f009 fadb 	bl	800a19c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_TIM17_Init+0xec>)
 8000be8:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <MX_TIM17_Init+0xf0>)
 8000bea:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <MX_TIM17_Init+0xec>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_TIM17_Init+0xec>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000bf8:	4b2c      	ldr	r3, [pc, #176]	; (8000cac <MX_TIM17_Init+0xec>)
 8000bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bfe:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000c06:	4b29      	ldr	r3, [pc, #164]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c12:	4826      	ldr	r0, [pc, #152]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c14:	f003 fbc8 	bl	80043a8 <HAL_TIM_Base_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000c1e:	f000 f8e5 	bl	8000dec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000c22:	4822      	ldr	r0, [pc, #136]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c24:	f003 fc82 	bl	800452c <HAL_TIM_PWM_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000c2e:	f000 f8dd 	bl	8000dec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c32:	2360      	movs	r3, #96	; 0x60
 8000c34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c42:	2300      	movs	r3, #0
 8000c44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c46:	2300      	movs	r3, #0
 8000c48:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	2200      	movs	r2, #0
 8000c54:	4619      	mov	r1, r3
 8000c56:	4815      	ldr	r0, [pc, #84]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c58:	f004 f874 	bl	8004d44 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000c62:	f000 f8c3 	bl	8000dec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4807      	ldr	r0, [pc, #28]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c8e:	f004 fdbf 	bl	8005810 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000c98:	f000 f8a8 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <MX_TIM17_Init+0xec>)
 8000c9e:	f000 f9e7 	bl	8001070 <HAL_TIM_MspPostInit>

}
 8000ca2:	bf00      	nop
 8000ca4:	3750      	adds	r7, #80	; 0x50
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000514 	.word	0x20000514
 8000cb0:	40014800 	.word	0x40014800

08000cb4 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_dma_generator0
  */
static void MX_DMA_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_DMA_Init+0x84>)
 8000cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cbe:	4a1e      	ldr	r2, [pc, #120]	; (8000d38 <MX_DMA_Init+0x84>)
 8000cc0:	f043 0304 	orr.w	r3, r3, #4
 8000cc4:	6493      	str	r3, [r2, #72]	; 0x48
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_DMA_Init+0x84>)
 8000cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cca:	f003 0304 	and.w	r3, r3, #4
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_DMA_Init+0x84>)
 8000cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cd6:	4a18      	ldr	r2, [pc, #96]	; (8000d38 <MX_DMA_Init+0x84>)
 8000cd8:	f043 0301 	orr.w	r3, r3, #1
 8000cdc:	6493      	str	r3, [r2, #72]	; 0x48
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_DMA_Init+0x84>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_dma_generator0 on DMA1_Channel1 */
  hdma_dma_generator0.Instance = DMA1_Channel1;
 8000cea:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_DMA_Init+0x88>)
 8000cec:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <MX_DMA_Init+0x8c>)
 8000cee:	601a      	str	r2, [r3, #0]
  hdma_dma_generator0.Init.Request = DMA_REQUEST_GENERATOR0;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_DMA_Init+0x88>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	605a      	str	r2, [r3, #4]
  hdma_dma_generator0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_DMA_Init+0x88>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hdma_dma_generator0.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_DMA_Init+0x88>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  hdma_dma_generator0.Init.MemInc = DMA_MINC_ENABLE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_DMA_Init+0x88>)
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	611a      	str	r2, [r3, #16]
  hdma_dma_generator0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_DMA_Init+0x88>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	615a      	str	r2, [r3, #20]
  hdma_dma_generator0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_DMA_Init+0x88>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hdma_dma_generator0.Init.Mode = DMA_NORMAL;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_DMA_Init+0x88>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  hdma_dma_generator0.Init.Priority = DMA_PRIORITY_LOW;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_DMA_Init+0x88>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_dma_generator0) != HAL_OK)
 8000d20:	4806      	ldr	r0, [pc, #24]	; (8000d3c <MX_DMA_Init+0x88>)
 8000d22:	f000 fc4f 	bl	80015c4 <HAL_DMA_Init>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_DMA_Init+0x7c>
  {
    Error_Handler( );
 8000d2c:	f000 f85e 	bl	8000dec <Error_Handler>
  }

}
 8000d30:	bf00      	nop
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000
 8000d3c:	20000468 	.word	0x20000468
 8000d40:	40020008 	.word	0x40020008

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
 8000d58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_GPIO_Init+0xa0>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <MX_GPIO_Init+0xa0>)
 8000d60:	f043 0301 	orr.w	r3, r3, #1
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_GPIO_Init+0xa0>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <MX_GPIO_Init+0xa0>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <MX_GPIO_Init+0xa0>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <MX_GPIO_Init+0xa0>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fea3 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M1_D_Pin|M2_D_Pin|M3_D_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2138      	movs	r1, #56	; 0x38
 8000d9a:	4813      	ldr	r0, [pc, #76]	; (8000de8 <MX_GPIO_Init+0xa4>)
 8000d9c:	f000 fe9e 	bl	8001adc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000da0:	2304      	movs	r3, #4
 8000da2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	4619      	mov	r1, r3
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f000 fd0d 	bl	80017d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_D_Pin M2_D_Pin M3_D_Pin */
  GPIO_InitStruct.Pin = M1_D_Pin|M2_D_Pin|M3_D_Pin;
 8000dbe:	2338      	movs	r3, #56	; 0x38
 8000dc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_GPIO_Init+0xa4>)
 8000dd6:	f000 fcff 	bl	80017d8 <HAL_GPIO_Init>

}
 8000dda:	bf00      	nop
 8000ddc:	3720      	adds	r7, #32
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000df0:	b672      	cpsid	i
}
 8000df2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <Error_Handler+0x8>
	...

08000df8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <HAL_MspInit+0x44>)
 8000e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e02:	4a0e      	ldr	r2, [pc, #56]	; (8000e3c <HAL_MspInit+0x44>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6613      	str	r3, [r2, #96]	; 0x60
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_MspInit+0x44>)
 8000e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <HAL_MspInit+0x44>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e1a:	4a08      	ldr	r2, [pc, #32]	; (8000e3c <HAL_MspInit+0x44>)
 8000e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e20:	6593      	str	r3, [r2, #88]	; 0x58
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <HAL_MspInit+0x44>)
 8000e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2a:	603b      	str	r3, [r7, #0]
 8000e2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e2e:	f002 fbbf 	bl	80035b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b08e      	sub	sp, #56	; 0x38
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a47      	ldr	r2, [pc, #284]	; (8000f7c <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d12a      	bne.n	8000eb8 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e62:	4b47      	ldr	r3, [pc, #284]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e66:	4a46      	ldr	r2, [pc, #280]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e6e:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e76:	623b      	str	r3, [r7, #32]
 8000e78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7a:	4b41      	ldr	r3, [pc, #260]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7e:	4a40      	ldr	r2, [pc, #256]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e86:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000ea4:	2306      	movs	r3, #6
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb2:	f000 fc91 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000eb6:	e05c      	b.n	8000f72 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec0:	d129      	bne.n	8000f16 <HAL_TIM_Encoder_MspInit+0xd6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	4a2e      	ldr	r2, [pc, #184]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ece:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2300      	movs	r3, #0
 8000f00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f02:	2301      	movs	r3, #1
 8000f04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f10:	f000 fc62 	bl	80017d8 <HAL_GPIO_Init>
}
 8000f14:	e02d      	b.n	8000f72 <HAL_TIM_Encoder_MspInit+0x132>
  else if(htim_encoder->Instance==TIM3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <HAL_TIM_Encoder_MspInit+0x144>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d128      	bne.n	8000f72 <HAL_TIM_Encoder_MspInit+0x132>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f24:	4a16      	ldr	r2, [pc, #88]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f26:	f043 0302 	orr.w	r3, r3, #2
 8000f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f30:	f003 0302 	and.w	r3, r3, #2
 8000f34:	613b      	str	r3, [r7, #16]
 8000f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	4a10      	ldr	r2, [pc, #64]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f3e:	f043 0301 	orr.w	r3, r3, #1
 8000f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <HAL_TIM_Encoder_MspInit+0x140>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	f003 0301 	and.w	r3, r3, #1
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000f50:	2350      	movs	r3, #80	; 0x50
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f54:	2302      	movs	r3, #2
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f60:	2302      	movs	r3, #2
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f6e:	f000 fc33 	bl	80017d8 <HAL_GPIO_Init>
}
 8000f72:	bf00      	nop
 8000f74:	3738      	adds	r7, #56	; 0x38
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40012c00 	.word	0x40012c00
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40000400 	.word	0x40000400

08000f88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a16      	ldr	r2, [pc, #88]	; (8000ff0 <HAL_TIM_PWM_MspInit+0x68>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d114      	bne.n	8000fc4 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f9a:	4b16      	ldr	r3, [pc, #88]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fa0:	f043 0304 	orr.w	r3, r3, #4
 8000fa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	f003 0304 	and.w	r3, r3, #4
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	201e      	movs	r0, #30
 8000fb8:	f000 facf 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000fbc:	201e      	movs	r0, #30
 8000fbe:	f000 fae6 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fc2:	e010      	b.n	8000fe6 <HAL_TIM_PWM_MspInit+0x5e>
  else if(htim_pwm->Instance==TIM8)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <HAL_TIM_PWM_MspInit+0x70>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10b      	bne.n	8000fe6 <HAL_TIM_PWM_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd2:	4a08      	ldr	r2, [pc, #32]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000fda:	4b06      	ldr	r3, [pc, #24]	; (8000ff4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
}
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40000800 	.word	0x40000800
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	40013400 	.word	0x40013400

08000ffc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a16      	ldr	r2, [pc, #88]	; (8001064 <HAL_TIM_Base_MspInit+0x68>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d114      	bne.n	8001038 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001014:	f043 0310 	orr.w	r3, r3, #16
 8001018:	6593      	str	r3, [r2, #88]	; 0x58
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 800101c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101e:	f003 0310 	and.w	r3, r3, #16
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2036      	movs	r0, #54	; 0x36
 800102c:	f000 fa95 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001030:	2036      	movs	r0, #54	; 0x36
 8001032:	f000 faac 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001036:	e010      	b.n	800105a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a0b      	ldr	r2, [pc, #44]	; (800106c <HAL_TIM_Base_MspInit+0x70>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d10b      	bne.n	800105a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001042:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	4a08      	ldr	r2, [pc, #32]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800104c:	6613      	str	r3, [r2, #96]	; 0x60
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_TIM_Base_MspInit+0x6c>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40001000 	.word	0x40001000
 8001068:	40021000 	.word	0x40021000
 800106c:	40014800 	.word	0x40014800

08001070 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a35      	ldr	r2, [pc, #212]	; (8001164 <HAL_TIM_MspPostInit+0xf4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d11d      	bne.n	80010ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b35      	ldr	r3, [pc, #212]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	4a34      	ldr	r2, [pc, #208]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001098:	f043 0302 	orr.w	r3, r3, #2
 800109c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109e:	4b32      	ldr	r3, [pc, #200]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8-BOOT0     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80010aa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80010ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b0:	2302      	movs	r3, #2
 80010b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b8:	2300      	movs	r3, #0
 80010ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010bc:	2302      	movs	r3, #2
 80010be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4829      	ldr	r0, [pc, #164]	; (800116c <HAL_TIM_MspPostInit+0xfc>)
 80010c8:	f000 fb86 	bl	80017d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80010cc:	e045      	b.n	800115a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a27      	ldr	r2, [pc, #156]	; (8001170 <HAL_TIM_MspPostInit+0x100>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d11e      	bne.n	8001116 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	4a22      	ldr	r2, [pc, #136]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010de:	f043 0301 	orr.w	r3, r3, #1
 80010e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e8:	f003 0301 	and.w	r3, r3, #1
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2300      	movs	r3, #0
 8001100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001102:	2302      	movs	r3, #2
 8001104:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	f107 0314 	add.w	r3, r7, #20
 800110a:	4619      	mov	r1, r3
 800110c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001110:	f000 fb62 	bl	80017d8 <HAL_GPIO_Init>
}
 8001114:	e021      	b.n	800115a <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM17)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a16      	ldr	r2, [pc, #88]	; (8001174 <HAL_TIM_MspPostInit+0x104>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d11c      	bne.n	800115a <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a10      	ldr	r2, [pc, #64]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 8001126:	f043 0301 	orr.w	r3, r3, #1
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b0e      	ldr	r3, [pc, #56]	; (8001168 <HAL_TIM_MspPostInit+0xf8>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
 8001136:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001138:	2380      	movs	r3, #128	; 0x80
 800113a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8001148:	2301      	movs	r3, #1
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 fb3f 	bl	80017d8 <HAL_GPIO_Init>
}
 800115a:	bf00      	nop
 800115c:	3728      	adds	r7, #40	; 0x28
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40000800 	.word	0x40000800
 8001168:	40021000 	.word	0x40021000
 800116c:	48000400 	.word	0x48000400
 8001170:	40013400 	.word	0x40013400
 8001174:	40014800 	.word	0x40014800

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800117c:	e7fe      	b.n	800117c <NMI_Handler+0x4>

0800117e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001182:	e7fe      	b.n	8001182 <HardFault_Handler+0x4>

08001184 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler+0x4>

0800118a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <BusFault_Handler+0x4>

08001190 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <UsageFault_Handler+0x4>

08001196 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr

080011b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c4:	f000 f8ae 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}

080011cc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USB_LP_IRQHandler+0x10>)
 80011d2:	f000 fdbc 	bl	8001d4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20001334 	.word	0x20001334

080011e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <TIM4_IRQHandler+0x10>)
 80011e6:	f003 fc2d 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	200004c8 	.word	0x200004c8

080011f4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011f8:	4802      	ldr	r0, [pc, #8]	; (8001204 <TIM6_DAC_IRQHandler+0x10>)
 80011fa:	f003 fc23 	bl	8004a44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	200005ac 	.word	0x200005ac

08001208 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <SystemInit+0x20>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001212:	4a05      	ldr	r2, [pc, #20]	; (8001228 <SystemInit+0x20>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800122c:	480d      	ldr	r0, [pc, #52]	; (8001264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800122e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480d      	ldr	r0, [pc, #52]	; (8001268 <LoopForever+0x6>)
  ldr r1, =_edata
 8001232:	490e      	ldr	r1, [pc, #56]	; (800126c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001234:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <LoopForever+0xe>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001248:	4c0b      	ldr	r4, [pc, #44]	; (8001278 <LoopForever+0x16>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001256:	f7ff ffd7 	bl	8001208 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125a:	f008 ff6d 	bl	800a138 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800125e:	f7ff f8f3 	bl	8000448 <main>

08001262 <LoopForever>:

LoopForever:
    b LoopForever
 8001262:	e7fe      	b.n	8001262 <LoopForever>
  ldr   r0, =_estack
 8001264:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001270:	0800a224 	.word	0x0800a224
  ldr r2, =_sbss
 8001274:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001278:	20001628 	.word	0x20001628

0800127c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_2_IRQHandler>

0800127e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001284:	2300      	movs	r3, #0
 8001286:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 f95b 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800128e:	200f      	movs	r0, #15
 8001290:	f000 f80e 	bl	80012b0 <HAL_InitTick>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d002      	beq.n	80012a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	71fb      	strb	r3, [r7, #7]
 800129e:	e001      	b.n	80012a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a0:	f7ff fdaa 	bl	8000df8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012a4:	79fb      	ldrb	r3, [r7, #7]

}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012bc:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_InitTick+0x68>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d022      	beq.n	800130a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012c4:	4b15      	ldr	r3, [pc, #84]	; (800131c <HAL_InitTick+0x6c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <HAL_InitTick+0x68>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 f966 	bl	80015aa <HAL_SYSTICK_Config>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10f      	bne.n	8001304 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b0f      	cmp	r3, #15
 80012e8:	d809      	bhi.n	80012fe <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ea:	2200      	movs	r2, #0
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	f04f 30ff 	mov.w	r0, #4294967295
 80012f2:	f000 f932 	bl	800155a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012f6:	4a0a      	ldr	r2, [pc, #40]	; (8001320 <HAL_InitTick+0x70>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	e007      	b.n	800130e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	73fb      	strb	r3, [r7, #15]
 8001302:	e004      	b.n	800130e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	73fb      	strb	r3, [r7, #15]
 8001308:	e001      	b.n	800130e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800130e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000054 	.word	0x20000054
 800131c:	2000004c 	.word	0x2000004c
 8001320:	20000050 	.word	0x20000050

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_IncTick+0x1c>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_IncTick+0x20>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4413      	add	r3, r2
 8001332:	4a03      	ldr	r2, [pc, #12]	; (8001340 <HAL_IncTick+0x1c>)
 8001334:	6013      	str	r3, [r2, #0]
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	20000690 	.word	0x20000690
 8001344:	20000054 	.word	0x20000054

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000690 	.word	0x20000690

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff ffee 	bl	8001348 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001378:	d004      	beq.n	8001384 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <HAL_Delay+0x40>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	4413      	add	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001384:	bf00      	nop
 8001386:	f7ff ffdf 	bl	8001348 <HAL_GetTick>
 800138a:	4602      	mov	r2, r0
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1ad3      	subs	r3, r2, r3
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	429a      	cmp	r2, r3
 8001394:	d8f7      	bhi.n	8001386 <HAL_Delay+0x26>
  {
  }
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000054 	.word	0x20000054

080013a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ba:	68ba      	ldr	r2, [r7, #8]
 80013bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c0:	4013      	ands	r3, r2
 80013c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013d6:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <__NVIC_SetPriorityGrouping+0x44>)
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	60d3      	str	r3, [r2, #12]
}
 80013dc:	bf00      	nop
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f0:	4b04      	ldr	r3, [pc, #16]	; (8001404 <__NVIC_GetPriorityGrouping+0x18>)
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	0a1b      	lsrs	r3, r3, #8
 80013f6:	f003 0307 	and.w	r3, r3, #7
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000ed00 	.word	0xe000ed00

08001408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	2b00      	cmp	r3, #0
 8001418:	db0b      	blt.n	8001432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	f003 021f 	and.w	r2, r3, #31
 8001420:	4907      	ldr	r1, [pc, #28]	; (8001440 <__NVIC_EnableIRQ+0x38>)
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	2001      	movs	r0, #1
 800142a:	fa00 f202 	lsl.w	r2, r0, r2
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001432:	bf00      	nop
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000e100 	.word	0xe000e100

08001444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	6039      	str	r1, [r7, #0]
 800144e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	db0a      	blt.n	800146e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	490c      	ldr	r1, [pc, #48]	; (8001490 <__NVIC_SetPriority+0x4c>)
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	0112      	lsls	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	440b      	add	r3, r1
 8001468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800146c:	e00a      	b.n	8001484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	b2da      	uxtb	r2, r3
 8001472:	4908      	ldr	r1, [pc, #32]	; (8001494 <__NVIC_SetPriority+0x50>)
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	3b04      	subs	r3, #4
 800147c:	0112      	lsls	r2, r2, #4
 800147e:	b2d2      	uxtb	r2, r2
 8001480:	440b      	add	r3, r1
 8001482:	761a      	strb	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	e000e100 	.word	0xe000e100
 8001494:	e000ed00 	.word	0xe000ed00

08001498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f1c3 0307 	rsb	r3, r3, #7
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	bf28      	it	cs
 80014b6:	2304      	movcs	r3, #4
 80014b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	3304      	adds	r3, #4
 80014be:	2b06      	cmp	r3, #6
 80014c0:	d902      	bls.n	80014c8 <NVIC_EncodePriority+0x30>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3b03      	subs	r3, #3
 80014c6:	e000      	b.n	80014ca <NVIC_EncodePriority+0x32>
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	f04f 32ff 	mov.w	r2, #4294967295
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	401a      	ands	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ea:	43d9      	mvns	r1, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	4313      	orrs	r3, r2
         );
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295
 8001524:	f7ff ff8e 	bl	8001444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff29 	bl	80013a4 <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001568:	f7ff ff40 	bl	80013ec <__NVIC_GetPriorityGrouping>
 800156c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	6978      	ldr	r0, [r7, #20]
 8001574:	f7ff ff90 	bl	8001498 <NVIC_EncodePriority>
 8001578:	4602      	mov	r2, r0
 800157a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157e:	4611      	mov	r1, r2
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff5f 	bl	8001444 <__NVIC_SetPriority>
}
 8001586:	bf00      	nop
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ff33 	bl	8001408 <__NVIC_EnableIRQ>
}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f7ff ffa4 	bl	8001500 <SysTick_Config>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e08d      	b.n	80016f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	461a      	mov	r2, r3
 80015dc:	4b47      	ldr	r3, [pc, #284]	; (80016fc <HAL_DMA_Init+0x138>)
 80015de:	429a      	cmp	r2, r3
 80015e0:	d80f      	bhi.n	8001602 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b45      	ldr	r3, [pc, #276]	; (8001700 <HAL_DMA_Init+0x13c>)
 80015ea:	4413      	add	r3, r2
 80015ec:	4a45      	ldr	r2, [pc, #276]	; (8001704 <HAL_DMA_Init+0x140>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	009a      	lsls	r2, r3, #2
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a42      	ldr	r2, [pc, #264]	; (8001708 <HAL_DMA_Init+0x144>)
 80015fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001600:	e00e      	b.n	8001620 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_DMA_Init+0x148>)
 800160a:	4413      	add	r3, r2
 800160c:	4a3d      	ldr	r2, [pc, #244]	; (8001704 <HAL_DMA_Init+0x140>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a3c      	ldr	r2, [pc, #240]	; (8001710 <HAL_DMA_Init+0x14c>)
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800163a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001644:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001650:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800165c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f000 f84e 	bl	8001714 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001680:	d102      	bne.n	8001688 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001690:	b2d2      	uxtb	r2, r2
 8001692:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800169c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d010      	beq.n	80016c8 <HAL_DMA_Init+0x104>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d80c      	bhi.n	80016c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f86e 	bl	8001790 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	e008      	b.n	80016da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40020407 	.word	0x40020407
 8001700:	bffdfff8 	.word	0xbffdfff8
 8001704:	cccccccd 	.word	0xcccccccd
 8001708:	40020000 	.word	0x40020000
 800170c:	bffdfbf8 	.word	0xbffdfbf8
 8001710:	40020400 	.word	0x40020400

08001714 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001724:	429a      	cmp	r2, r3
 8001726:	d802      	bhi.n	800172e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001728:	4b15      	ldr	r3, [pc, #84]	; (8001780 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e001      	b.n	8001732 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001730:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	3b08      	subs	r3, #8
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001740:	fba2 2303 	umull	r2, r3, r2, r3
 8001744:	091b      	lsrs	r3, r3, #4
 8001746:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	009a      	lsls	r2, r3, #2
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	4413      	add	r3, r2
 8001754:	461a      	mov	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a0b      	ldr	r2, [pc, #44]	; (800178c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800175e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f003 031f 	and.w	r3, r3, #31
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800176e:	bf00      	nop
 8001770:	371c      	adds	r7, #28
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40020407 	.word	0x40020407
 8001780:	40020800 	.word	0x40020800
 8001784:	40020820 	.word	0x40020820
 8001788:	cccccccd 	.word	0xcccccccd
 800178c:	40020880 	.word	0x40020880

08001790 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	3b01      	subs	r3, #1
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2201      	movs	r2, #1
 80017be:	409a      	lsls	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017c4:	bf00      	nop
 80017c6:	3714      	adds	r7, #20
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	1000823f 	.word	0x1000823f
 80017d4:	40020940 	.word	0x40020940

080017d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017d8:	b480      	push	{r7}
 80017da:	b087      	sub	sp, #28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017e2:	2300      	movs	r3, #0
 80017e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017e6:	e15a      	b.n	8001a9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2101      	movs	r1, #1
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	4013      	ands	r3, r2
 80017f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 814c 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d00b      	beq.n	8001820 <HAL_GPIO_Init+0x48>
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b02      	cmp	r3, #2
 800180e:	d007      	beq.n	8001820 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001814:	2b11      	cmp	r3, #17
 8001816:	d003      	beq.n	8001820 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b12      	cmp	r3, #18
 800181e:	d130      	bne.n	8001882 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	693a      	ldr	r2, [r7, #16]
 8001846:	4313      	orrs	r3, r2
 8001848:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001856:	2201      	movs	r2, #1
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0201 	and.w	r2, r3, #1
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	689a      	ldr	r2, [r3, #8]
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0xea>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b12      	cmp	r3, #18
 80018c0:	d123      	bne.n	800190a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	08da      	lsrs	r2, r3, #3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	3208      	adds	r2, #8
 80018ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	220f      	movs	r2, #15
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	691a      	ldr	r2, [r3, #16]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0307 	and.w	r3, r3, #7
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	08da      	lsrs	r2, r3, #3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	3208      	adds	r2, #8
 8001904:	6939      	ldr	r1, [r7, #16]
 8001906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	2203      	movs	r2, #3
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43db      	mvns	r3, r3
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0203 	and.w	r2, r3, #3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	693a      	ldr	r2, [r7, #16]
 8001934:	4313      	orrs	r3, r2
 8001936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 80a6 	beq.w	8001a98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194c:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 800194e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6613      	str	r3, [r2, #96]	; 0x60
 8001958:	4b58      	ldr	r3, [pc, #352]	; (8001abc <HAL_GPIO_Init+0x2e4>)
 800195a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001964:	4a56      	ldr	r2, [pc, #344]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	3302      	adds	r3, #2
 800196c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	f003 0303 	and.w	r3, r3, #3
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	220f      	movs	r2, #15
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800198e:	d01f      	beq.n	80019d0 <HAL_GPIO_Init+0x1f8>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x2ec>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d019      	beq.n	80019cc <HAL_GPIO_Init+0x1f4>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x2f0>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d013      	beq.n	80019c8 <HAL_GPIO_Init+0x1f0>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x2f4>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00d      	beq.n	80019c4 <HAL_GPIO_Init+0x1ec>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a49      	ldr	r2, [pc, #292]	; (8001ad0 <HAL_GPIO_Init+0x2f8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <HAL_GPIO_Init+0x1e8>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_GPIO_Init+0x2fc>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d101      	bne.n	80019bc <HAL_GPIO_Init+0x1e4>
 80019b8:	2305      	movs	r3, #5
 80019ba:	e00a      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019bc:	2306      	movs	r3, #6
 80019be:	e008      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c0:	2304      	movs	r3, #4
 80019c2:	e006      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e004      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019c8:	2302      	movs	r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019cc:	2301      	movs	r3, #1
 80019ce:	e000      	b.n	80019d2 <HAL_GPIO_Init+0x1fa>
 80019d0:	2300      	movs	r3, #0
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	f002 0203 	and.w	r2, r2, #3
 80019d8:	0092      	lsls	r2, r2, #2
 80019da:	4093      	lsls	r3, r2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019e2:	4937      	ldr	r1, [pc, #220]	; (8001ac0 <HAL_GPIO_Init+0x2e8>)
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019f0:	4b39      	ldr	r3, [pc, #228]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d003      	beq.n	8001a14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a14:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	43db      	mvns	r3, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4013      	ands	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d003      	beq.n	8001a3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a44:	4b24      	ldr	r3, [pc, #144]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_GPIO_Init+0x300>)
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f47f ae9d 	bne.w	80017e8 <HAL_GPIO_Init+0x10>
  }
}
 8001aae:	bf00      	nop
 8001ab0:	bf00      	nop
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	48001000 	.word	0x48001000
 8001ad4:	48001400 	.word	0x48001400
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	807b      	strh	r3, [r7, #2]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	787b      	ldrb	r3, [r7, #1]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	460b      	mov	r3, r1
 8001b16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b1e:	887a      	ldrh	r2, [r7, #2]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4013      	ands	r3, r2
 8001b24:	041a      	lsls	r2, r3, #16
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43d9      	mvns	r1, r3
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	400b      	ands	r3, r1
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	619a      	str	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b42:	b08b      	sub	sp, #44	; 0x2c
 8001b44:	af06      	add	r7, sp, #24
 8001b46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0d7      	b.n	8001d02 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d106      	bne.n	8001b6c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f007 fff6 	bl	8009b58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2203      	movs	r2, #3
 8001b70:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 ff46 	bl	8005a0a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
 8001b82:	e04c      	b.n	8001c1e <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	6879      	ldr	r1, [r7, #4]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	440b      	add	r3, r1
 8001b94:	3301      	adds	r3, #1
 8001b96:	2201      	movs	r2, #1
 8001b98:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	440b      	add	r3, r1
 8001baa:	7bfa      	ldrb	r2, [r7, #15]
 8001bac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
 8001bb2:	b298      	uxth	r0, r3
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	440b      	add	r3, r1
 8001bc0:	3336      	adds	r3, #54	; 0x36
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	6879      	ldr	r1, [r7, #4]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	3303      	adds	r3, #3
 8001bd8:	2200      	movs	r2, #0
 8001bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	440b      	add	r3, r1
 8001bea:	3338      	adds	r3, #56	; 0x38
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	440b      	add	r3, r1
 8001bfe:	333c      	adds	r3, #60	; 0x3c
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c04:	7bfa      	ldrb	r2, [r7, #15]
 8001c06:	6879      	ldr	r1, [r7, #4]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4413      	add	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	440b      	add	r3, r1
 8001c12:	3340      	adds	r3, #64	; 0x40
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3ad      	bcc.n	8001b84 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e044      	b.n	8001cb8 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c56:	7bfa      	ldrb	r2, [r7, #15]
 8001c58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	440b      	add	r3, r1
 8001c68:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	440b      	add	r3, r1
 8001c7e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	6879      	ldr	r1, [r7, #4]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c9c:	7bfa      	ldrb	r2, [r7, #15]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
 8001cb8:	7bfa      	ldrb	r2, [r7, #15]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d3b5      	bcc.n	8001c2e <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	687e      	ldr	r6, [r7, #4]
 8001cca:	466d      	mov	r5, sp
 8001ccc:	f106 0410 	add.w	r4, r6, #16
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	602b      	str	r3, [r5, #0]
 8001cd8:	1d33      	adds	r3, r6, #4
 8001cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cdc:	6838      	ldr	r0, [r7, #0]
 8001cde:	f003 feaf 	bl	8005a40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d102      	bne.n	8001d00 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f001 fb8a 	bl	8003414 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d0a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d101      	bne.n	8001d20 <HAL_PCD_Start+0x16>
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	e012      	b.n	8001d46 <HAL_PCD_Start+0x3c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fe55 	bl	80059dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4618      	mov	r0, r3
 8001d38:	f006 f809 	bl	8007d4e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f006 f80e 	bl	8007d7c <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d6a:	d102      	bne.n	8001d72 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 fb4d 	bl	800240c <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f006 f800 	bl	8007d7c <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d86:	d112      	bne.n	8001dae <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f007 ff54 	bl	8009c4e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001da6:	2100      	movs	r1, #0
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f91e 	bl	8001fea <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f005 ffe2 	bl	8007d7c <USB_ReadInterrupts>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc2:	d10b      	bne.n	8001ddc <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001dd6:	b292      	uxth	r2, r2
 8001dd8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f005 ffcb 	bl	8007d7c <USB_ReadInterrupts>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001df0:	d10b      	bne.n	8001e0a <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e04:	b292      	uxth	r2, r2
 8001e06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 ffb4 	bl	8007d7c <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e1e:	d133      	bne.n	8001e88 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e28:	b29a      	uxth	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 0204 	bic.w	r2, r2, #4
 8001e32:	b292      	uxth	r2, r2
 8001e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e40:	b29a      	uxth	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0208 	bic.w	r2, r2, #8
 8001e4a:	b292      	uxth	r2, r2
 8001e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001e62:	2100      	movs	r1, #0
 8001e64:	6878      	ldr	r0, [r7, #4]
 8001e66:	f008 f8e7 	bl	800a038 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f007 ff28 	bl	8009cc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e82:	b292      	uxth	r2, r2
 8001e84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f005 ff75 	bl	8007d7c <USB_ReadInterrupts>
 8001e92:	4603      	mov	r3, r0
 8001e94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e9c:	d126      	bne.n	8001eec <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f042 0208 	orr.w	r2, r2, #8
 8001eb0:	b292      	uxth	r2, r2
 8001eb2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ec8:	b292      	uxth	r2, r2
 8001eca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0204 	orr.w	r2, r2, #4
 8001ee0:	b292      	uxth	r2, r2
 8001ee2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f007 fed0 	bl	8009c8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f005 ff43 	bl	8007d7c <USB_ReadInterrupts>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d13f      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f12:	b292      	uxth	r2, r2
 8001f14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d12b      	bne.n	8001f7a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0204 	orr.w	r2, r2, #4
 8001f34:	b292      	uxth	r2, r2
 8001f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f42:	b29a      	uxth	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0208 	orr.w	r2, r2, #8
 8001f4c:	b292      	uxth	r2, r2
 8001f4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001f70:	2101      	movs	r1, #1
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f008 f860 	bl	800a038 <HAL_PCDEx_LPM_Callback>
 8001f78:	e002      	b.n	8001f80 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f007 fe86 	bl	8009c8c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f005 fef9 	bl	8007d7c <USB_ReadInterrupts>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f94:	d10e      	bne.n	8001fb4 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001fa8:	b292      	uxth	r2, r2
 8001faa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f007 fe3f 	bl	8009c32 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f005 fedf 	bl	8007d7c <USB_ReadInterrupts>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc8:	d10b      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fdc:	b292      	uxth	r2, r2
 8001fde:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d101      	bne.n	8002004 <HAL_PCD_SetAddress+0x1a>
 8002000:	2302      	movs	r3, #2
 8002002:	e013      	b.n	800202c <HAL_PCD_SetAddress+0x42>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	78fa      	ldrb	r2, [r7, #3]
 800201a:	4611      	mov	r1, r2
 800201c:	4618      	mov	r0, r3
 800201e:	f005 fe82 	bl	8007d26 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	4608      	mov	r0, r1
 800203e:	4611      	mov	r1, r2
 8002040:	461a      	mov	r2, r3
 8002042:	4603      	mov	r3, r0
 8002044:	70fb      	strb	r3, [r7, #3]
 8002046:	460b      	mov	r3, r1
 8002048:	803b      	strh	r3, [r7, #0]
 800204a:	4613      	mov	r3, r2
 800204c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da0e      	bge.n	8002078 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 0307 	and.w	r3, r3, #7
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	705a      	strb	r2, [r3, #1]
 8002076:	e00e      	b.n	8002096 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	f003 0207 	and.w	r2, r3, #7
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	2200      	movs	r2, #0
 8002094:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	f003 0307 	and.w	r3, r3, #7
 800209c:	b2da      	uxtb	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020a2:	883a      	ldrh	r2, [r7, #0]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	78ba      	ldrb	r2, [r7, #2]
 80020ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	785b      	ldrb	r3, [r3, #1]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020c0:	78bb      	ldrb	r3, [r7, #2]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d102      	bne.n	80020cc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	2200      	movs	r2, #0
 80020ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_PCD_EP_Open+0xa6>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e00e      	b.n	80020f8 <HAL_PCD_EP_Open+0xc4>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68f9      	ldr	r1, [r7, #12]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f003 fccb 	bl	8005a84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80020f6:	7afb      	ldrb	r3, [r7, #11]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	460b      	mov	r3, r1
 800210a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800210c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002110:	2b00      	cmp	r3, #0
 8002112:	da0e      	bge.n	8002132 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2201      	movs	r2, #1
 800212e:	705a      	strb	r2, [r3, #1]
 8002130:	e00e      	b.n	8002150 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f003 0207 	and.w	r2, r3, #7
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002150:	78fb      	ldrb	r3, [r7, #3]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	b2da      	uxtb	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002162:	2b01      	cmp	r3, #1
 8002164:	d101      	bne.n	800216a <HAL_PCD_EP_Close+0x6a>
 8002166:	2302      	movs	r3, #2
 8002168:	e00e      	b.n	8002188 <HAL_PCD_EP_Close+0x88>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68f9      	ldr	r1, [r7, #12]
 8002178:	4618      	mov	r0, r3
 800217a:	f003 fff1 	bl	8006160 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
}
 8002188:	4618      	mov	r0, r3
 800218a:	3710      	adds	r7, #16
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}

08002190 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	460b      	mov	r3, r1
 800219e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021a0:	7afb      	ldrb	r3, [r7, #11]
 80021a2:	f003 0207 	and.w	r2, r3, #7
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	4413      	add	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021d0:	7afb      	ldrb	r3, [r7, #11]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d106      	bne.n	80021f4 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6979      	ldr	r1, [r7, #20]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f004 f9a4 	bl	800653a <USB_EPStartXfer>
 80021f2:	e005      	b.n	8002200 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6979      	ldr	r1, [r7, #20]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f004 f99d 	bl	800653a <USB_EPStartXfer>
  }

  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002216:	78fb      	ldrb	r3, [r7, #3]
 8002218:	f003 0207 	and.w	r2, r3, #7
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	440b      	add	r3, r1
 8002228:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800222c:	681b      	ldr	r3, [r3, #0]
}
 800222e:	4618      	mov	r0, r3
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	607a      	str	r2, [r7, #4]
 8002244:	603b      	str	r3, [r7, #0]
 8002246:	460b      	mov	r3, r1
 8002248:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800224a:	7afb      	ldrb	r3, [r7, #11]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	4413      	add	r3, r2
 800225e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	683a      	ldr	r2, [r7, #0]
 800226a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	2201      	movs	r2, #1
 8002284:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	b2da      	uxtb	r2, r3
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002292:	7afb      	ldrb	r3, [r7, #11]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	2b00      	cmp	r3, #0
 800229a:	d106      	bne.n	80022aa <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6979      	ldr	r1, [r7, #20]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f949 	bl	800653a <USB_EPStartXfer>
 80022a8:	e005      	b.n	80022b6 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6979      	ldr	r1, [r7, #20]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 f942 	bl	800653a <USB_EPStartXfer>
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 0207 	and.w	r2, r3, #7
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d901      	bls.n	80022de <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e03e      	b.n	800235c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022de:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	da0e      	bge.n	8002304 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022e6:	78fb      	ldrb	r3, [r7, #3]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	1c5a      	adds	r2, r3, #1
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2201      	movs	r2, #1
 8002300:	705a      	strb	r2, [r3, #1]
 8002302:	e00c      	b.n	800231e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	4613      	mov	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2201      	movs	r2, #1
 8002322:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002336:	2b01      	cmp	r3, #1
 8002338:	d101      	bne.n	800233e <HAL_PCD_EP_SetStall+0x7e>
 800233a:	2302      	movs	r3, #2
 800233c:	e00e      	b.n	800235c <HAL_PCD_EP_SetStall+0x9c>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68f9      	ldr	r1, [r7, #12]
 800234c:	4618      	mov	r0, r3
 800234e:	f005 fbeb 	bl	8007b28 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	460b      	mov	r3, r1
 800236e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002370:	78fb      	ldrb	r3, [r7, #3]
 8002372:	f003 020f 	and.w	r2, r3, #15
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d901      	bls.n	8002382 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e040      	b.n	8002404 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002382:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002386:	2b00      	cmp	r3, #0
 8002388:	da0e      	bge.n	80023a8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800238a:	78fb      	ldrb	r3, [r7, #3]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	705a      	strb	r2, [r3, #1]
 80023a6:	e00e      	b.n	80023c6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023a8:	78fb      	ldrb	r3, [r7, #3]
 80023aa:	f003 0207 	and.w	r2, r3, #7
 80023ae:	4613      	mov	r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	4413      	add	r3, r2
 80023b4:	00db      	lsls	r3, r3, #3
 80023b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2200      	movs	r2, #0
 80023ca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_PCD_EP_ClrStall+0x82>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e00e      	b.n	8002404 <HAL_PCD_EP_ClrStall+0xa0>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68f9      	ldr	r1, [r7, #12]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f005 fbe8 	bl	8007bca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08e      	sub	sp, #56	; 0x38
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002414:	e2d6      	b.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002420:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002422:	b2db      	uxtb	r3, r3
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800242c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002430:	2b00      	cmp	r3, #0
 8002432:	f040 815b 	bne.w	80026ec <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002438:	f003 0310 	and.w	r3, r3, #16
 800243c:	2b00      	cmp	r3, #0
 800243e:	d150      	bne.n	80024e2 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800244c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002450:	81fb      	strh	r3, [r7, #14]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	89fb      	ldrh	r3, [r7, #14]
 8002458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002460:	b29b      	uxth	r3, r3
 8002462:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3328      	adds	r3, #40	; 0x28
 8002468:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002472:	b29b      	uxth	r3, r3
 8002474:	461a      	mov	r2, r3
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	4413      	add	r3, r2
 8002484:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	695a      	ldr	r2, [r3, #20]
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	441a      	add	r2, r3
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80024a0:	2100      	movs	r1, #0
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f007 fbab 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8287 	beq.w	80029c4 <PCD_EP_ISR_Handler+0x5b8>
 80024b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 8282 	bne.w	80029c4 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b292      	uxth	r2, r2
 80024d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80024e0:	e270      	b.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80024f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80024f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d032      	beq.n	8002562 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002504:	b29b      	uxth	r3, r3
 8002506:	461a      	mov	r2, r3
 8002508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	4413      	add	r3, r2
 8002516:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800251a:	881b      	ldrh	r3, [r3, #0]
 800251c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800252e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002530:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002536:	b29b      	uxth	r3, r3
 8002538:	f005 fc72 	bl	8007e20 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	881b      	ldrh	r3, [r3, #0]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002548:	4013      	ands	r3, r2
 800254a:	823b      	strh	r3, [r7, #16]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	8a3a      	ldrh	r2, [r7, #16]
 8002552:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002556:	b292      	uxth	r2, r2
 8002558:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f007 fb22 	bl	8009ba4 <HAL_PCD_SetupStageCallback>
 8002560:	e230      	b.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002562:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002566:	2b00      	cmp	r3, #0
 8002568:	f280 822c 	bge.w	80029c4 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	881b      	ldrh	r3, [r3, #0]
 8002572:	b29a      	uxth	r2, r3
 8002574:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002578:	4013      	ands	r3, r2
 800257a:	83bb      	strh	r3, [r7, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	8bba      	ldrh	r2, [r7, #28]
 8002582:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002586:	b292      	uxth	r2, r2
 8002588:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002592:	b29b      	uxth	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4413      	add	r3, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6812      	ldr	r2, [r2, #0]
 80025a2:	4413      	add	r3, r2
 80025a4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80025a8:	881b      	ldrh	r3, [r3, #0]
 80025aa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d019      	beq.n	80025ee <PCD_EP_ISR_Handler+0x1e2>
 80025ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d015      	beq.n	80025ee <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	6959      	ldr	r1, [r3, #20]
 80025ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025cc:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80025ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f005 fc24 	bl	8007e20 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	695a      	ldr	r2, [r3, #20]
 80025dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025de:	69db      	ldr	r3, [r3, #28]
 80025e0:	441a      	add	r2, r3
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80025e6:	2100      	movs	r1, #0
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f007 faed 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	881b      	ldrh	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f040 81e2 	bne.w	80029c4 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800260e:	b29b      	uxth	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4413      	add	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d112      	bne.n	800264e <PCD_EP_ISR_Handler+0x242>
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	b29b      	uxth	r3, r3
 800262e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002632:	b29a      	uxth	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	801a      	strh	r2, [r3, #0]
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	881b      	ldrh	r3, [r3, #0]
 800263c:	b29b      	uxth	r3, r3
 800263e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002642:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002646:	b29a      	uxth	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	801a      	strh	r2, [r3, #0]
 800264c:	e02f      	b.n	80026ae <PCD_EP_ISR_Handler+0x2a2>
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	2b3e      	cmp	r3, #62	; 0x3e
 8002654:	d813      	bhi.n	800267e <PCD_EP_ISR_Handler+0x272>
 8002656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	085b      	lsrs	r3, r3, #1
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
 800265e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d002      	beq.n	8002670 <PCD_EP_ISR_Handler+0x264>
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	3301      	adds	r3, #1
 800266e:	633b      	str	r3, [r7, #48]	; 0x30
 8002670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002672:	b29b      	uxth	r3, r3
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	b29a      	uxth	r2, r3
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	e017      	b.n	80026ae <PCD_EP_ISR_Handler+0x2a2>
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	095b      	lsrs	r3, r3, #5
 8002684:	633b      	str	r3, [r7, #48]	; 0x30
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <PCD_EP_ISR_Handler+0x28c>
 8002692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002694:	3b01      	subs	r3, #1
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
 8002698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269a:	b29b      	uxth	r3, r3
 800269c:	029b      	lsls	r3, r3, #10
 800269e:	b29b      	uxth	r3, r3
 80026a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	881b      	ldrh	r3, [r3, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	827b      	strh	r3, [r7, #18]
 80026c0:	8a7b      	ldrh	r3, [r7, #18]
 80026c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80026c6:	827b      	strh	r3, [r7, #18]
 80026c8:	8a7b      	ldrh	r3, [r7, #18]
 80026ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80026ce:	827b      	strh	r3, [r7, #18]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	8a7b      	ldrh	r3, [r7, #18]
 80026d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	8013      	strh	r3, [r2, #0]
 80026ea:	e16b      	b.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80026fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002702:	2b00      	cmp	r3, #0
 8002704:	f280 80e4 	bge.w	80028d0 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	b29a      	uxth	r2, r3
 800271a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800271e:	4013      	ands	r3, r2
 8002720:	853b      	strh	r3, [r7, #40]	; 0x28
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	461a      	mov	r2, r3
 8002728:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	4413      	add	r3, r2
 8002730:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002732:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002736:	b292      	uxth	r2, r2
 8002738:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800273a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800273e:	4613      	mov	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	7b1b      	ldrb	r3, [r3, #12]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d120      	bne.n	800279a <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002760:	b29b      	uxth	r3, r3
 8002762:	461a      	mov	r2, r3
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4413      	add	r3, r2
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4413      	add	r3, r2
 8002772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800277e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 8083 	beq.w	800288c <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	6959      	ldr	r1, [r3, #20]
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	88da      	ldrh	r2, [r3, #6]
 8002792:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002794:	f005 fb44 	bl	8007e20 <USB_ReadPMA>
 8002798:	e078      	b.n	800288c <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	78db      	ldrb	r3, [r3, #3]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d108      	bne.n	80027b4 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80027a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027a4:	461a      	mov	r2, r3
 80027a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f919 	bl	80029e0 <HAL_PCD_EP_DB_Receive>
 80027ae:	4603      	mov	r3, r0
 80027b0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80027b2:	e06b      	b.n	800288c <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	441a      	add	r2, r3
 80027de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80027e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80027e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	b29b      	uxth	r3, r3
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d01f      	beq.n	800284e <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002816:	b29b      	uxth	r3, r3
 8002818:	461a      	mov	r2, r3
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6812      	ldr	r2, [r2, #0]
 8002826:	4413      	add	r3, r2
 8002828:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002832:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002834:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002836:	2b00      	cmp	r3, #0
 8002838:	d028      	beq.n	800288c <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	6959      	ldr	r1, [r3, #20]
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	891a      	ldrh	r2, [r3, #8]
 8002846:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002848:	f005 faea 	bl	8007e20 <USB_ReadPMA>
 800284c:	e01e      	b.n	800288c <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002856:	b29b      	uxth	r3, r3
 8002858:	461a      	mov	r2, r3
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	4413      	add	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6812      	ldr	r2, [r2, #0]
 8002866:	4413      	add	r3, r2
 8002868:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800286c:	881b      	ldrh	r3, [r3, #0]
 800286e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002872:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002876:	2b00      	cmp	r3, #0
 8002878:	d008      	beq.n	800288c <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	6959      	ldr	r1, [r3, #20]
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	895a      	ldrh	r2, [r3, #10]
 8002886:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002888:	f005 faca 	bl	8007e20 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	69da      	ldr	r2, [r3, #28]
 8002890:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002892:	441a      	add	r2, r3
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800289e:	441a      	add	r2, r3
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d004      	beq.n	80028b6 <PCD_EP_ISR_Handler+0x4aa>
 80028ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d206      	bcs.n	80028c4 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	4619      	mov	r1, r3
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f007 f983 	bl	8009bc8 <HAL_PCD_DataOutStageCallback>
 80028c2:	e005      	b.n	80028d0 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fe35 	bl	800653a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80028d0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d074      	beq.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 80028da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028de:	1c5a      	adds	r2, r3, #1
 80028e0:	4613      	mov	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	4413      	add	r3, r2
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4413      	add	r3, r2
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002908:	843b      	strh	r3, [r7, #32]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	461a      	mov	r2, r3
 8002910:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	441a      	add	r2, r3
 8002918:	8c3b      	ldrh	r3, [r7, #32]
 800291a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800291e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002922:	b29b      	uxth	r3, r3
 8002924:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	78db      	ldrb	r3, [r3, #3]
 800292a:	2b02      	cmp	r3, #2
 800292c:	d144      	bne.n	80029b8 <PCD_EP_ISR_Handler+0x5ac>
 800292e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13f      	bne.n	80029b8 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002940:	b29b      	uxth	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4413      	add	r3, r2
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	6812      	ldr	r2, [r2, #0]
 8002950:	4413      	add	r3, r2
 8002952:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800295c:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	8bfb      	ldrh	r3, [r7, #30]
 8002964:	429a      	cmp	r2, r3
 8002966:	d906      	bls.n	8002976 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	699a      	ldr	r2, [r3, #24]
 800296c:	8bfb      	ldrh	r3, [r7, #30]
 800296e:	1ad2      	subs	r2, r2, r3
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	619a      	str	r2, [r3, #24]
 8002974:	e002      	b.n	800297c <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 8002976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002978:	2200      	movs	r2, #0
 800297a:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d106      	bne.n	8002992 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	4619      	mov	r1, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f007 f937 	bl	8009bfe <HAL_PCD_DataInStageCallback>
 8002990:	e018      	b.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	8bfb      	ldrh	r3, [r7, #30]
 8002998:	441a      	add	r2, r3
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	69da      	ldr	r2, [r3, #28]
 80029a2:	8bfb      	ldrh	r3, [r7, #30]
 80029a4:	441a      	add	r2, r3
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fdc2 	bl	800653a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80029b6:	e005      	b.n	80029c4 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80029b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80029ba:	461a      	mov	r2, r3
 80029bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f917 	bl	8002bf2 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f6ff ad20 	blt.w	8002416 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3738      	adds	r7, #56	; 0x38
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d07c      	beq.n	8002af2 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a1c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	8b7b      	ldrh	r3, [r7, #26]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d306      	bcc.n	8002a36 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	8b7b      	ldrh	r3, [r7, #26]
 8002a2e:	1ad2      	subs	r2, r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	619a      	str	r2, [r3, #24]
 8002a34:	e002      	b.n	8002a3c <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	699b      	ldr	r3, [r3, #24]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d123      	bne.n	8002a8c <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5e:	833b      	strh	r3, [r7, #24]
 8002a60:	8b3b      	ldrh	r3, [r7, #24]
 8002a62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a66:	833b      	strh	r3, [r7, #24]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	441a      	add	r2, r3
 8002a76:	8b3b      	ldrh	r3, [r7, #24]
 8002a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a8c:	88fb      	ldrh	r3, [r7, #6]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d01f      	beq.n	8002ad6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4413      	add	r3, r2
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab0:	82fb      	strh	r3, [r7, #22]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	441a      	add	r2, r3
 8002ac0:	8afb      	ldrh	r3, [r7, #22]
 8002ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ace:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ad6:	8b7b      	ldrh	r3, [r7, #26]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8085 	beq.w	8002be8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6818      	ldr	r0, [r3, #0]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6959      	ldr	r1, [r3, #20]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	891a      	ldrh	r2, [r3, #8]
 8002aea:	8b7b      	ldrh	r3, [r7, #26]
 8002aec:	f005 f998 	bl	8007e20 <USB_ReadPMA>
 8002af0:	e07a      	b.n	8002be8 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b16:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	699a      	ldr	r2, [r3, #24]
 8002b1c:	8b7b      	ldrh	r3, [r7, #26]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d306      	bcc.n	8002b30 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	8b7b      	ldrh	r3, [r7, #26]
 8002b28:	1ad2      	subs	r2, r2, r3
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	619a      	str	r2, [r3, #24]
 8002b2e:	e002      	b.n	8002b36 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d123      	bne.n	8002b86 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b58:	83fb      	strh	r3, [r7, #30]
 8002b5a:	8bfb      	ldrh	r3, [r7, #30]
 8002b5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b60:	83fb      	strh	r3, [r7, #30]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	441a      	add	r2, r3
 8002b70:	8bfb      	ldrh	r3, [r7, #30]
 8002b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d11f      	bne.n	8002bd0 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002baa:	83bb      	strh	r3, [r7, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	8bbb      	ldrh	r3, [r7, #28]
 8002bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bc8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002bd0:	8b7b      	ldrh	r3, [r7, #26]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6818      	ldr	r0, [r3, #0]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	6959      	ldr	r1, [r3, #20]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	895a      	ldrh	r2, [r3, #10]
 8002be2:	8b7b      	ldrh	r3, [r7, #26]
 8002be4:	f005 f91c 	bl	8007e20 <USB_ReadPMA>
    }
  }

  return count;
 8002be8:	8b7b      	ldrh	r3, [r7, #26]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b0a2      	sub	sp, #136	; 0x88
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	60f8      	str	r0, [r7, #12]
 8002bfa:	60b9      	str	r1, [r7, #8]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 81c5 	beq.w	8002f96 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	461a      	mov	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	6812      	ldr	r2, [r2, #0]
 8002c24:	4413      	add	r3, r2
 8002c26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	699a      	ldr	r2, [r3, #24]
 8002c38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d907      	bls.n	8002c50 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	699a      	ldr	r2, [r3, #24]
 8002c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c48:	1ad2      	subs	r2, r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	619a      	str	r2, [r3, #24]
 8002c4e:	e002      	b.n	8002c56 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	699b      	ldr	r3, [r3, #24]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f040 80b9 	bne.w	8002dd2 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	785b      	ldrb	r3, [r3, #1]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d126      	bne.n	8002cb6 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7c:	4413      	add	r3, r2
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	00da      	lsls	r2, r3, #3
 8002c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c88:	4413      	add	r3, r2
 8002c8a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9e:	801a      	strh	r2, [r3, #0]
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002caa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	801a      	strh	r2, [r3, #0]
 8002cb4:	e01a      	b.n	8002cec <HAL_PCD_EP_DB_Transmit+0xfa>
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	785b      	ldrb	r3, [r3, #1]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d116      	bne.n	8002cec <HAL_PCD_EP_DB_Transmit+0xfa>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	633b      	str	r3, [r7, #48]	; 0x30
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	461a      	mov	r2, r3
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	4413      	add	r3, r2
 8002cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	00da      	lsls	r2, r3, #3
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	4413      	add	r3, r2
 8002ce0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce8:	2200      	movs	r2, #0
 8002cea:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	623b      	str	r3, [r7, #32]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	785b      	ldrb	r3, [r3, #1]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d126      	bne.n	8002d48 <HAL_PCD_EP_DB_Transmit+0x156>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	00da      	lsls	r2, r3, #3
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	881b      	ldrh	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	801a      	strh	r2, [r3, #0]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	881b      	ldrh	r3, [r3, #0]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	801a      	strh	r2, [r3, #0]
 8002d46:	e017      	b.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	785b      	ldrb	r3, [r3, #1]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d113      	bne.n	8002d78 <HAL_PCD_EP_DB_Transmit+0x186>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	6a3b      	ldr	r3, [r7, #32]
 8002d5e:	4413      	add	r3, r2
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	00da      	lsls	r2, r3, #3
 8002d68:	6a3b      	ldr	r3, [r7, #32]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2200      	movs	r2, #0
 8002d76:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f006 ff3d 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 82d2 	beq.w	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	461a      	mov	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002daa:	827b      	strh	r3, [r7, #18]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	441a      	add	r2, r3
 8002dba:	8a7b      	ldrh	r3, [r7, #18]
 8002dbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8013      	strh	r3, [r2, #0]
 8002dd0:	e2b0      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dd2:	88fb      	ldrh	r3, [r7, #6]
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d021      	beq.n	8002e20 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	881b      	ldrh	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002df6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	441a      	add	r2, r3
 8002e08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	f040 8284 	bne.w	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	695a      	ldr	r2, [r3, #20]
 8002e30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e34:	441a      	add	r2, r3
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	69da      	ldr	r2, [r3, #28]
 8002e3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e42:	441a      	add	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	6a1a      	ldr	r2, [r3, #32]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d309      	bcc.n	8002e68 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	6a1a      	ldr	r2, [r3, #32]
 8002e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e60:	1ad2      	subs	r2, r2, r3
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	621a      	str	r2, [r3, #32]
 8002e66:	e015      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d107      	bne.n	8002e80 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 8002e70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e74:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002e7e:	e009      	b.n	8002e94 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	785b      	ldrb	r3, [r3, #1]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d155      	bne.n	8002f48 <HAL_PCD_EP_DB_Transmit+0x356>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb0:	4413      	add	r3, r2
 8002eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	00da      	lsls	r2, r3, #3
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	4413      	add	r3, r2
 8002ebe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ec2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d112      	bne.n	8002ef0 <HAL_PCD_EP_DB_Transmit+0x2fe>
 8002eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ed8:	801a      	strh	r2, [r3, #0]
 8002eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ee4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eec:	801a      	strh	r2, [r3, #0]
 8002eee:	e047      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef2:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef4:	d811      	bhi.n	8002f1a <HAL_PCD_EP_DB_Transmit+0x328>
 8002ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef8:	085b      	lsrs	r3, r3, #1
 8002efa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002efc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <HAL_PCD_EP_DB_Transmit+0x31a>
 8002f06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f08:	3301      	adds	r3, #1
 8002f0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	029b      	lsls	r3, r3, #10
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f16:	801a      	strh	r2, [r3, #0]
 8002f18:	e032      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1c:	095b      	lsrs	r3, r3, #5
 8002f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_PCD_EP_DB_Transmit+0x33e>
 8002f2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	029b      	lsls	r3, r3, #10
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f44:	801a      	strh	r2, [r3, #0]
 8002f46:	e01b      	b.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	785b      	ldrb	r3, [r3, #1]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d117      	bne.n	8002f80 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	643b      	str	r3, [r7, #64]	; 0x40
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f64:	4413      	add	r3, r2
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	00da      	lsls	r2, r3, #3
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	4413      	add	r3, r2
 8002f72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6818      	ldr	r0, [r3, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	6959      	ldr	r1, [r3, #20]
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	891a      	ldrh	r2, [r3, #8]
 8002f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	f004 ff04 	bl	8007d9c <USB_WritePMA>
 8002f94:	e1ce      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	4413      	add	r3, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002fb4:	881b      	ldrh	r3, [r3, #0]
 8002fb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d307      	bcc.n	8002fda <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd2:	1ad2      	subs	r2, r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	619a      	str	r2, [r3, #24]
 8002fd8:	e002      	b.n	8002fe0 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 80c4 	bne.w	8003172 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	785b      	ldrb	r3, [r3, #1]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d126      	bne.n	8003040 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003000:	b29b      	uxth	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003006:	4413      	add	r3, r2
 8003008:	66fb      	str	r3, [r7, #108]	; 0x6c
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	00da      	lsls	r2, r3, #3
 8003010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003012:	4413      	add	r3, r2
 8003014:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003018:	66bb      	str	r3, [r7, #104]	; 0x68
 800301a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800301c:	881b      	ldrh	r3, [r3, #0]
 800301e:	b29b      	uxth	r3, r3
 8003020:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003024:	b29a      	uxth	r2, r3
 8003026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003028:	801a      	strh	r2, [r3, #0]
 800302a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003038:	b29a      	uxth	r2, r3
 800303a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800303c:	801a      	strh	r2, [r3, #0]
 800303e:	e01a      	b.n	8003076 <HAL_PCD_EP_DB_Transmit+0x484>
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	785b      	ldrb	r3, [r3, #1]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d116      	bne.n	8003076 <HAL_PCD_EP_DB_Transmit+0x484>
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	677b      	str	r3, [r7, #116]	; 0x74
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003056:	b29b      	uxth	r3, r3
 8003058:	461a      	mov	r2, r3
 800305a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800305c:	4413      	add	r3, r2
 800305e:	677b      	str	r3, [r7, #116]	; 0x74
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003068:	4413      	add	r3, r2
 800306a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800306e:	673b      	str	r3, [r7, #112]	; 0x70
 8003070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003072:	2200      	movs	r2, #0
 8003074:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	67bb      	str	r3, [r7, #120]	; 0x78
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	785b      	ldrb	r3, [r3, #1]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d12f      	bne.n	80030e4 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003094:	b29b      	uxth	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800309c:	4413      	add	r3, r2
 800309e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	00da      	lsls	r2, r3, #3
 80030a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030ac:	4413      	add	r3, r2
 80030ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	b29b      	uxth	r3, r3
 80030be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c8:	801a      	strh	r2, [r3, #0]
 80030ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030da:	b29a      	uxth	r2, r3
 80030dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030e0:	801a      	strh	r2, [r3, #0]
 80030e2:	e017      	b.n	8003114 <HAL_PCD_EP_DB_Transmit+0x522>
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	785b      	ldrb	r3, [r3, #1]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d113      	bne.n	8003114 <HAL_PCD_EP_DB_Transmit+0x522>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	461a      	mov	r2, r3
 80030f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fa:	4413      	add	r3, r2
 80030fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	00da      	lsls	r2, r3, #3
 8003104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003106:	4413      	add	r3, r2
 8003108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800310c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800310e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003110:	2200      	movs	r2, #0
 8003112:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	4619      	mov	r1, r3
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f006 fd6f 	bl	8009bfe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003120:	88fb      	ldrh	r3, [r7, #6]
 8003122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003126:	2b00      	cmp	r3, #0
 8003128:	f040 8104 	bne.w	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	461a      	mov	r2, r3
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003146:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	441a      	add	r2, r3
 8003158:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800315c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800316c:	b29b      	uxth	r3, r3
 800316e:	8013      	strh	r3, [r2, #0]
 8003170:	e0e0      	b.n	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003172:	88fb      	ldrh	r3, [r7, #6]
 8003174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d121      	bne.n	80031c0 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	441a      	add	r2, r3
 80031a8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80031b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80031bc:	b29b      	uxth	r3, r3
 80031be:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	f040 80b4 	bne.w	8003334 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	695a      	ldr	r2, [r3, #20]
 80031d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031d4:	441a      	add	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	69da      	ldr	r2, [r3, #28]
 80031de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031e2:	441a      	add	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	6a1a      	ldr	r2, [r3, #32]
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d309      	bcc.n	8003208 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	6a1a      	ldr	r2, [r3, #32]
 80031fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003200:	1ad2      	subs	r2, r2, r3
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	621a      	str	r2, [r3, #32]
 8003206:	e015      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d107      	bne.n	8003220 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 8003210:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003214:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800321e:	e009      	b.n	8003234 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	667b      	str	r3, [r7, #100]	; 0x64
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	785b      	ldrb	r3, [r3, #1]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d155      	bne.n	80032ee <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003256:	4413      	add	r3, r2
 8003258:	65fb      	str	r3, [r7, #92]	; 0x5c
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	00da      	lsls	r2, r3, #3
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003262:	4413      	add	r3, r2
 8003264:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003268:	65bb      	str	r3, [r7, #88]	; 0x58
 800326a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800326c:	2b00      	cmp	r3, #0
 800326e:	d112      	bne.n	8003296 <HAL_PCD_EP_DB_Transmit+0x6a4>
 8003270:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	b29b      	uxth	r3, r3
 8003276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800327a:	b29a      	uxth	r2, r3
 800327c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800327e:	801a      	strh	r2, [r3, #0]
 8003280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328e:	b29a      	uxth	r2, r3
 8003290:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003292:	801a      	strh	r2, [r3, #0]
 8003294:	e044      	b.n	8003320 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003298:	2b3e      	cmp	r3, #62	; 0x3e
 800329a:	d811      	bhi.n	80032c0 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800329c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	657b      	str	r3, [r7, #84]	; 0x54
 80032a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032a4:	f003 0301 	and.w	r3, r3, #1
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_PCD_EP_DB_Transmit+0x6c0>
 80032ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ae:	3301      	adds	r3, #1
 80032b0:	657b      	str	r3, [r7, #84]	; 0x54
 80032b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	029b      	lsls	r3, r3, #10
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032bc:	801a      	strh	r2, [r3, #0]
 80032be:	e02f      	b.n	8003320 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	657b      	str	r3, [r7, #84]	; 0x54
 80032c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x6e4>
 80032d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d2:	3b01      	subs	r3, #1
 80032d4:	657b      	str	r3, [r7, #84]	; 0x54
 80032d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d8:	b29b      	uxth	r3, r3
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	b29b      	uxth	r3, r3
 80032de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	e018      	b.n	8003320 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	785b      	ldrb	r3, [r3, #1]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d114      	bne.n	8003320 <HAL_PCD_EP_DB_Transmit+0x72e>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032fe:	b29b      	uxth	r3, r3
 8003300:	461a      	mov	r2, r3
 8003302:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003304:	4413      	add	r3, r2
 8003306:	667b      	str	r3, [r7, #100]	; 0x64
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	00da      	lsls	r2, r3, #3
 800330e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003310:	4413      	add	r3, r2
 8003312:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003316:	663b      	str	r3, [r7, #96]	; 0x60
 8003318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800331a:	b29a      	uxth	r2, r3
 800331c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800331e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6818      	ldr	r0, [r3, #0]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	6959      	ldr	r1, [r3, #20]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	895a      	ldrh	r2, [r3, #10]
 800332c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800332e:	b29b      	uxth	r3, r3
 8003330:	f004 fd34 	bl	8007d9c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	b29b      	uxth	r3, r3
 8003346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800334a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334e:	823b      	strh	r3, [r7, #16]
 8003350:	8a3b      	ldrh	r3, [r7, #16]
 8003352:	f083 0310 	eor.w	r3, r3, #16
 8003356:	823b      	strh	r3, [r7, #16]
 8003358:	8a3b      	ldrh	r3, [r7, #16]
 800335a:	f083 0320 	eor.w	r3, r3, #32
 800335e:	823b      	strh	r3, [r7, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	441a      	add	r2, r3
 800336e:	8a3b      	ldrh	r3, [r7, #16]
 8003370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003380:	b29b      	uxth	r3, r3
 8003382:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3788      	adds	r7, #136	; 0x88
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800338e:	b480      	push	{r7}
 8003390:	b087      	sub	sp, #28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	817b      	strh	r3, [r7, #10]
 800339c:	4613      	mov	r3, r2
 800339e:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80033a0:	897b      	ldrh	r3, [r7, #10]
 80033a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033ac:	897b      	ldrh	r3, [r7, #10]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	4613      	mov	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	4413      	add	r3, r2
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	68fa      	ldr	r2, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e009      	b.n	80033d8 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033c4:	897a      	ldrh	r2, [r7, #10]
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4413      	add	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d107      	bne.n	80033ee <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2200      	movs	r2, #0
 80033e2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	80da      	strh	r2, [r3, #6]
 80033ec:	e00b      	b.n	8003406 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2201      	movs	r2, #1
 80033f2:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	0c1b      	lsrs	r3, r3, #16
 8003400:	b29a      	uxth	r2, r3
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003438:	b29b      	uxth	r3, r3
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	b29a      	uxth	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800344c:	b29b      	uxth	r3, r3
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d141      	bne.n	80034fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d131      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003484:	4b47      	ldr	r3, [pc, #284]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800348a:	4a46      	ldr	r2, [pc, #280]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003490:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003494:	4b43      	ldr	r3, [pc, #268]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800349c:	4a41      	ldr	r2, [pc, #260]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034a4:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2232      	movs	r2, #50	; 0x32
 80034aa:	fb02 f303 	mul.w	r3, r2, r3
 80034ae:	4a3f      	ldr	r2, [pc, #252]	; (80035ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	0c9b      	lsrs	r3, r3, #18
 80034b6:	3301      	adds	r3, #1
 80034b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ba:	e002      	b.n	80034c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3b01      	subs	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034c2:	4b38      	ldr	r3, [pc, #224]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ce:	d102      	bne.n	80034d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f2      	bne.n	80034bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034d6:	4b33      	ldr	r3, [pc, #204]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d158      	bne.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e057      	b.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034e8:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ee:	4a2d      	ldr	r2, [pc, #180]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034f8:	e04d      	b.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003500:	d141      	bne.n	8003586 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003502:	4b28      	ldr	r3, [pc, #160]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350e:	d131      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003510:	4b24      	ldr	r3, [pc, #144]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003512:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003516:	4a23      	ldr	r2, [pc, #140]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003528:	4a1e      	ldr	r2, [pc, #120]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800352e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003530:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2232      	movs	r2, #50	; 0x32
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	0c9b      	lsrs	r3, r3, #18
 8003542:	3301      	adds	r3, #1
 8003544:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003546:	e002      	b.n	800354e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	3b01      	subs	r3, #1
 800354c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354e:	4b15      	ldr	r3, [pc, #84]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800355a:	d102      	bne.n	8003562 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f2      	bne.n	8003548 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800356e:	d112      	bne.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e011      	b.n	8003598 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003574:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003584:	e007      	b.n	8003596 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003586:	4b07      	ldr	r3, [pc, #28]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800358e:	4a05      	ldr	r2, [pc, #20]	; (80035a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003590:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003594:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr
 80035a4:	40007000 	.word	0x40007000
 80035a8:	2000004c 	.word	0x2000004c
 80035ac:	431bde83 	.word	0x431bde83

080035b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035b4:	4b05      	ldr	r3, [pc, #20]	; (80035cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	4a04      	ldr	r2, [pc, #16]	; (80035cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035be:	6093      	str	r3, [r2, #8]
}
 80035c0:	bf00      	nop
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40007000 	.word	0x40007000

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b088      	sub	sp, #32
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e308      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d075      	beq.n	80036da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ee:	4ba3      	ldr	r3, [pc, #652]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035f8:	4ba0      	ldr	r3, [pc, #640]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80035fa:	68db      	ldr	r3, [r3, #12]
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	d102      	bne.n	800360e <HAL_RCC_OscConfig+0x3e>
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	2b03      	cmp	r3, #3
 800360c:	d002      	beq.n	8003614 <HAL_RCC_OscConfig+0x44>
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	2b08      	cmp	r3, #8
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b99      	ldr	r3, [pc, #612]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05b      	beq.n	80036d8 <HAL_RCC_OscConfig+0x108>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d157      	bne.n	80036d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e2e3      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x74>
 8003636:	4b91      	ldr	r3, [pc, #580]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a90      	ldr	r2, [pc, #576]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x98>
 800364e:	4b8b      	ldr	r3, [pc, #556]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a8a      	ldr	r2, [pc, #552]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b88      	ldr	r3, [pc, #544]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a87      	ldr	r2, [pc, #540]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003668:	4b84      	ldr	r3, [pc, #528]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a83      	ldr	r2, [pc, #524]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b81      	ldr	r3, [pc, #516]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a80      	ldr	r2, [pc, #512]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fd fe5e 	bl	8001348 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003690:	f7fd fe5a 	bl	8001348 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e2a8      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a2:	4b76      	ldr	r3, [pc, #472]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xc0>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b0:	f7fd fe4a 	bl	8001348 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fd fe46 	bl	8001348 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e294      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ca:	4b6c      	ldr	r3, [pc, #432]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0xe8>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d075      	beq.n	80037d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036e6:	4b65      	ldr	r3, [pc, #404]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036f0:	4b62      	ldr	r3, [pc, #392]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0303 	and.w	r3, r3, #3
 80036f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	2b0c      	cmp	r3, #12
 80036fe:	d102      	bne.n	8003706 <HAL_RCC_OscConfig+0x136>
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b02      	cmp	r3, #2
 8003704:	d002      	beq.n	800370c <HAL_RCC_OscConfig+0x13c>
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	2b04      	cmp	r3, #4
 800370a:	d11f      	bne.n	800374c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800370c:	4b5b      	ldr	r3, [pc, #364]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_OscConfig+0x154>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e267      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003724:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	061b      	lsls	r3, r3, #24
 8003732:	4952      	ldr	r1, [pc, #328]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003734:	4313      	orrs	r3, r2
 8003736:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003738:	4b51      	ldr	r3, [pc, #324]	; (8003880 <HAL_RCC_OscConfig+0x2b0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4618      	mov	r0, r3
 800373e:	f7fd fdb7 	bl	80012b0 <HAL_InitTick>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d043      	beq.n	80037d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e253      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d023      	beq.n	800379c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b49      	ldr	r3, [pc, #292]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a48      	ldr	r2, [pc, #288]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800375a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800375e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd fdf2 	bl	8001348 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003768:	f7fd fdee 	bl	8001348 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e23c      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800377a:	4b40      	ldr	r3, [pc, #256]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003786:	4b3d      	ldr	r3, [pc, #244]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	061b      	lsls	r3, r3, #24
 8003794:	4939      	ldr	r1, [pc, #228]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003796:	4313      	orrs	r3, r2
 8003798:	604b      	str	r3, [r1, #4]
 800379a:	e01a      	b.n	80037d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800379c:	4b37      	ldr	r3, [pc, #220]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a36      	ldr	r2, [pc, #216]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037a8:	f7fd fdce 	bl	8001348 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b0:	f7fd fdca 	bl	8001348 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e218      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x1e0>
 80037ce:	e000      	b.n	80037d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0308 	and.w	r3, r3, #8
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d03c      	beq.n	8003858 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01c      	beq.n	8003820 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037e6:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80037e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ec:	4a23      	ldr	r2, [pc, #140]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 80037ee:	f043 0301 	orr.w	r3, r3, #1
 80037f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd fda7 	bl	8001348 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037fc:	e008      	b.n	8003810 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fd fda3 	bl	8001348 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d901      	bls.n	8003810 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e1f1      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003810:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ef      	beq.n	80037fe <HAL_RCC_OscConfig+0x22e>
 800381e:	e01b      	b.n	8003858 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003820:	4b16      	ldr	r3, [pc, #88]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003826:	4a15      	ldr	r2, [pc, #84]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003830:	f7fd fd8a 	bl	8001348 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003838:	f7fd fd86 	bl	8001348 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e1d4      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800384a:	4b0c      	ldr	r3, [pc, #48]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800384c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0304 	and.w	r3, r3, #4
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80ab 	beq.w	80039bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003866:	2300      	movs	r3, #0
 8003868:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800386a:	4b04      	ldr	r3, [pc, #16]	; (800387c <HAL_RCC_OscConfig+0x2ac>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d106      	bne.n	8003884 <HAL_RCC_OscConfig+0x2b4>
 8003876:	2301      	movs	r3, #1
 8003878:	e005      	b.n	8003886 <HAL_RCC_OscConfig+0x2b6>
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000
 8003880:	20000050 	.word	0x20000050
 8003884:	2300      	movs	r3, #0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00d      	beq.n	80038a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800388a:	4baf      	ldr	r3, [pc, #700]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	4aae      	ldr	r2, [pc, #696]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003894:	6593      	str	r3, [r2, #88]	; 0x58
 8003896:	4bac      	ldr	r3, [pc, #688]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800389a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038a2:	2301      	movs	r3, #1
 80038a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038a6:	4ba9      	ldr	r3, [pc, #676]	; (8003b4c <HAL_RCC_OscConfig+0x57c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d118      	bne.n	80038e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038b2:	4ba6      	ldr	r3, [pc, #664]	; (8003b4c <HAL_RCC_OscConfig+0x57c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4aa5      	ldr	r2, [pc, #660]	; (8003b4c <HAL_RCC_OscConfig+0x57c>)
 80038b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038be:	f7fd fd43 	bl	8001348 <HAL_GetTick>
 80038c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038c4:	e008      	b.n	80038d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038c6:	f7fd fd3f 	bl	8001348 <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d901      	bls.n	80038d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e18d      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d8:	4b9c      	ldr	r3, [pc, #624]	; (8003b4c <HAL_RCC_OscConfig+0x57c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d0f0      	beq.n	80038c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d108      	bne.n	80038fe <HAL_RCC_OscConfig+0x32e>
 80038ec:	4b96      	ldr	r3, [pc, #600]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	4a95      	ldr	r2, [pc, #596]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038fc:	e024      	b.n	8003948 <HAL_RCC_OscConfig+0x378>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b05      	cmp	r3, #5
 8003904:	d110      	bne.n	8003928 <HAL_RCC_OscConfig+0x358>
 8003906:	4b90      	ldr	r3, [pc, #576]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	4a8e      	ldr	r2, [pc, #568]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 800390e:	f043 0304 	orr.w	r3, r3, #4
 8003912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003916:	4b8c      	ldr	r3, [pc, #560]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391c:	4a8a      	ldr	r2, [pc, #552]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 800391e:	f043 0301 	orr.w	r3, r3, #1
 8003922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003926:	e00f      	b.n	8003948 <HAL_RCC_OscConfig+0x378>
 8003928:	4b87      	ldr	r3, [pc, #540]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 800392a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392e:	4a86      	ldr	r2, [pc, #536]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003930:	f023 0301 	bic.w	r3, r3, #1
 8003934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003938:	4b83      	ldr	r3, [pc, #524]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 800393a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800393e:	4a82      	ldr	r2, [pc, #520]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003940:	f023 0304 	bic.w	r3, r3, #4
 8003944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d016      	beq.n	800397e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003950:	f7fd fcfa 	bl	8001348 <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003956:	e00a      	b.n	800396e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003958:	f7fd fcf6 	bl	8001348 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	f241 3288 	movw	r2, #5000	; 0x1388
 8003966:	4293      	cmp	r3, r2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e142      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800396e:	4b76      	ldr	r3, [pc, #472]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d0ed      	beq.n	8003958 <HAL_RCC_OscConfig+0x388>
 800397c:	e015      	b.n	80039aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397e:	f7fd fce3 	bl	8001348 <HAL_GetTick>
 8003982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003984:	e00a      	b.n	800399c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fd fcdf 	bl	8001348 <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	f241 3288 	movw	r2, #5000	; 0x1388
 8003994:	4293      	cmp	r3, r2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e12b      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800399c:	4b6a      	ldr	r3, [pc, #424]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 800399e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a2:	f003 0302 	and.w	r3, r3, #2
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1ed      	bne.n	8003986 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d105      	bne.n	80039bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039b0:	4b65      	ldr	r3, [pc, #404]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b4:	4a64      	ldr	r2, [pc, #400]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80039b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d03c      	beq.n	8003a42 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01c      	beq.n	8003a0a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039d0:	4b5d      	ldr	r3, [pc, #372]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80039d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d6:	4a5c      	ldr	r2, [pc, #368]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fd fcb2 	bl	8001348 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039e8:	f7fd fcae 	bl	8001348 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e0fc      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039fa:	4b53      	ldr	r3, [pc, #332]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 80039fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ef      	beq.n	80039e8 <HAL_RCC_OscConfig+0x418>
 8003a08:	e01b      	b.n	8003a42 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a0a:	4b4f      	ldr	r3, [pc, #316]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a10:	4a4d      	ldr	r2, [pc, #308]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a12:	f023 0301 	bic.w	r3, r3, #1
 8003a16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a1a:	f7fd fc95 	bl	8001348 <HAL_GetTick>
 8003a1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a20:	e008      	b.n	8003a34 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a22:	f7fd fc91 	bl	8001348 <HAL_GetTick>
 8003a26:	4602      	mov	r2, r0
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	2b02      	cmp	r3, #2
 8003a2e:	d901      	bls.n	8003a34 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a30:	2303      	movs	r3, #3
 8003a32:	e0df      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a34:	4b44      	ldr	r3, [pc, #272]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1ef      	bne.n	8003a22 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80d3 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a4c:	4b3e      	ldr	r3, [pc, #248]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b0c      	cmp	r3, #12
 8003a56:	f000 808d 	beq.w	8003b74 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d15a      	bne.n	8003b18 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a62:	4b39      	ldr	r3, [pc, #228]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6e:	f7fd fc6b 	bl	8001348 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a74:	e008      	b.n	8003a88 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a76:	f7fd fc67 	bl	8001348 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d901      	bls.n	8003a88 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8003a84:	2303      	movs	r3, #3
 8003a86:	e0b5      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a88:	4b2f      	ldr	r3, [pc, #188]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f0      	bne.n	8003a76 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_RCC_OscConfig+0x580>)
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6a11      	ldr	r1, [r2, #32]
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003aa4:	3a01      	subs	r2, #1
 8003aa6:	0112      	lsls	r2, r2, #4
 8003aa8:	4311      	orrs	r1, r2
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003aae:	0212      	lsls	r2, r2, #8
 8003ab0:	4311      	orrs	r1, r2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003ab6:	0852      	lsrs	r2, r2, #1
 8003ab8:	3a01      	subs	r2, #1
 8003aba:	0552      	lsls	r2, r2, #21
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ac2:	0852      	lsrs	r2, r2, #1
 8003ac4:	3a01      	subs	r2, #1
 8003ac6:	0652      	lsls	r2, r2, #25
 8003ac8:	4311      	orrs	r1, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ace:	06d2      	lsls	r2, r2, #27
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	491d      	ldr	r1, [pc, #116]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ad8:	4b1b      	ldr	r3, [pc, #108]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a1a      	ldr	r2, [pc, #104]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003ade:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ae2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ae4:	4b18      	ldr	r3, [pc, #96]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003aea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003aee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af0:	f7fd fc2a 	bl	8001348 <HAL_GetTick>
 8003af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003af6:	e008      	b.n	8003b0a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003af8:	f7fd fc26 	bl	8001348 <HAL_GetTick>
 8003afc:	4602      	mov	r2, r0
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e074      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0f0      	beq.n	8003af8 <HAL_RCC_OscConfig+0x528>
 8003b16:	e06c      	b.n	8003bf2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b18:	4b0b      	ldr	r3, [pc, #44]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4a04      	ldr	r2, [pc, #16]	; (8003b48 <HAL_RCC_OscConfig+0x578>)
 8003b36:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b40:	f7fd fc02 	bl	8001348 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b46:	e00e      	b.n	8003b66 <HAL_RCC_OscConfig+0x596>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b54:	f7fd fbf8 	bl	8001348 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e046      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b66:	4b25      	ldr	r3, [pc, #148]	; (8003bfc <HAL_RCC_OscConfig+0x62c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d1f0      	bne.n	8003b54 <HAL_RCC_OscConfig+0x584>
 8003b72:	e03e      	b.n	8003bf2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e039      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003b80:	4b1e      	ldr	r3, [pc, #120]	; (8003bfc <HAL_RCC_OscConfig+0x62c>)
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f003 0203 	and.w	r2, r3, #3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d12c      	bne.n	8003bee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d123      	bne.n	8003bee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d11b      	bne.n	8003bee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d113      	bne.n	8003bee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd0:	085b      	lsrs	r3, r3, #1
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d109      	bne.n	8003bee <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003be4:	085b      	lsrs	r3, r3, #1
 8003be6:	3b01      	subs	r3, #1
 8003be8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d001      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	40021000 	.word	0x40021000

08003c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e11e      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b91      	ldr	r3, [pc, #580]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d910      	bls.n	8003c48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b8e      	ldr	r3, [pc, #568]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f023 020f 	bic.w	r2, r3, #15
 8003c2e:	498c      	ldr	r1, [pc, #560]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c36:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d001      	beq.n	8003c48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e106      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d073      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b03      	cmp	r3, #3
 8003c5a:	d129      	bne.n	8003cb0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c5c:	4b81      	ldr	r3, [pc, #516]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d101      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0f4      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c6c:	f000 f966 	bl	8003f3c <RCC_GetSysClockFreqFromPLLSource>
 8003c70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	4a7c      	ldr	r2, [pc, #496]	; (8003e68 <HAL_RCC_ClockConfig+0x268>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d93f      	bls.n	8003cfa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c7a:	4b7a      	ldr	r3, [pc, #488]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d009      	beq.n	8003c9a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d033      	beq.n	8003cfa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d12f      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003c9a:	4b72      	ldr	r3, [pc, #456]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ca2:	4a70      	ldr	r2, [pc, #448]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003caa:	2380      	movs	r3, #128	; 0x80
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e024      	b.n	8003cfa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d107      	bne.n	8003cc8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb8:	4b6a      	ldr	r3, [pc, #424]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d109      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e0c6      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc8:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d101      	bne.n	8003cd8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0be      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003cd8:	f000 f8ce 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003cdc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <HAL_RCC_ClockConfig+0x268>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d909      	bls.n	8003cfa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ce6:	4b5f      	ldr	r3, [pc, #380]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cee:	4a5d      	ldr	r2, [pc, #372]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003cf6:	2380      	movs	r3, #128	; 0x80
 8003cf8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b5a      	ldr	r3, [pc, #360]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4957      	ldr	r1, [pc, #348]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fb1c 	bl	8001348 <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fb18 	bl	8001348 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e095      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b4e      	ldr	r3, [pc, #312]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d023      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d54:	4b43      	ldr	r3, [pc, #268]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a42      	ldr	r2, [pc, #264]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d5e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d6c:	4b3d      	ldr	r3, [pc, #244]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d74:	4a3b      	ldr	r2, [pc, #236]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d76:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d7a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d7c:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	4936      	ldr	r1, [pc, #216]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	608b      	str	r3, [r1, #8]
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d105      	bne.n	8003da2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003d96:	4b33      	ldr	r3, [pc, #204]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	4a32      	ldr	r2, [pc, #200]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003d9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003da2:	4b2f      	ldr	r3, [pc, #188]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d21d      	bcs.n	8003dec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db0:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f023 020f 	bic.w	r2, r3, #15
 8003db8:	4929      	ldr	r1, [pc, #164]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dc0:	f7fd fac2 	bl	8001348 <HAL_GetTick>
 8003dc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dc6:	e00a      	b.n	8003dde <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dc8:	f7fd fabe 	bl	8001348 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e03b      	b.n	8003e56 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b20      	ldr	r3, [pc, #128]	; (8003e60 <HAL_RCC_ClockConfig+0x260>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 030f 	and.w	r3, r3, #15
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d1ed      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b1a      	ldr	r3, [pc, #104]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	4917      	ldr	r1, [pc, #92]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d009      	beq.n	8003e2a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e16:	4b13      	ldr	r3, [pc, #76]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	490f      	ldr	r1, [pc, #60]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e2a:	f000 f825 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <HAL_RCC_ClockConfig+0x264>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	091b      	lsrs	r3, r3, #4
 8003e36:	f003 030f 	and.w	r3, r3, #15
 8003e3a:	490c      	ldr	r1, [pc, #48]	; (8003e6c <HAL_RCC_ClockConfig+0x26c>)
 8003e3c:	5ccb      	ldrb	r3, [r1, r3]
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	fa22 f303 	lsr.w	r3, r2, r3
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_RCC_ClockConfig+0x270>)
 8003e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	; (8003e74 <HAL_RCC_ClockConfig+0x274>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fd fa2e 	bl	80012b0 <HAL_InitTick>
 8003e54:	4603      	mov	r3, r0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	40022000 	.word	0x40022000
 8003e64:	40021000 	.word	0x40021000
 8003e68:	04c4b400 	.word	0x04c4b400
 8003e6c:	0800a20c 	.word	0x0800a20c
 8003e70:	2000004c 	.word	0x2000004c
 8003e74:	20000050 	.word	0x20000050

08003e78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d102      	bne.n	8003e90 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e8a:	4b2a      	ldr	r3, [pc, #168]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e047      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e90:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d102      	bne.n	8003ea2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e9c:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e03e      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ea2:	4b23      	ldr	r3, [pc, #140]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 030c 	and.w	r3, r3, #12
 8003eaa:	2b0c      	cmp	r3, #12
 8003eac:	d136      	bne.n	8003f1c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003eb8:	4b1d      	ldr	r3, [pc, #116]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b03      	cmp	r3, #3
 8003eca:	d10c      	bne.n	8003ee6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ecc:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	4a16      	ldr	r2, [pc, #88]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed6:	68d2      	ldr	r2, [r2, #12]
 8003ed8:	0a12      	lsrs	r2, r2, #8
 8003eda:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ede:	fb02 f303 	mul.w	r3, r2, r3
 8003ee2:	617b      	str	r3, [r7, #20]
      break;
 8003ee4:	e00c      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ee6:	4a13      	ldr	r2, [pc, #76]	; (8003f34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef0:	68d2      	ldr	r2, [r2, #12]
 8003ef2:	0a12      	lsrs	r2, r2, #8
 8003ef4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	617b      	str	r3, [r7, #20]
      break;
 8003efe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f00:	4b0b      	ldr	r3, [pc, #44]	; (8003f30 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	0e5b      	lsrs	r3, r3, #25
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	e001      	b.n	8003f20 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f20:	693b      	ldr	r3, [r7, #16]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40021000 	.word	0x40021000
 8003f34:	00f42400 	.word	0x00f42400
 8003f38:	007a1200 	.word	0x007a1200

08003f3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	f003 0303 	and.w	r3, r3, #3
 8003f4a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	3301      	adds	r3, #1
 8003f58:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b03      	cmp	r3, #3
 8003f5e:	d10c      	bne.n	8003f7a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f60:	4a17      	ldr	r2, [pc, #92]	; (8003fc0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	4a14      	ldr	r2, [pc, #80]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f6a:	68d2      	ldr	r2, [r2, #12]
 8003f6c:	0a12      	lsrs	r2, r2, #8
 8003f6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f72:	fb02 f303 	mul.w	r3, r2, r3
 8003f76:	617b      	str	r3, [r7, #20]
    break;
 8003f78:	e00c      	b.n	8003f94 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f7a:	4a12      	ldr	r2, [pc, #72]	; (8003fc4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f84:	68d2      	ldr	r2, [r2, #12]
 8003f86:	0a12      	lsrs	r2, r2, #8
 8003f88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f8c:	fb02 f303 	mul.w	r3, r2, r3
 8003f90:	617b      	str	r3, [r7, #20]
    break;
 8003f92:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	0e5b      	lsrs	r3, r3, #25
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003fae:	687b      	ldr	r3, [r7, #4]
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	371c      	adds	r7, #28
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	007a1200 	.word	0x007a1200
 8003fc4:	00f42400 	.word	0x00f42400

08003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8098 	beq.w	8004116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fea:	4b43      	ldr	r3, [pc, #268]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ff6:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ffa:	4a3f      	ldr	r2, [pc, #252]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ffc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004000:	6593      	str	r3, [r2, #88]	; 0x58
 8004002:	4b3d      	ldr	r3, [pc, #244]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	60bb      	str	r3, [r7, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800400e:	2301      	movs	r3, #1
 8004010:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004012:	4b3a      	ldr	r3, [pc, #232]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a39      	ldr	r2, [pc, #228]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800401e:	f7fd f993 	bl	8001348 <HAL_GetTick>
 8004022:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004024:	e009      	b.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fd f98f 	bl	8001348 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d902      	bls.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	74fb      	strb	r3, [r7, #19]
        break;
 8004038:	e005      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800403a:	4b30      	ldr	r3, [pc, #192]	; (80040fc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0ef      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d159      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800404c:	4b2a      	ldr	r3, [pc, #168]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004056:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d01e      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	429a      	cmp	r2, r3
 8004066:	d019      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004068:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004072:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004074:	4b20      	ldr	r3, [pc, #128]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407a:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004084:	4b1c      	ldr	r3, [pc, #112]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408a:	4a1b      	ldr	r2, [pc, #108]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800408c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004094:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a6:	f7fd f94f 	bl	8001348 <HAL_GetTick>
 80040aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ac:	e00b      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ae:	f7fd f94b 	bl	8001348 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040bc:	4293      	cmp	r3, r2
 80040be:	d902      	bls.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	74fb      	strb	r3, [r7, #19]
            break;
 80040c4:	e006      	b.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040c6:	4b0c      	ldr	r3, [pc, #48]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d0ec      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040d4:	7cfb      	ldrb	r3, [r7, #19]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d10b      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	4903      	ldr	r1, [pc, #12]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040f0:	e008      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	74bb      	strb	r3, [r7, #18]
 80040f6:	e005      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040f8:	40021000 	.word	0x40021000
 80040fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	7cfb      	ldrb	r3, [r7, #19]
 8004102:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004104:	7c7b      	ldrb	r3, [r7, #17]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410a:	4ba6      	ldr	r3, [pc, #664]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	4aa5      	ldr	r2, [pc, #660]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004114:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004122:	4ba0      	ldr	r3, [pc, #640]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004128:	f023 0203 	bic.w	r2, r3, #3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	499c      	ldr	r1, [pc, #624]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004144:	4b97      	ldr	r3, [pc, #604]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414a:	f023 020c 	bic.w	r2, r3, #12
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4994      	ldr	r1, [pc, #592]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004154:	4313      	orrs	r3, r2
 8004156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004166:	4b8f      	ldr	r3, [pc, #572]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	498b      	ldr	r1, [pc, #556]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004176:	4313      	orrs	r3, r2
 8004178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0308 	and.w	r3, r3, #8
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004188:	4b86      	ldr	r3, [pc, #536]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	4983      	ldr	r1, [pc, #524]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004198:	4313      	orrs	r3, r2
 800419a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041aa:	4b7e      	ldr	r3, [pc, #504]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	497a      	ldr	r1, [pc, #488]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041cc:	4b75      	ldr	r3, [pc, #468]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	4972      	ldr	r1, [pc, #456]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041dc:	4313      	orrs	r3, r2
 80041de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041ee:	4b6d      	ldr	r3, [pc, #436]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69db      	ldr	r3, [r3, #28]
 80041fc:	4969      	ldr	r1, [pc, #420]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004210:	4b64      	ldr	r3, [pc, #400]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004216:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4961      	ldr	r1, [pc, #388]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004232:	4b5c      	ldr	r3, [pc, #368]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	4958      	ldr	r1, [pc, #352]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004250:	2b00      	cmp	r3, #0
 8004252:	d015      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004254:	4b53      	ldr	r3, [pc, #332]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	4950      	ldr	r1, [pc, #320]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004272:	d105      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004274:	4b4b      	ldr	r3, [pc, #300]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	4a4a      	ldr	r2, [pc, #296]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800427e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004288:	2b00      	cmp	r3, #0
 800428a:	d015      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800428c:	4b45      	ldr	r3, [pc, #276]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004292:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429a:	4942      	ldr	r1, [pc, #264]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042aa:	d105      	bne.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042ac:	4b3d      	ldr	r3, [pc, #244]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4a3c      	ldr	r2, [pc, #240]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d015      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042c4:	4b37      	ldr	r3, [pc, #220]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d2:	4934      	ldr	r1, [pc, #208]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042e2:	d105      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e4:	4b2f      	ldr	r3, [pc, #188]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	4a2e      	ldr	r2, [pc, #184]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042fc:	4b29      	ldr	r3, [pc, #164]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430a:	4926      	ldr	r1, [pc, #152]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800430c:	4313      	orrs	r3, r2
 800430e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800431a:	d105      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800431c:	4b21      	ldr	r3, [pc, #132]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4a20      	ldr	r2, [pc, #128]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004326:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004342:	4918      	ldr	r1, [pc, #96]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a12      	ldr	r2, [pc, #72]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800438c:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a04      	ldr	r2, [pc, #16]	; (80043a4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004392:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004396:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004398:	7cbb      	ldrb	r3, [r7, #18]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	40021000 	.word	0x40021000

080043a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e049      	b.n	800444e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fc fe14 	bl	8000ffc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 fde4 	bl	8004fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800444c:	2300      	movs	r3, #0
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
	...

08004458 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d001      	beq.n	8004470 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e04a      	b.n	8004506 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0201 	orr.w	r2, r2, #1
 8004486:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a21      	ldr	r2, [pc, #132]	; (8004514 <HAL_TIM_Base_Start_IT+0xbc>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d018      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d013      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <HAL_TIM_Base_Start_IT+0xc0>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d00e      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <HAL_TIM_Base_Start_IT+0xc4>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d009      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a1a      	ldr	r2, [pc, #104]	; (8004520 <HAL_TIM_Base_Start_IT+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d004      	beq.n	80044c4 <HAL_TIM_Base_Start_IT+0x6c>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_TIM_Base_Start_IT+0xcc>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d115      	bne.n	80044f0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	4b17      	ldr	r3, [pc, #92]	; (8004528 <HAL_TIM_Base_Start_IT+0xd0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d015      	beq.n	8004502 <HAL_TIM_Base_Start_IT+0xaa>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044dc:	d011      	beq.n	8004502 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f042 0201 	orr.w	r2, r2, #1
 80044ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ee:	e008      	b.n	8004502 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
 8004500:	e000      	b.n	8004504 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004502:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	4618      	mov	r0, r3
 8004508:	3714      	adds	r7, #20
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop
 8004514:	40012c00 	.word	0x40012c00
 8004518:	40000400 	.word	0x40000400
 800451c:	40000800 	.word	0x40000800
 8004520:	40013400 	.word	0x40013400
 8004524:	40014000 	.word	0x40014000
 8004528:	00010007 	.word	0x00010007

0800452c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e049      	b.n	80045d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004544:	b2db      	uxtb	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d106      	bne.n	8004558 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f7fc fd18 	bl	8000f88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3304      	adds	r3, #4
 8004568:	4619      	mov	r1, r3
 800456a:	4610      	mov	r0, r2
 800456c:	f000 fd22 	bl	8004fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2201      	movs	r2, #1
 80045c4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3708      	adds	r7, #8
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_TIM_PWM_Start+0x24>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	bf14      	ite	ne
 80045f8:	2301      	movne	r3, #1
 80045fa:	2300      	moveq	r3, #0
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e03c      	b.n	800467a <HAL_TIM_PWM_Start+0x9e>
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d109      	bne.n	800461a <HAL_TIM_PWM_Start+0x3e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b01      	cmp	r3, #1
 8004610:	bf14      	ite	ne
 8004612:	2301      	movne	r3, #1
 8004614:	2300      	moveq	r3, #0
 8004616:	b2db      	uxtb	r3, r3
 8004618:	e02f      	b.n	800467a <HAL_TIM_PWM_Start+0x9e>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b08      	cmp	r3, #8
 800461e:	d109      	bne.n	8004634 <HAL_TIM_PWM_Start+0x58>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b01      	cmp	r3, #1
 800462a:	bf14      	ite	ne
 800462c:	2301      	movne	r3, #1
 800462e:	2300      	moveq	r3, #0
 8004630:	b2db      	uxtb	r3, r3
 8004632:	e022      	b.n	800467a <HAL_TIM_PWM_Start+0x9e>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b0c      	cmp	r3, #12
 8004638:	d109      	bne.n	800464e <HAL_TIM_PWM_Start+0x72>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	e015      	b.n	800467a <HAL_TIM_PWM_Start+0x9e>
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	2b10      	cmp	r3, #16
 8004652:	d109      	bne.n	8004668 <HAL_TIM_PWM_Start+0x8c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b01      	cmp	r3, #1
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	b2db      	uxtb	r3, r3
 8004666:	e008      	b.n	800467a <HAL_TIM_PWM_Start+0x9e>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b01      	cmp	r3, #1
 8004672:	bf14      	ite	ne
 8004674:	2301      	movne	r3, #1
 8004676:	2300      	moveq	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d001      	beq.n	8004682 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e097      	b.n	80047b2 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d104      	bne.n	8004692 <HAL_TIM_PWM_Start+0xb6>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004690:	e023      	b.n	80046da <HAL_TIM_PWM_Start+0xfe>
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2b04      	cmp	r3, #4
 8004696:	d104      	bne.n	80046a2 <HAL_TIM_PWM_Start+0xc6>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a0:	e01b      	b.n	80046da <HAL_TIM_PWM_Start+0xfe>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d104      	bne.n	80046b2 <HAL_TIM_PWM_Start+0xd6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2202      	movs	r2, #2
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b0:	e013      	b.n	80046da <HAL_TIM_PWM_Start+0xfe>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b0c      	cmp	r3, #12
 80046b6:	d104      	bne.n	80046c2 <HAL_TIM_PWM_Start+0xe6>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046c0:	e00b      	b.n	80046da <HAL_TIM_PWM_Start+0xfe>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d104      	bne.n	80046d2 <HAL_TIM_PWM_Start+0xf6>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d0:	e003      	b.n	80046da <HAL_TIM_PWM_Start+0xfe>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2202      	movs	r2, #2
 80046d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2201      	movs	r2, #1
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 ffec 	bl	80056c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a33      	ldr	r2, [pc, #204]	; (80047bc <HAL_TIM_PWM_Start+0x1e0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d013      	beq.n	800471a <HAL_TIM_PWM_Start+0x13e>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a32      	ldr	r2, [pc, #200]	; (80047c0 <HAL_TIM_PWM_Start+0x1e4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00e      	beq.n	800471a <HAL_TIM_PWM_Start+0x13e>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a30      	ldr	r2, [pc, #192]	; (80047c4 <HAL_TIM_PWM_Start+0x1e8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d009      	beq.n	800471a <HAL_TIM_PWM_Start+0x13e>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a2f      	ldr	r2, [pc, #188]	; (80047c8 <HAL_TIM_PWM_Start+0x1ec>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d004      	beq.n	800471a <HAL_TIM_PWM_Start+0x13e>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <HAL_TIM_PWM_Start+0x1f0>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d101      	bne.n	800471e <HAL_TIM_PWM_Start+0x142>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <HAL_TIM_PWM_Start+0x144>
 800471e:	2300      	movs	r3, #0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004732:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a20      	ldr	r2, [pc, #128]	; (80047bc <HAL_TIM_PWM_Start+0x1e0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_TIM_PWM_Start+0x194>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d013      	beq.n	8004770 <HAL_TIM_PWM_Start+0x194>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a20      	ldr	r2, [pc, #128]	; (80047d0 <HAL_TIM_PWM_Start+0x1f4>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_TIM_PWM_Start+0x194>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1f      	ldr	r2, [pc, #124]	; (80047d4 <HAL_TIM_PWM_Start+0x1f8>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_TIM_PWM_Start+0x194>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a17      	ldr	r2, [pc, #92]	; (80047c0 <HAL_TIM_PWM_Start+0x1e4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIM_PWM_Start+0x194>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a16      	ldr	r2, [pc, #88]	; (80047c4 <HAL_TIM_PWM_Start+0x1e8>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d115      	bne.n	800479c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	4b18      	ldr	r3, [pc, #96]	; (80047d8 <HAL_TIM_PWM_Start+0x1fc>)
 8004778:	4013      	ands	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b06      	cmp	r3, #6
 8004780:	d015      	beq.n	80047ae <HAL_TIM_PWM_Start+0x1d2>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004788:	d011      	beq.n	80047ae <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f042 0201 	orr.w	r2, r2, #1
 8004798:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800479a:	e008      	b.n	80047ae <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	e000      	b.n	80047b0 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40012c00 	.word	0x40012c00
 80047c0:	40013400 	.word	0x40013400
 80047c4:	40014000 	.word	0x40014000
 80047c8:	40014400 	.word	0x40014400
 80047cc:	40014800 	.word	0x40014800
 80047d0:	40000400 	.word	0x40000400
 80047d4:	40000800 	.word	0x40000800
 80047d8:	00010007 	.word	0x00010007

080047dc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b086      	sub	sp, #24
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e097      	b.n	8004920 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f7fc fb1b 	bl	8000e40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	6812      	ldr	r2, [r2, #0]
 800481c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004820:	f023 0307 	bic.w	r3, r3, #7
 8004824:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	4610      	mov	r0, r2
 8004832:	f000 fbbf 	bl	8004fb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	697a      	ldr	r2, [r7, #20]
 8004854:	4313      	orrs	r3, r2
 8004856:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800485e:	f023 0303 	bic.w	r3, r3, #3
 8004862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	4313      	orrs	r3, r2
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800487c:	f023 030c 	bic.w	r3, r3, #12
 8004880:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004888:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	021b      	lsls	r3, r3, #8
 8004898:	4313      	orrs	r3, r2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	011a      	lsls	r2, r3, #4
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	031b      	lsls	r3, r3, #12
 80048ac:	4313      	orrs	r3, r2
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80048ba:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80048c2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	011b      	lsls	r3, r3, #4
 80048ce:	4313      	orrs	r3, r2
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2201      	movs	r2, #1
 8004902:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2201      	movs	r2, #1
 8004912:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2201      	movs	r2, #1
 800491a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3718      	adds	r7, #24
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}

08004928 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004938:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004940:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004948:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004950:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d110      	bne.n	800497a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d102      	bne.n	8004964 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800495e:	7b7b      	ldrb	r3, [r7, #13]
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e069      	b.n	8004a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2202      	movs	r2, #2
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	e031      	b.n	80049de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b04      	cmp	r3, #4
 800497e:	d110      	bne.n	80049a2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004980:	7bbb      	ldrb	r3, [r7, #14]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d102      	bne.n	800498c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004986:	7b3b      	ldrb	r3, [r7, #12]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d001      	beq.n	8004990 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e055      	b.n	8004a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049a0:	e01d      	b.n	80049de <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d108      	bne.n	80049ba <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049a8:	7bbb      	ldrb	r3, [r7, #14]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049ae:	7b7b      	ldrb	r3, [r7, #13]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d102      	bne.n	80049ba <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049b4:	7b3b      	ldrb	r3, [r7, #12]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d001      	beq.n	80049be <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e03e      	b.n	8004a3c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2202      	movs	r2, #2
 80049c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2202      	movs	r2, #2
 80049ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2202      	movs	r2, #2
 80049d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_TIM_Encoder_Start+0xc4>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d008      	beq.n	80049fc <HAL_TIM_Encoder_Start+0xd4>
 80049ea:	e00f      	b.n	8004a0c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2201      	movs	r2, #1
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fe63 	bl	80056c0 <TIM_CCxChannelCmd>
      break;
 80049fa:	e016      	b.n	8004a2a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	2104      	movs	r1, #4
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fe5b 	bl	80056c0 <TIM_CCxChannelCmd>
      break;
 8004a0a:	e00e      	b.n	8004a2a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2201      	movs	r2, #1
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f000 fe53 	bl	80056c0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	2104      	movs	r1, #4
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 fe4c 	bl	80056c0 <TIM_CCxChannelCmd>
      break;
 8004a28:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b082      	sub	sp, #8
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d122      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b02      	cmp	r3, #2
 8004a66:	d11b      	bne.n	8004aa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa76 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa68 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa79 	bl	8004f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0304 	and.w	r3, r3, #4
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d122      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	f003 0304 	and.w	r3, r3, #4
 8004ab8:	2b04      	cmp	r3, #4
 8004aba:	d11b      	bne.n	8004af4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f06f 0204 	mvn.w	r2, #4
 8004ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2202      	movs	r2, #2
 8004aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa4c 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004ae0:	e005      	b.n	8004aee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fa3e 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fa4f 	bl	8004f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b08      	cmp	r3, #8
 8004b00:	d122      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0308 	and.w	r3, r3, #8
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d11b      	bne.n	8004b48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0208 	mvn.w	r2, #8
 8004b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2204      	movs	r2, #4
 8004b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	69db      	ldr	r3, [r3, #28]
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 fa22 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004b34:	e005      	b.n	8004b42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fa14 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 fa25 	bl	8004f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	f003 0310 	and.w	r3, r3, #16
 8004b52:	2b10      	cmp	r3, #16
 8004b54:	d122      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	f003 0310 	and.w	r3, r3, #16
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d11b      	bne.n	8004b9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f06f 0210 	mvn.w	r2, #16
 8004b6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2208      	movs	r2, #8
 8004b72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d003      	beq.n	8004b8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f9f8 	bl	8004f78 <HAL_TIM_IC_CaptureCallback>
 8004b88:	e005      	b.n	8004b96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f9ea 	bl	8004f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f9fb 	bl	8004f8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691b      	ldr	r3, [r3, #16]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d10e      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0201 	mvn.w	r2, #1
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fb fba4 	bl	8000310 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b80      	cmp	r3, #128	; 0x80
 8004bd4:	d10e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004be0:	2b80      	cmp	r3, #128	; 0x80
 8004be2:	d107      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 feb8 	bl	8005964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c02:	d10e      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0e:	2b80      	cmp	r3, #128	; 0x80
 8004c10:	d107      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 feab 	bl	8005978 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b40      	cmp	r3, #64	; 0x40
 8004c2e:	d10e      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c3a:	2b40      	cmp	r3, #64	; 0x40
 8004c3c:	d107      	bne.n	8004c4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f9a9 	bl	8004fa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	f003 0320 	and.w	r3, r3, #32
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d10e      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	d107      	bne.n	8004c7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f06f 0220 	mvn.w	r2, #32
 8004c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f000 fe6b 	bl	8005950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c88:	d10f      	bne.n	8004caa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c98:	d107      	bne.n	8004caa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004ca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fe71 	bl	800598c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cb8:	d10f      	bne.n	8004cda <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004cc8:	d107      	bne.n	8004cda <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fe63 	bl	80059a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce8:	d10f      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cf8:	d107      	bne.n	8004d0a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f000 fe55 	bl	80059b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d18:	d10f      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d28:	d107      	bne.n	8004d3a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fe47 	bl	80059c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e0fd      	b.n	8004f5a <HAL_TIM_PWM_ConfigChannel+0x216>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b14      	cmp	r3, #20
 8004d6a:	f200 80f0 	bhi.w	8004f4e <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004d6e:	a201      	add	r2, pc, #4	; (adr r2, 8004d74 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004dc9 	.word	0x08004dc9
 8004d78:	08004f4f 	.word	0x08004f4f
 8004d7c:	08004f4f 	.word	0x08004f4f
 8004d80:	08004f4f 	.word	0x08004f4f
 8004d84:	08004e09 	.word	0x08004e09
 8004d88:	08004f4f 	.word	0x08004f4f
 8004d8c:	08004f4f 	.word	0x08004f4f
 8004d90:	08004f4f 	.word	0x08004f4f
 8004d94:	08004e4b 	.word	0x08004e4b
 8004d98:	08004f4f 	.word	0x08004f4f
 8004d9c:	08004f4f 	.word	0x08004f4f
 8004da0:	08004f4f 	.word	0x08004f4f
 8004da4:	08004e8b 	.word	0x08004e8b
 8004da8:	08004f4f 	.word	0x08004f4f
 8004dac:	08004f4f 	.word	0x08004f4f
 8004db0:	08004f4f 	.word	0x08004f4f
 8004db4:	08004ecd 	.word	0x08004ecd
 8004db8:	08004f4f 	.word	0x08004f4f
 8004dbc:	08004f4f 	.word	0x08004f4f
 8004dc0:	08004f4f 	.word	0x08004f4f
 8004dc4:	08004f0d 	.word	0x08004f0d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f000 f980 	bl	80050d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0208 	orr.w	r2, r2, #8
 8004de2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f022 0204 	bic.w	r2, r2, #4
 8004df2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6999      	ldr	r1, [r3, #24]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	619a      	str	r2, [r3, #24]
      break;
 8004e06:	e0a3      	b.n	8004f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 f9f0 	bl	80051f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699a      	ldr	r2, [r3, #24]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6999      	ldr	r1, [r3, #24]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	021a      	lsls	r2, r3, #8
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	430a      	orrs	r2, r1
 8004e46:	619a      	str	r2, [r3, #24]
      break;
 8004e48:	e082      	b.n	8004f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68b9      	ldr	r1, [r7, #8]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 fa59 	bl	8005308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69da      	ldr	r2, [r3, #28]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0208 	orr.w	r2, r2, #8
 8004e64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0204 	bic.w	r2, r2, #4
 8004e74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69d9      	ldr	r1, [r3, #28]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	61da      	str	r2, [r3, #28]
      break;
 8004e88:	e062      	b.n	8004f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68b9      	ldr	r1, [r7, #8]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f000 fac1 	bl	8005418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	69da      	ldr	r2, [r3, #28]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69d9      	ldr	r1, [r3, #28]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	021a      	lsls	r2, r3, #8
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	61da      	str	r2, [r3, #28]
      break;
 8004eca:	e041      	b.n	8004f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb2a 	bl	800552c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f042 0208 	orr.w	r2, r2, #8
 8004ee6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f022 0204 	bic.w	r2, r2, #4
 8004ef6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691a      	ldr	r2, [r3, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f0a:	e021      	b.n	8004f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68b9      	ldr	r1, [r7, #8]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f000 fb6e 	bl	80055f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f36:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	021a      	lsls	r2, r3, #8
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f4c:	e000      	b.n	8004f50 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004f4e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop

08004f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a3c      	ldr	r2, [pc, #240]	; (80050b8 <TIM_Base_SetConfig+0x104>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00f      	beq.n	8004fec <TIM_Base_SetConfig+0x38>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd2:	d00b      	beq.n	8004fec <TIM_Base_SetConfig+0x38>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a39      	ldr	r2, [pc, #228]	; (80050bc <TIM_Base_SetConfig+0x108>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d007      	beq.n	8004fec <TIM_Base_SetConfig+0x38>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a38      	ldr	r2, [pc, #224]	; (80050c0 <TIM_Base_SetConfig+0x10c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_Base_SetConfig+0x38>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a37      	ldr	r2, [pc, #220]	; (80050c4 <TIM_Base_SetConfig+0x110>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d108      	bne.n	8004ffe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a2d      	ldr	r2, [pc, #180]	; (80050b8 <TIM_Base_SetConfig+0x104>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01b      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800500c:	d017      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <TIM_Base_SetConfig+0x108>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a29      	ldr	r2, [pc, #164]	; (80050c0 <TIM_Base_SetConfig+0x10c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a28      	ldr	r2, [pc, #160]	; (80050c4 <TIM_Base_SetConfig+0x110>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <TIM_Base_SetConfig+0x114>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a26      	ldr	r2, [pc, #152]	; (80050cc <TIM_Base_SetConfig+0x118>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a25      	ldr	r2, [pc, #148]	; (80050d0 <TIM_Base_SetConfig+0x11c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <TIM_Base_SetConfig+0x104>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00f      	beq.n	800509c <TIM_Base_SetConfig+0xe8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a11      	ldr	r2, [pc, #68]	; (80050c4 <TIM_Base_SetConfig+0x110>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00b      	beq.n	800509c <TIM_Base_SetConfig+0xe8>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <TIM_Base_SetConfig+0x114>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d007      	beq.n	800509c <TIM_Base_SetConfig+0xe8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a0f      	ldr	r2, [pc, #60]	; (80050cc <TIM_Base_SetConfig+0x118>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0xe8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a0e      	ldr	r2, [pc, #56]	; (80050d0 <TIM_Base_SetConfig+0x11c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40012c00 	.word	0x40012c00
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800

080050d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0201 	bic.w	r2, r3, #1
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0302 	bic.w	r3, r3, #2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a2c      	ldr	r2, [pc, #176]	; (80051e0 <TIM_OC1_SetConfig+0x10c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00f      	beq.n	8005154 <TIM_OC1_SetConfig+0x80>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a2b      	ldr	r2, [pc, #172]	; (80051e4 <TIM_OC1_SetConfig+0x110>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d00b      	beq.n	8005154 <TIM_OC1_SetConfig+0x80>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a2a      	ldr	r2, [pc, #168]	; (80051e8 <TIM_OC1_SetConfig+0x114>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d007      	beq.n	8005154 <TIM_OC1_SetConfig+0x80>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a29      	ldr	r2, [pc, #164]	; (80051ec <TIM_OC1_SetConfig+0x118>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d003      	beq.n	8005154 <TIM_OC1_SetConfig+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a28      	ldr	r2, [pc, #160]	; (80051f0 <TIM_OC1_SetConfig+0x11c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d10c      	bne.n	800516e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	f023 0308 	bic.w	r3, r3, #8
 800515a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f023 0304 	bic.w	r3, r3, #4
 800516c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1b      	ldr	r2, [pc, #108]	; (80051e0 <TIM_OC1_SetConfig+0x10c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00f      	beq.n	8005196 <TIM_OC1_SetConfig+0xc2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <TIM_OC1_SetConfig+0x110>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00b      	beq.n	8005196 <TIM_OC1_SetConfig+0xc2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <TIM_OC1_SetConfig+0x114>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d007      	beq.n	8005196 <TIM_OC1_SetConfig+0xc2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <TIM_OC1_SetConfig+0x118>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d003      	beq.n	8005196 <TIM_OC1_SetConfig+0xc2>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a17      	ldr	r2, [pc, #92]	; (80051f0 <TIM_OC1_SetConfig+0x11c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d111      	bne.n	80051ba <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800519c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	693a      	ldr	r2, [r7, #16]
 80051be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	621a      	str	r2, [r3, #32]
}
 80051d4:	bf00      	nop
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr
 80051e0:	40012c00 	.word	0x40012c00
 80051e4:	40013400 	.word	0x40013400
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40014400 	.word	0x40014400
 80051f0:	40014800 	.word	0x40014800

080051f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
 80051fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	f023 0210 	bic.w	r2, r3, #16
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a1b      	ldr	r3, [r3, #32]
 800520e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f023 0320 	bic.w	r3, r3, #32
 8005242:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	011b      	lsls	r3, r3, #4
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	4313      	orrs	r3, r2
 800524e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a28      	ldr	r2, [pc, #160]	; (80052f4 <TIM_OC2_SetConfig+0x100>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d003      	beq.n	8005260 <TIM_OC2_SetConfig+0x6c>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a27      	ldr	r2, [pc, #156]	; (80052f8 <TIM_OC2_SetConfig+0x104>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d10d      	bne.n	800527c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800527a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	4a1d      	ldr	r2, [pc, #116]	; (80052f4 <TIM_OC2_SetConfig+0x100>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d00f      	beq.n	80052a4 <TIM_OC2_SetConfig+0xb0>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a1c      	ldr	r2, [pc, #112]	; (80052f8 <TIM_OC2_SetConfig+0x104>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d00b      	beq.n	80052a4 <TIM_OC2_SetConfig+0xb0>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a1b      	ldr	r2, [pc, #108]	; (80052fc <TIM_OC2_SetConfig+0x108>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC2_SetConfig+0xb0>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a1a      	ldr	r2, [pc, #104]	; (8005300 <TIM_OC2_SetConfig+0x10c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC2_SetConfig+0xb0>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a19      	ldr	r2, [pc, #100]	; (8005304 <TIM_OC2_SetConfig+0x110>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d113      	bne.n	80052cc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	009b      	lsls	r3, r3, #2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685a      	ldr	r2, [r3, #4]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	621a      	str	r2, [r3, #32]
}
 80052e6:	bf00      	nop
 80052e8:	371c      	adds	r7, #28
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400
 80052fc:	40014000 	.word	0x40014000
 8005300:	40014400 	.word	0x40014400
 8005304:	40014800 	.word	0x40014800

08005308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005308:	b480      	push	{r7}
 800530a:	b087      	sub	sp, #28
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800533a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f023 0303 	bic.w	r3, r3, #3
 8005342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	021b      	lsls	r3, r3, #8
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a27      	ldr	r2, [pc, #156]	; (8005404 <TIM_OC3_SetConfig+0xfc>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_OC3_SetConfig+0x6a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a26      	ldr	r2, [pc, #152]	; (8005408 <TIM_OC3_SetConfig+0x100>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d10d      	bne.n	800538e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005378:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	021b      	lsls	r3, r3, #8
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	4313      	orrs	r3, r2
 8005384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800538c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a1c      	ldr	r2, [pc, #112]	; (8005404 <TIM_OC3_SetConfig+0xfc>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d00f      	beq.n	80053b6 <TIM_OC3_SetConfig+0xae>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <TIM_OC3_SetConfig+0x100>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d00b      	beq.n	80053b6 <TIM_OC3_SetConfig+0xae>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1a      	ldr	r2, [pc, #104]	; (800540c <TIM_OC3_SetConfig+0x104>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d007      	beq.n	80053b6 <TIM_OC3_SetConfig+0xae>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a19      	ldr	r2, [pc, #100]	; (8005410 <TIM_OC3_SetConfig+0x108>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d003      	beq.n	80053b6 <TIM_OC3_SetConfig+0xae>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a18      	ldr	r2, [pc, #96]	; (8005414 <TIM_OC3_SetConfig+0x10c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d113      	bne.n	80053de <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	621a      	str	r2, [r3, #32]
}
 80053f8:	bf00      	nop
 80053fa:	371c      	adds	r7, #28
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40013400 	.word	0x40013400
 800540c:	40014000 	.word	0x40014000
 8005410:	40014400 	.word	0x40014400
 8005414:	40014800 	.word	0x40014800

08005418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	021b      	lsls	r3, r3, #8
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	031b      	lsls	r3, r3, #12
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a28      	ldr	r2, [pc, #160]	; (8005518 <TIM_OC4_SetConfig+0x100>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC4_SetConfig+0x6c>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a27      	ldr	r2, [pc, #156]	; (800551c <TIM_OC4_SetConfig+0x104>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10d      	bne.n	80054a0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	031b      	lsls	r3, r3, #12
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	4313      	orrs	r3, r2
 8005496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <TIM_OC4_SetConfig+0x100>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00f      	beq.n	80054c8 <TIM_OC4_SetConfig+0xb0>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <TIM_OC4_SetConfig+0x104>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d00b      	beq.n	80054c8 <TIM_OC4_SetConfig+0xb0>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <TIM_OC4_SetConfig+0x108>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d007      	beq.n	80054c8 <TIM_OC4_SetConfig+0xb0>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a1a      	ldr	r2, [pc, #104]	; (8005524 <TIM_OC4_SetConfig+0x10c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d003      	beq.n	80054c8 <TIM_OC4_SetConfig+0xb0>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a19      	ldr	r2, [pc, #100]	; (8005528 <TIM_OC4_SetConfig+0x110>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d113      	bne.n	80054f0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	695b      	ldr	r3, [r3, #20]
 80054dc:	019b      	lsls	r3, r3, #6
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	019b      	lsls	r3, r3, #6
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40013400 	.word	0x40013400
 8005520:	40014000 	.word	0x40014000
 8005524:	40014400 	.word	0x40014400
 8005528:	40014800 	.word	0x40014800

0800552c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005570:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	041b      	lsls	r3, r3, #16
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	4313      	orrs	r3, r2
 800557c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <TIM_OC5_SetConfig+0xb4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d00f      	beq.n	80055a6 <TIM_OC5_SetConfig+0x7a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a16      	ldr	r2, [pc, #88]	; (80055e4 <TIM_OC5_SetConfig+0xb8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d00b      	beq.n	80055a6 <TIM_OC5_SetConfig+0x7a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a15      	ldr	r2, [pc, #84]	; (80055e8 <TIM_OC5_SetConfig+0xbc>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d007      	beq.n	80055a6 <TIM_OC5_SetConfig+0x7a>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a14      	ldr	r2, [pc, #80]	; (80055ec <TIM_OC5_SetConfig+0xc0>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d003      	beq.n	80055a6 <TIM_OC5_SetConfig+0x7a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a13      	ldr	r2, [pc, #76]	; (80055f0 <TIM_OC5_SetConfig+0xc4>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d109      	bne.n	80055ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	693a      	ldr	r2, [r7, #16]
 80055d2:	621a      	str	r2, [r3, #32]
}
 80055d4:	bf00      	nop
 80055d6:	371c      	adds	r7, #28
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012c00 	.word	0x40012c00
 80055e4:	40013400 	.word	0x40013400
 80055e8:	40014000 	.word	0x40014000
 80055ec:	40014400 	.word	0x40014400
 80055f0:	40014800 	.word	0x40014800

080055f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a1b      	ldr	r3, [r3, #32]
 8005602:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800561a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800563a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	051b      	lsls	r3, r3, #20
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a18      	ldr	r2, [pc, #96]	; (80056ac <TIM_OC6_SetConfig+0xb8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d00f      	beq.n	8005670 <TIM_OC6_SetConfig+0x7c>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a17      	ldr	r2, [pc, #92]	; (80056b0 <TIM_OC6_SetConfig+0xbc>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00b      	beq.n	8005670 <TIM_OC6_SetConfig+0x7c>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a16      	ldr	r2, [pc, #88]	; (80056b4 <TIM_OC6_SetConfig+0xc0>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d007      	beq.n	8005670 <TIM_OC6_SetConfig+0x7c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <TIM_OC6_SetConfig+0xc4>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d003      	beq.n	8005670 <TIM_OC6_SetConfig+0x7c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a14      	ldr	r2, [pc, #80]	; (80056bc <TIM_OC6_SetConfig+0xc8>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d109      	bne.n	8005684 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005676:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	029b      	lsls	r3, r3, #10
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	697a      	ldr	r2, [r7, #20]
 8005688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	693a      	ldr	r2, [r7, #16]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr
 80056aa:	bf00      	nop
 80056ac:	40012c00 	.word	0x40012c00
 80056b0:	40013400 	.word	0x40013400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40014400 	.word	0x40014400
 80056bc:	40014800 	.word	0x40014800

080056c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	2201      	movs	r2, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	fa01 f303 	lsl.w	r3, r1, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800571c:	2b01      	cmp	r3, #1
 800571e:	d101      	bne.n	8005724 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005720:	2302      	movs	r3, #2
 8005722:	e065      	b.n	80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2202      	movs	r2, #2
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a2c      	ldr	r2, [pc, #176]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d004      	beq.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a2b      	ldr	r2, [pc, #172]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d108      	bne.n	800576a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800575e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	4313      	orrs	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005774:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1b      	ldr	r2, [pc, #108]	; (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d018      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579a:	d013      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d00e      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d009      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a12      	ldr	r2, [pc, #72]	; (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d004      	beq.n	80057c4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a13      	ldr	r2, [pc, #76]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d10c      	bne.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3714      	adds	r7, #20
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40013400 	.word	0x40013400
 8005804:	40000400 	.word	0x40000400
 8005808:	40000800 	.word	0x40000800
 800580c:	40014000 	.word	0x40014000

08005810 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d101      	bne.n	800582c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005828:	2302      	movs	r3, #2
 800582a:	e087      	b.n	800593c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	4313      	orrs	r3, r2
 800584e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	4313      	orrs	r3, r2
 800585c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4313      	orrs	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	4313      	orrs	r3, r2
 8005886:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	041b      	lsls	r3, r3, #16
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a27      	ldr	r2, [pc, #156]	; (8005948 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d004      	beq.n	80058ba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a25      	ldr	r2, [pc, #148]	; (800594c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d106      	bne.n	80058c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	69db      	ldr	r3, [r3, #28]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a1e      	ldr	r2, [pc, #120]	; (8005948 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d004      	beq.n	80058dc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a1d      	ldr	r2, [pc, #116]	; (800594c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d126      	bne.n	800592a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	051b      	lsls	r3, r3, #20
 80058e8:	4313      	orrs	r3, r2
 80058ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a0e      	ldr	r2, [pc, #56]	; (8005948 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d004      	beq.n	800591c <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a0d      	ldr	r2, [pc, #52]	; (800594c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d106      	bne.n	800592a <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	3714      	adds	r7, #20
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr
 8005948:	40012c00 	.word	0x40012c00
 800594c:	40013400 	.word	0x40013400

08005950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059ec:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80059f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	b29a      	uxth	r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a12:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005a16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	4013      	ands	r3, r2
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a40:	b084      	sub	sp, #16
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
 8005a4a:	f107 0014 	add.w	r0, r7, #20
 8005a4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	b004      	add	sp, #16
 8005a80:	4770      	bx	lr
	...

08005a84 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b09b      	sub	sp, #108	; 0x6c
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	78db      	ldrb	r3, [r3, #3]
 8005ab2:	2b03      	cmp	r3, #3
 8005ab4:	d81f      	bhi.n	8005af6 <USB_ActivateEndpoint+0x72>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <USB_ActivateEndpoint+0x38>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005ae9 	.word	0x08005ae9
 8005ac4:	08005aff 	.word	0x08005aff
 8005ac8:	08005adb 	.word	0x08005adb
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005acc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ad4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ad8:	e012      	b.n	8005b00 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ada:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005ade:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005ae2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005ae6:	e00b      	b.n	8005b00 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ae8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005aec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005af0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8005af4:	e004      	b.n	8005b00 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8005afc:	e000      	b.n	8005b00 <USB_ActivateEndpoint+0x7c>
      break;
 8005afe:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	441a      	add	r2, r3
 8005b0a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	881b      	ldrh	r3, [r3, #0]
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	b21b      	sxth	r3, r3
 8005b32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3a:	b21a      	sxth	r2, r3
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	b21b      	sxth	r3, r3
 8005b42:	4313      	orrs	r3, r2
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005b58:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b5c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b68:	b29b      	uxth	r3, r3
 8005b6a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	7b1b      	ldrb	r3, [r3, #12]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f040 8149 	bne.w	8005e08 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f000 8084 	beq.w	8005c88 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	4413      	add	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	00da      	lsls	r2, r3, #3
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ba2:	613b      	str	r3, [r7, #16]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	88db      	ldrh	r3, [r3, #6]
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	4413      	add	r3, r2
 8005bbe:	881b      	ldrh	r3, [r3, #0]
 8005bc0:	81fb      	strh	r3, [r7, #14]
 8005bc2:	89fb      	ldrh	r3, [r7, #14]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <USB_ActivateEndpoint+0x180>
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	009b      	lsls	r3, r3, #2
 8005bd4:	4413      	add	r3, r2
 8005bd6:	881b      	ldrh	r3, [r3, #0]
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	81bb      	strh	r3, [r7, #12]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	441a      	add	r2, r3
 8005bee:	89bb      	ldrh	r3, [r7, #12]
 8005bf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	78db      	ldrb	r3, [r3, #3]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d020      	beq.n	8005c4e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	4413      	add	r3, r2
 8005c16:	881b      	ldrh	r3, [r3, #0]
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c22:	813b      	strh	r3, [r7, #8]
 8005c24:	893b      	ldrh	r3, [r7, #8]
 8005c26:	f083 0320 	eor.w	r3, r3, #32
 8005c2a:	813b      	strh	r3, [r7, #8]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	441a      	add	r2, r3
 8005c36:	893b      	ldrh	r3, [r7, #8]
 8005c38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	8013      	strh	r3, [r2, #0]
 8005c4c:	e27f      	b.n	800614e <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	4413      	add	r3, r2
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c64:	817b      	strh	r3, [r7, #10]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	441a      	add	r2, r3
 8005c70:	897b      	ldrh	r3, [r7, #10]
 8005c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	8013      	strh	r3, [r2, #0]
 8005c86:	e262      	b.n	800614e <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	461a      	mov	r2, r3
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	4413      	add	r3, r2
 8005c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	00da      	lsls	r2, r3, #3
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005caa:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	88db      	ldrh	r3, [r3, #6]
 8005cb0:	085b      	lsrs	r3, r3, #1
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	005b      	lsls	r3, r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cba:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	461a      	mov	r2, r3
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	4413      	add	r3, r2
 8005cce:	627b      	str	r3, [r7, #36]	; 0x24
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	00da      	lsls	r2, r3, #3
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd8:	4413      	add	r3, r2
 8005cda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005cde:	623b      	str	r3, [r7, #32]
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d112      	bne.n	8005d0e <USB_ActivateEndpoint+0x28a>
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	881b      	ldrh	r3, [r3, #0]
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cf2:	b29a      	uxth	r2, r3
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	801a      	strh	r2, [r3, #0]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	881b      	ldrh	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	6a3b      	ldr	r3, [r7, #32]
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e02f      	b.n	8005d6e <USB_ActivateEndpoint+0x2ea>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	2b3e      	cmp	r3, #62	; 0x3e
 8005d14:	d813      	bhi.n	8005d3e <USB_ActivateEndpoint+0x2ba>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	085b      	lsrs	r3, r3, #1
 8005d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d002      	beq.n	8005d30 <USB_ActivateEndpoint+0x2ac>
 8005d2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	663b      	str	r3, [r7, #96]	; 0x60
 8005d30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	029b      	lsls	r3, r3, #10
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	6a3b      	ldr	r3, [r7, #32]
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e017      	b.n	8005d6e <USB_ActivateEndpoint+0x2ea>
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	095b      	lsrs	r3, r3, #5
 8005d44:	663b      	str	r3, [r7, #96]	; 0x60
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 031f 	and.w	r3, r3, #31
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d102      	bne.n	8005d58 <USB_ActivateEndpoint+0x2d4>
 8005d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d54:	3b01      	subs	r3, #1
 8005d56:	663b      	str	r3, [r7, #96]	; 0x60
 8005d58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	029b      	lsls	r3, r3, #10
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d68:	b29a      	uxth	r2, r3
 8005d6a:	6a3b      	ldr	r3, [r7, #32]
 8005d6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	83fb      	strh	r3, [r7, #30]
 8005d7c:	8bfb      	ldrh	r3, [r7, #30]
 8005d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d01b      	beq.n	8005dbe <USB_ActivateEndpoint+0x33a>
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9c:	83bb      	strh	r3, [r7, #28]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	8bbb      	ldrh	r3, [r7, #28]
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	781b      	ldrb	r3, [r3, #0]
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd4:	837b      	strh	r3, [r7, #26]
 8005dd6:	8b7b      	ldrh	r3, [r7, #26]
 8005dd8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005ddc:	837b      	strh	r3, [r7, #26]
 8005dde:	8b7b      	ldrh	r3, [r7, #26]
 8005de0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005de4:	837b      	strh	r3, [r7, #26]
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	441a      	add	r2, r3
 8005df0:	8b7b      	ldrh	r3, [r7, #26]
 8005df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	8013      	strh	r3, [r2, #0]
 8005e06:	e1a2      	b.n	800614e <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	881b      	ldrh	r3, [r3, #0]
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e38:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e54:	4413      	add	r3, r2
 8005e56:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	00da      	lsls	r2, r3, #3
 8005e5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e66:	657b      	str	r3, [r7, #84]	; 0x54
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	891b      	ldrh	r3, [r3, #8]
 8005e6c:	085b      	lsrs	r3, r3, #1
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e76:	801a      	strh	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e88:	4413      	add	r3, r2
 8005e8a:	653b      	str	r3, [r7, #80]	; 0x50
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	00da      	lsls	r2, r3, #3
 8005e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	895b      	ldrh	r3, [r3, #10]
 8005ea0:	085b      	lsrs	r3, r3, #1
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	005b      	lsls	r3, r3, #1
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eaa:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	785b      	ldrb	r3, [r3, #1]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f040 8091 	bne.w	8005fd8 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	881b      	ldrh	r3, [r3, #0]
 8005ec2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8005ec4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d01b      	beq.n	8005f06 <USB_ActivateEndpoint+0x482>
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ee4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	781b      	ldrb	r3, [r3, #0]
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	441a      	add	r2, r3
 8005ef0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8005ef2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ef6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005efa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005efe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f14:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d01b      	beq.n	8005f56 <USB_ActivateEndpoint+0x4d2>
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4413      	add	r3, r2
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f34:	86fb      	strh	r3, [r7, #54]	; 0x36
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f6e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f70:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f74:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f76:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f78:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f7c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	441a      	add	r2, r3
 8005f88:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8005f8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	4413      	add	r3, r2
 8005fa8:	881b      	ldrh	r3, [r3, #0]
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fb4:	867b      	strh	r3, [r7, #50]	; 0x32
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	441a      	add	r2, r3
 8005fc0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005fc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	8013      	strh	r3, [r2, #0]
 8005fd6:	e0ba      	b.n	800614e <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	009b      	lsls	r3, r3, #2
 8005fe0:	4413      	add	r3, r2
 8005fe2:	881b      	ldrh	r3, [r3, #0]
 8005fe4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8005fe8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d01d      	beq.n	8006030 <USB_ActivateEndpoint+0x5ac>
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	781b      	ldrb	r3, [r3, #0]
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4413      	add	r3, r2
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	b29b      	uxth	r3, r3
 8006002:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	441a      	add	r2, r3
 8006018:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800601c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006024:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800602c:	b29b      	uxth	r3, r3
 800602e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006040:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01d      	beq.n	8006088 <USB_ActivateEndpoint+0x604>
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	4413      	add	r3, r2
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006062:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	441a      	add	r2, r3
 8006070:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006074:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006078:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800607c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006080:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006084:	b29b      	uxth	r3, r3
 8006086:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	78db      	ldrb	r3, [r3, #3]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d024      	beq.n	80060da <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	4413      	add	r3, r2
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	b29b      	uxth	r3, r3
 800609e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060ae:	f083 0320 	eor.w	r3, r3, #32
 80060b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	441a      	add	r2, r3
 80060c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80060c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d4:	b29b      	uxth	r3, r3
 80060d6:	8013      	strh	r3, [r2, #0]
 80060d8:	e01d      	b.n	8006116 <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060f0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	441a      	add	r2, r3
 80060fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006102:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006106:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800610a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800610e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006112:	b29b      	uxth	r3, r3
 8006114:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800614e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006152:	4618      	mov	r0, r3
 8006154:	376c      	adds	r7, #108	; 0x6c
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop

08006160 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006160:	b480      	push	{r7}
 8006162:	b08d      	sub	sp, #52	; 0x34
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	7b1b      	ldrb	r3, [r3, #12]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 808e 	bne.w	8006290 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d044      	beq.n	8006206 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	881b      	ldrh	r3, [r3, #0]
 8006188:	81bb      	strh	r3, [r7, #12]
 800618a:	89bb      	ldrh	r3, [r7, #12]
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006190:	2b00      	cmp	r3, #0
 8006192:	d01b      	beq.n	80061cc <USB_DeactivateEndpoint+0x6c>
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	781b      	ldrb	r3, [r3, #0]
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061aa:	817b      	strh	r3, [r7, #10]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	441a      	add	r2, r3
 80061b6:	897b      	ldrh	r3, [r7, #10]
 80061b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061e2:	813b      	strh	r3, [r7, #8]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	441a      	add	r2, r3
 80061ee:	893b      	ldrh	r3, [r7, #8]
 80061f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006200:	b29b      	uxth	r3, r3
 8006202:	8013      	strh	r3, [r2, #0]
 8006204:	e192      	b.n	800652c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	009b      	lsls	r3, r3, #2
 800620e:	4413      	add	r3, r2
 8006210:	881b      	ldrh	r3, [r3, #0]
 8006212:	827b      	strh	r3, [r7, #18]
 8006214:	8a7b      	ldrh	r3, [r7, #18]
 8006216:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01b      	beq.n	8006256 <USB_DeactivateEndpoint+0xf6>
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	881b      	ldrh	r3, [r3, #0]
 800622a:	b29b      	uxth	r3, r3
 800622c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006234:	823b      	strh	r3, [r7, #16]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	8a3b      	ldrh	r3, [r7, #16]
 8006242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800624a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800624e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006252:	b29b      	uxth	r3, r3
 8006254:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	b29b      	uxth	r3, r3
 8006264:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626c:	81fb      	strh	r3, [r7, #14]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	781b      	ldrb	r3, [r3, #0]
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	89fb      	ldrh	r3, [r7, #14]
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]
 800628e:	e14d      	b.n	800652c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 80a5 	bne.w	80063e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	4413      	add	r3, r2
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	843b      	strh	r3, [r7, #32]
 80062a8:	8c3b      	ldrh	r3, [r7, #32]
 80062aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01b      	beq.n	80062ea <USB_DeactivateEndpoint+0x18a>
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	83fb      	strh	r3, [r7, #30]
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	009b      	lsls	r3, r3, #2
 80062d2:	441a      	add	r2, r3
 80062d4:	8bfb      	ldrh	r3, [r7, #30]
 80062d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	009b      	lsls	r3, r3, #2
 80062f2:	4413      	add	r3, r2
 80062f4:	881b      	ldrh	r3, [r3, #0]
 80062f6:	83bb      	strh	r3, [r7, #28]
 80062f8:	8bbb      	ldrh	r3, [r7, #28]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d01b      	beq.n	800633a <USB_DeactivateEndpoint+0x1da>
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	837b      	strh	r3, [r7, #26]
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	441a      	add	r2, r3
 8006324:	8b7b      	ldrh	r3, [r7, #26]
 8006326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800632e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006332:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006336:	b29b      	uxth	r3, r3
 8006338:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800634c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006350:	833b      	strh	r3, [r7, #24]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	8b3b      	ldrh	r3, [r7, #24]
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006366:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800636a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006388:	82fb      	strh	r3, [r7, #22]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	8afb      	ldrh	r3, [r7, #22]
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063c0:	82bb      	strh	r3, [r7, #20]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8abb      	ldrh	r3, [r7, #20]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]
 80063e2:	e0a3      	b.n	800652c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80063f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80063f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01b      	beq.n	8006434 <USB_DeactivateEndpoint+0x2d4>
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	b29b      	uxth	r3, r3
 800640a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800640e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006412:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	441a      	add	r2, r3
 800641e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800642c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006430:	b29b      	uxth	r3, r3
 8006432:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	881b      	ldrh	r3, [r3, #0]
 8006440:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006442:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01b      	beq.n	8006484 <USB_DeactivateEndpoint+0x324>
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4413      	add	r3, r2
 8006456:	881b      	ldrh	r3, [r3, #0]
 8006458:	b29b      	uxth	r3, r3
 800645a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800645e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006462:	853b      	strh	r3, [r7, #40]	; 0x28
 8006464:	687a      	ldr	r2, [r7, #4]
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	009b      	lsls	r3, r3, #2
 800646c:	441a      	add	r2, r3
 800646e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006470:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006474:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006478:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800647c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006480:	b29b      	uxth	r3, r3
 8006482:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4413      	add	r3, r2
 800648e:	881b      	ldrh	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	441a      	add	r2, r3
 80064a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80064a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800650a:	847b      	strh	r3, [r7, #34]	; 0x22
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3734      	adds	r7, #52	; 0x34
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b0cc      	sub	sp, #304	; 0x130
 800653e:	af00      	add	r7, sp, #0
 8006540:	1d3b      	adds	r3, r7, #4
 8006542:	6018      	str	r0, [r3, #0]
 8006544:	463b      	mov	r3, r7
 8006546:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006548:	463b      	mov	r3, r7
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b01      	cmp	r3, #1
 8006550:	f040 872e 	bne.w	80073b0 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006554:	463b      	mov	r3, r7
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	699a      	ldr	r2, [r3, #24]
 800655a:	463b      	mov	r3, r7
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	429a      	cmp	r2, r3
 8006562:	d905      	bls.n	8006570 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8006564:	463b      	mov	r3, r7
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800656e:	e004      	b.n	800657a <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8006570:	463b      	mov	r3, r7
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800657a:	463b      	mov	r3, r7
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	7b1b      	ldrb	r3, [r3, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d134      	bne.n	80065ee <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006584:	463b      	mov	r3, r7
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6959      	ldr	r1, [r3, #20]
 800658a:	463b      	mov	r3, r7
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	88da      	ldrh	r2, [r3, #6]
 8006590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006594:	b29b      	uxth	r3, r3
 8006596:	1d38      	adds	r0, r7, #4
 8006598:	6800      	ldr	r0, [r0, #0]
 800659a:	f001 fbff 	bl	8007d9c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800659e:	f107 0310 	add.w	r3, r7, #16
 80065a2:	1d3a      	adds	r2, r7, #4
 80065a4:	6812      	ldr	r2, [r2, #0]
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	4619      	mov	r1, r3
 80065b4:	f107 0310 	add.w	r3, r7, #16
 80065b8:	f107 0210 	add.w	r2, r7, #16
 80065bc:	6812      	ldr	r2, [r2, #0]
 80065be:	440a      	add	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]
 80065c2:	463b      	mov	r3, r7
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	00da      	lsls	r2, r3, #3
 80065ca:	f107 0310 	add.w	r3, r7, #16
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80065d6:	f107 030c 	add.w	r3, r7, #12
 80065da:	601a      	str	r2, [r3, #0]
 80065dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e0:	b29a      	uxth	r2, r3
 80065e2:	f107 030c 	add.w	r3, r7, #12
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	f000 beac 	b.w	8007346 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80065ee:	463b      	mov	r3, r7
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	78db      	ldrb	r3, [r3, #3]
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	f040 838c 	bne.w	8006d12 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80065fa:	463b      	mov	r3, r7
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6a1a      	ldr	r2, [r3, #32]
 8006600:	463b      	mov	r3, r7
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	429a      	cmp	r2, r3
 8006608:	f240 8330 	bls.w	8006c6c <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800660c:	1d3b      	adds	r3, r7, #4
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	463b      	mov	r3, r7
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006626:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800662a:	1d3b      	adds	r3, r7, #4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	463b      	mov	r3, r7
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	441a      	add	r2, r3
 8006638:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006650:	463b      	mov	r3, r7
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6a1a      	ldr	r2, [r3, #32]
 8006656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	463b      	mov	r3, r7
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006662:	1d3b      	adds	r3, r7, #4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	463b      	mov	r3, r7
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29b      	uxth	r3, r3
 8006674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 819e 	beq.w	80069ba <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800667e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006682:	1d3a      	adds	r2, r7, #4
 8006684:	6812      	ldr	r2, [r2, #0]
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	463b      	mov	r3, r7
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	785b      	ldrb	r3, [r3, #1]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d17a      	bne.n	8006788 <USB_EPStartXfer+0x24e>
 8006692:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006696:	1d3a      	adds	r2, r7, #4
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	1d3b      	adds	r3, r7, #4
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	4619      	mov	r1, r3
 80066a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80066b0:	6812      	ldr	r2, [r2, #0]
 80066b2:	440a      	add	r2, r1
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	463b      	mov	r3, r7
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	00da      	lsls	r2, r3, #3
 80066be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4413      	add	r3, r2
 80066c6:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80066ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ce:	601a      	str	r2, [r3, #0]
 80066d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d11a      	bne.n	800670e <USB_EPStartXfer+0x1d4>
 80066d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	881b      	ldrh	r3, [r3, #0]
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e6:	b29a      	uxth	r2, r3
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	801a      	strh	r2, [r3, #0]
 80066f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006702:	b29a      	uxth	r2, r3
 8006704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	801a      	strh	r2, [r3, #0]
 800670c:	e062      	b.n	80067d4 <USB_EPStartXfer+0x29a>
 800670e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006712:	2b3e      	cmp	r3, #62	; 0x3e
 8006714:	d819      	bhi.n	800674a <USB_EPStartXfer+0x210>
 8006716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800671a:	085b      	lsrs	r3, r3, #1
 800671c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d004      	beq.n	8006736 <USB_EPStartXfer+0x1fc>
 800672c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006730:	3301      	adds	r3, #1
 8006732:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006736:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800673a:	b29b      	uxth	r3, r3
 800673c:	029b      	lsls	r3, r3, #10
 800673e:	b29a      	uxth	r2, r3
 8006740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	801a      	strh	r2, [r3, #0]
 8006748:	e044      	b.n	80067d4 <USB_EPStartXfer+0x29a>
 800674a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800674e:	095b      	lsrs	r3, r3, #5
 8006750:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8006754:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006758:	f003 031f 	and.w	r3, r3, #31
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USB_EPStartXfer+0x230>
 8006760:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006764:	3b01      	subs	r3, #1
 8006766:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800676a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800676e:	b29b      	uxth	r3, r3
 8006770:	029b      	lsls	r3, r3, #10
 8006772:	b29b      	uxth	r3, r3
 8006774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800677c:	b29a      	uxth	r2, r3
 800677e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	801a      	strh	r2, [r3, #0]
 8006786:	e025      	b.n	80067d4 <USB_EPStartXfer+0x29a>
 8006788:	463b      	mov	r3, r7
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d120      	bne.n	80067d4 <USB_EPStartXfer+0x29a>
 8006792:	1d3b      	adds	r3, r7, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800679a:	b29b      	uxth	r3, r3
 800679c:	4619      	mov	r1, r3
 800679e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067a2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80067a6:	6812      	ldr	r2, [r2, #0]
 80067a8:	440a      	add	r2, r1
 80067aa:	601a      	str	r2, [r3, #0]
 80067ac:	463b      	mov	r3, r7
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	00da      	lsls	r2, r3, #3
 80067b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4413      	add	r3, r2
 80067bc:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80067c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80067d4:	463b      	mov	r3, r7
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	895b      	ldrh	r3, [r3, #10]
 80067da:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80067de:	463b      	mov	r3, r7
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	6959      	ldr	r1, [r3, #20]
 80067e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80067ee:	1d38      	adds	r0, r7, #4
 80067f0:	6800      	ldr	r0, [r0, #0]
 80067f2:	f001 fad3 	bl	8007d9c <USB_WritePMA>
            ep->xfer_buff += len;
 80067f6:	463b      	mov	r3, r7
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006800:	441a      	add	r2, r3
 8006802:	463b      	mov	r3, r7
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006808:	463b      	mov	r3, r7
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	463b      	mov	r3, r7
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	429a      	cmp	r2, r3
 8006816:	d909      	bls.n	800682c <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8006818:	463b      	mov	r3, r7
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	6a1a      	ldr	r2, [r3, #32]
 800681e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006822:	1ad2      	subs	r2, r2, r3
 8006824:	463b      	mov	r3, r7
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	621a      	str	r2, [r3, #32]
 800682a:	e008      	b.n	800683e <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 800682c:	463b      	mov	r3, r7
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006836:	463b      	mov	r3, r7
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2200      	movs	r2, #0
 800683c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800683e:	463b      	mov	r3, r7
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	785b      	ldrb	r3, [r3, #1]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d17a      	bne.n	800693e <USB_EPStartXfer+0x404>
 8006848:	f107 0318 	add.w	r3, r7, #24
 800684c:	1d3a      	adds	r2, r7, #4
 800684e:	6812      	ldr	r2, [r2, #0]
 8006850:	601a      	str	r2, [r3, #0]
 8006852:	1d3b      	adds	r3, r7, #4
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800685a:	b29b      	uxth	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	f107 0318 	add.w	r3, r7, #24
 8006862:	f107 0218 	add.w	r2, r7, #24
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	440a      	add	r2, r1
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	463b      	mov	r3, r7
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	00da      	lsls	r2, r3, #3
 8006874:	f107 0318 	add.w	r3, r7, #24
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4413      	add	r3, r2
 800687c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006880:	f107 0314 	add.w	r3, r7, #20
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d11a      	bne.n	80068c4 <USB_EPStartXfer+0x38a>
 800688e:	f107 0314 	add.w	r3, r7, #20
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	881b      	ldrh	r3, [r3, #0]
 8006896:	b29b      	uxth	r3, r3
 8006898:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800689c:	b29a      	uxth	r2, r3
 800689e:	f107 0314 	add.w	r3, r7, #20
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	801a      	strh	r2, [r3, #0]
 80068a6:	f107 0314 	add.w	r3, r7, #20
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	881b      	ldrh	r3, [r3, #0]
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	f107 0314 	add.w	r3, r7, #20
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	801a      	strh	r2, [r3, #0]
 80068c2:	e067      	b.n	8006994 <USB_EPStartXfer+0x45a>
 80068c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068c8:	2b3e      	cmp	r3, #62	; 0x3e
 80068ca:	d819      	bhi.n	8006900 <USB_EPStartXfer+0x3c6>
 80068cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d004      	beq.n	80068ec <USB_EPStartXfer+0x3b2>
 80068e2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068e6:	3301      	adds	r3, #1
 80068e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80068ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	029b      	lsls	r3, r3, #10
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	f107 0314 	add.w	r3, r7, #20
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	801a      	strh	r2, [r3, #0]
 80068fe:	e049      	b.n	8006994 <USB_EPStartXfer+0x45a>
 8006900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006904:	095b      	lsrs	r3, r3, #5
 8006906:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800690a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	2b00      	cmp	r3, #0
 8006914:	d104      	bne.n	8006920 <USB_EPStartXfer+0x3e6>
 8006916:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800691a:	3b01      	subs	r3, #1
 800691c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006920:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8006924:	b29b      	uxth	r3, r3
 8006926:	029b      	lsls	r3, r3, #10
 8006928:	b29b      	uxth	r3, r3
 800692a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800692e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006932:	b29a      	uxth	r2, r3
 8006934:	f107 0314 	add.w	r3, r7, #20
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	e02a      	b.n	8006994 <USB_EPStartXfer+0x45a>
 800693e:	463b      	mov	r3, r7
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	785b      	ldrb	r3, [r3, #1]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d125      	bne.n	8006994 <USB_EPStartXfer+0x45a>
 8006948:	f107 0320 	add.w	r3, r7, #32
 800694c:	1d3a      	adds	r2, r7, #4
 800694e:	6812      	ldr	r2, [r2, #0]
 8006950:	601a      	str	r2, [r3, #0]
 8006952:	1d3b      	adds	r3, r7, #4
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800695a:	b29b      	uxth	r3, r3
 800695c:	4619      	mov	r1, r3
 800695e:	f107 0320 	add.w	r3, r7, #32
 8006962:	f107 0220 	add.w	r2, r7, #32
 8006966:	6812      	ldr	r2, [r2, #0]
 8006968:	440a      	add	r2, r1
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	463b      	mov	r3, r7
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	00da      	lsls	r2, r3, #3
 8006974:	f107 0320 	add.w	r3, r7, #32
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4413      	add	r3, r2
 800697c:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8006980:	f107 031c 	add.w	r3, r7, #28
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800698a:	b29a      	uxth	r2, r3
 800698c:	f107 031c 	add.w	r3, r7, #28
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006994:	463b      	mov	r3, r7
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	891b      	ldrh	r3, [r3, #8]
 800699a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800699e:	463b      	mov	r3, r7
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6959      	ldr	r1, [r3, #20]
 80069a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80069ae:	1d38      	adds	r0, r7, #4
 80069b0:	6800      	ldr	r0, [r0, #0]
 80069b2:	f001 f9f3 	bl	8007d9c <USB_WritePMA>
 80069b6:	f000 bcc6 	b.w	8007346 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069ba:	463b      	mov	r3, r7
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	785b      	ldrb	r3, [r3, #1]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d164      	bne.n	8006a8e <USB_EPStartXfer+0x554>
 80069c4:	1d3b      	adds	r3, r7, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ca:	1d3b      	adds	r3, r7, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069d2:	b29b      	uxth	r3, r3
 80069d4:	461a      	mov	r2, r3
 80069d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d8:	4413      	add	r3, r2
 80069da:	64bb      	str	r3, [r7, #72]	; 0x48
 80069dc:	463b      	mov	r3, r7
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	00da      	lsls	r2, r3, #3
 80069e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069e6:	4413      	add	r3, r2
 80069e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
 80069ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d112      	bne.n	8006a1c <USB_EPStartXfer+0x4e2>
 80069f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069f8:	881b      	ldrh	r3, [r3, #0]
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a04:	801a      	strh	r2, [r3, #0]
 8006a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	e057      	b.n	8006acc <USB_EPStartXfer+0x592>
 8006a1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a20:	2b3e      	cmp	r3, #62	; 0x3e
 8006a22:	d817      	bhi.n	8006a54 <USB_EPStartXfer+0x51a>
 8006a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a28:	085b      	lsrs	r3, r3, #1
 8006a2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a32:	f003 0301 	and.w	r3, r3, #1
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d004      	beq.n	8006a44 <USB_EPStartXfer+0x50a>
 8006a3a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a3e:	3301      	adds	r3, #1
 8006a40:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a44:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	029b      	lsls	r3, r3, #10
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a50:	801a      	strh	r2, [r3, #0]
 8006a52:	e03b      	b.n	8006acc <USB_EPStartXfer+0x592>
 8006a54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a58:	095b      	lsrs	r3, r3, #5
 8006a5a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a62:	f003 031f 	and.w	r3, r3, #31
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <USB_EPStartXfer+0x53a>
 8006a6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a6e:	3b01      	subs	r3, #1
 8006a70:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8006a74:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	029b      	lsls	r3, r3, #10
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a8a:	801a      	strh	r2, [r3, #0]
 8006a8c:	e01e      	b.n	8006acc <USB_EPStartXfer+0x592>
 8006a8e:	463b      	mov	r3, r7
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	785b      	ldrb	r3, [r3, #1]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d119      	bne.n	8006acc <USB_EPStartXfer+0x592>
 8006a98:	1d3b      	adds	r3, r7, #4
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a9e:	1d3b      	adds	r3, r7, #4
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aac:	4413      	add	r3, r2
 8006aae:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab0:	463b      	mov	r3, r7
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	781b      	ldrb	r3, [r3, #0]
 8006ab6:	00da      	lsls	r2, r3, #3
 8006ab8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aba:	4413      	add	r3, r2
 8006abc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ac2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006acc:	463b      	mov	r3, r7
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	891b      	ldrh	r3, [r3, #8]
 8006ad2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ad6:	463b      	mov	r3, r7
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6959      	ldr	r1, [r3, #20]
 8006adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006ae6:	1d38      	adds	r0, r7, #4
 8006ae8:	6800      	ldr	r0, [r0, #0]
 8006aea:	f001 f957 	bl	8007d9c <USB_WritePMA>
            ep->xfer_buff += len;
 8006aee:	463b      	mov	r3, r7
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695a      	ldr	r2, [r3, #20]
 8006af4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006af8:	441a      	add	r2, r3
 8006afa:	463b      	mov	r3, r7
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006b00:	463b      	mov	r3, r7
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	6a1a      	ldr	r2, [r3, #32]
 8006b06:	463b      	mov	r3, r7
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d909      	bls.n	8006b24 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8006b10:	463b      	mov	r3, r7
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6a1a      	ldr	r2, [r3, #32]
 8006b16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b1a:	1ad2      	subs	r2, r2, r3
 8006b1c:	463b      	mov	r3, r7
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	621a      	str	r2, [r3, #32]
 8006b22:	e008      	b.n	8006b36 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8006b24:	463b      	mov	r3, r7
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8006b2e:	463b      	mov	r3, r7
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2200      	movs	r2, #0
 8006b34:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006b36:	1d3b      	adds	r3, r7, #4
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b3c:	463b      	mov	r3, r7
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	785b      	ldrb	r3, [r3, #1]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d164      	bne.n	8006c10 <USB_EPStartXfer+0x6d6>
 8006b46:	1d3b      	adds	r3, r7, #4
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b4c:	1d3b      	adds	r3, r7, #4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	461a      	mov	r2, r3
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	4413      	add	r3, r2
 8006b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b5e:	463b      	mov	r3, r7
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	00da      	lsls	r2, r3, #3
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	4413      	add	r3, r2
 8006b6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d112      	bne.n	8006b9e <USB_EPStartXfer+0x664>
 8006b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7a:	881b      	ldrh	r3, [r3, #0]
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	801a      	strh	r2, [r3, #0]
 8006b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9a:	801a      	strh	r2, [r3, #0]
 8006b9c:	e054      	b.n	8006c48 <USB_EPStartXfer+0x70e>
 8006b9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ba2:	2b3e      	cmp	r3, #62	; 0x3e
 8006ba4:	d817      	bhi.n	8006bd6 <USB_EPStartXfer+0x69c>
 8006ba6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006baa:	085b      	lsrs	r3, r3, #1
 8006bac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d004      	beq.n	8006bc6 <USB_EPStartXfer+0x68c>
 8006bbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bc0:	3301      	adds	r3, #1
 8006bc2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	029b      	lsls	r3, r3, #10
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bd2:	801a      	strh	r2, [r3, #0]
 8006bd4:	e038      	b.n	8006c48 <USB_EPStartXfer+0x70e>
 8006bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006be0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006be4:	f003 031f 	and.w	r3, r3, #31
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d104      	bne.n	8006bf6 <USB_EPStartXfer+0x6bc>
 8006bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8006bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	029b      	lsls	r3, r3, #10
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c08:	b29a      	uxth	r2, r3
 8006c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0c:	801a      	strh	r2, [r3, #0]
 8006c0e:	e01b      	b.n	8006c48 <USB_EPStartXfer+0x70e>
 8006c10:	463b      	mov	r3, r7
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d116      	bne.n	8006c48 <USB_EPStartXfer+0x70e>
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	461a      	mov	r2, r3
 8006c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c28:	4413      	add	r3, r2
 8006c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006c2c:	463b      	mov	r3, r7
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	00da      	lsls	r2, r3, #3
 8006c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c36:	4413      	add	r3, r2
 8006c38:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c46:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006c48:	463b      	mov	r3, r7
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	895b      	ldrh	r3, [r3, #10]
 8006c4e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c52:	463b      	mov	r3, r7
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	6959      	ldr	r1, [r3, #20]
 8006c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006c62:	1d38      	adds	r0, r7, #4
 8006c64:	6800      	ldr	r0, [r0, #0]
 8006c66:	f001 f899 	bl	8007d9c <USB_WritePMA>
 8006c6a:	e36c      	b.n	8007346 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006c6c:	463b      	mov	r3, r7
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8006c76:	1d3b      	adds	r3, r7, #4
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	463b      	mov	r3, r7
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	009b      	lsls	r3, r3, #2
 8006c82:	4413      	add	r3, r2
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29b      	uxth	r3, r3
 8006c88:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c90:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006c94:	1d3b      	adds	r3, r7, #4
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	463b      	mov	r3, r7
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	441a      	add	r2, r3
 8006ca2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006ca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006caa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006cba:	1d3b      	adds	r3, r7, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cc0:	1d3b      	adds	r3, r7, #4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	461a      	mov	r2, r3
 8006ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cce:	4413      	add	r3, r2
 8006cd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cd2:	463b      	mov	r3, r7
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	00da      	lsls	r2, r3, #3
 8006cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006cdc:	4413      	add	r3, r2
 8006cde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ce2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ce8:	b29a      	uxth	r2, r3
 8006cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cec:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006cee:	463b      	mov	r3, r7
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	891b      	ldrh	r3, [r3, #8]
 8006cf4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cf8:	463b      	mov	r3, r7
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6959      	ldr	r1, [r3, #20]
 8006cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006d08:	1d38      	adds	r0, r7, #4
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	f001 f846 	bl	8007d9c <USB_WritePMA>
 8006d10:	e319      	b.n	8007346 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8006d12:	1d3b      	adds	r3, r7, #4
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	463b      	mov	r3, r7
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4413      	add	r3, r2
 8006d20:	881b      	ldrh	r3, [r3, #0]
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d2c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8006d30:	1d3b      	adds	r3, r7, #4
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	463b      	mov	r3, r7
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8006d42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d4a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8006d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006d56:	463b      	mov	r3, r7
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6a1a      	ldr	r2, [r3, #32]
 8006d5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d60:	1ad2      	subs	r2, r2, r3
 8006d62:	463b      	mov	r3, r7
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006d68:	1d3b      	adds	r3, r7, #4
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	b29b      	uxth	r3, r3
 8006d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	f000 8162 	beq.w	8007048 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d84:	1d3b      	adds	r3, r7, #4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	785b      	ldrb	r3, [r3, #1]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d164      	bne.n	8006e60 <USB_EPStartXfer+0x926>
 8006d96:	1d3b      	adds	r3, r7, #4
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d9c:	1d3b      	adds	r3, r7, #4
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	461a      	mov	r2, r3
 8006da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006daa:	4413      	add	r3, r2
 8006dac:	67bb      	str	r3, [r7, #120]	; 0x78
 8006dae:	463b      	mov	r3, r7
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	00da      	lsls	r2, r3, #3
 8006db6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dbe:	677b      	str	r3, [r7, #116]	; 0x74
 8006dc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d112      	bne.n	8006dee <USB_EPStartXfer+0x8b4>
 8006dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dca:	881b      	ldrh	r3, [r3, #0]
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006dd2:	b29a      	uxth	r2, r3
 8006dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dd6:	801a      	strh	r2, [r3, #0]
 8006dd8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dda:	881b      	ldrh	r3, [r3, #0]
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006de2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006dea:	801a      	strh	r2, [r3, #0]
 8006dec:	e057      	b.n	8006e9e <USB_EPStartXfer+0x964>
 8006dee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df2:	2b3e      	cmp	r3, #62	; 0x3e
 8006df4:	d817      	bhi.n	8006e26 <USB_EPStartXfer+0x8ec>
 8006df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e04:	f003 0301 	and.w	r3, r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d004      	beq.n	8006e16 <USB_EPStartXfer+0x8dc>
 8006e0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e10:	3301      	adds	r3, #1
 8006e12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e16:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	029b      	lsls	r3, r3, #10
 8006e1e:	b29a      	uxth	r2, r3
 8006e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e22:	801a      	strh	r2, [r3, #0]
 8006e24:	e03b      	b.n	8006e9e <USB_EPStartXfer+0x964>
 8006e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e34:	f003 031f 	and.w	r3, r3, #31
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d104      	bne.n	8006e46 <USB_EPStartXfer+0x90c>
 8006e3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e40:	3b01      	subs	r3, #1
 8006e42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8006e46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	029b      	lsls	r3, r3, #10
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e5c:	801a      	strh	r2, [r3, #0]
 8006e5e:	e01e      	b.n	8006e9e <USB_EPStartXfer+0x964>
 8006e60:	463b      	mov	r3, r7
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	785b      	ldrb	r3, [r3, #1]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d119      	bne.n	8006e9e <USB_EPStartXfer+0x964>
 8006e6a:	1d3b      	adds	r3, r7, #4
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	461a      	mov	r2, r3
 8006e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e80:	463b      	mov	r3, r7
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	00da      	lsls	r2, r3, #3
 8006e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006e8c:	4413      	add	r3, r2
 8006e8e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e92:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006e9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8006e9e:	463b      	mov	r3, r7
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	895b      	ldrh	r3, [r3, #10]
 8006ea4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ea8:	463b      	mov	r3, r7
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6959      	ldr	r1, [r3, #20]
 8006eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eb2:	b29b      	uxth	r3, r3
 8006eb4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006eb8:	1d38      	adds	r0, r7, #4
 8006eba:	6800      	ldr	r0, [r0, #0]
 8006ebc:	f000 ff6e 	bl	8007d9c <USB_WritePMA>
          ep->xfer_buff += len;
 8006ec0:	463b      	mov	r3, r7
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	695a      	ldr	r2, [r3, #20]
 8006ec6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eca:	441a      	add	r2, r3
 8006ecc:	463b      	mov	r3, r7
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8006ed2:	463b      	mov	r3, r7
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a1a      	ldr	r2, [r3, #32]
 8006ed8:	463b      	mov	r3, r7
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d909      	bls.n	8006ef6 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8006ee2:	463b      	mov	r3, r7
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	6a1a      	ldr	r2, [r3, #32]
 8006ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006eec:	1ad2      	subs	r2, r2, r3
 8006eee:	463b      	mov	r3, r7
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	621a      	str	r2, [r3, #32]
 8006ef4:	e008      	b.n	8006f08 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8006ef6:	463b      	mov	r3, r7
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	6a1b      	ldr	r3, [r3, #32]
 8006efc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8006f00:	463b      	mov	r3, r7
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2200      	movs	r2, #0
 8006f06:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006f08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 821a 	beq.w	8007346 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006f12:	463b      	mov	r3, r7
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d164      	bne.n	8006fe6 <USB_EPStartXfer+0xaac>
 8006f1c:	1d3b      	adds	r3, r7, #4
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f22:	1d3b      	adds	r3, r7, #4
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f30:	4413      	add	r3, r2
 8006f32:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f34:	463b      	mov	r3, r7
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	00da      	lsls	r2, r3, #3
 8006f3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f3e:	4413      	add	r3, r2
 8006f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f44:	667b      	str	r3, [r7, #100]	; 0x64
 8006f46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d112      	bne.n	8006f74 <USB_EPStartXfer+0xa3a>
 8006f4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f50:	881b      	ldrh	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f5c:	801a      	strh	r2, [r3, #0]
 8006f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e057      	b.n	8007024 <USB_EPStartXfer+0xaea>
 8006f74:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f78:	2b3e      	cmp	r3, #62	; 0x3e
 8006f7a:	d817      	bhi.n	8006fac <USB_EPStartXfer+0xa72>
 8006f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f80:	085b      	lsrs	r3, r3, #1
 8006f82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d004      	beq.n	8006f9c <USB_EPStartXfer+0xa62>
 8006f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006f96:	3301      	adds	r3, #1
 8006f98:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	029b      	lsls	r3, r3, #10
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e03b      	b.n	8007024 <USB_EPStartXfer+0xaea>
 8006fac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006fb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006fba:	f003 031f 	and.w	r3, r3, #31
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d104      	bne.n	8006fcc <USB_EPStartXfer+0xa92>
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8006fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	029b      	lsls	r3, r3, #10
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fe2:	801a      	strh	r2, [r3, #0]
 8006fe4:	e01e      	b.n	8007024 <USB_EPStartXfer+0xaea>
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	785b      	ldrb	r3, [r3, #1]
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d119      	bne.n	8007024 <USB_EPStartXfer+0xaea>
 8006ff0:	1d3b      	adds	r3, r7, #4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	673b      	str	r3, [r7, #112]	; 0x70
 8006ff6:	1d3b      	adds	r3, r7, #4
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	461a      	mov	r2, r3
 8007002:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007004:	4413      	add	r3, r2
 8007006:	673b      	str	r3, [r7, #112]	; 0x70
 8007008:	463b      	mov	r3, r7
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	00da      	lsls	r2, r3, #3
 8007010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007012:	4413      	add	r3, r2
 8007014:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800701a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800701e:	b29a      	uxth	r2, r3
 8007020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007022:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007024:	463b      	mov	r3, r7
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	891b      	ldrh	r3, [r3, #8]
 800702a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800702e:	463b      	mov	r3, r7
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6959      	ldr	r1, [r3, #20]
 8007034:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007038:	b29b      	uxth	r3, r3
 800703a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800703e:	1d38      	adds	r0, r7, #4
 8007040:	6800      	ldr	r0, [r0, #0]
 8007042:	f000 feab 	bl	8007d9c <USB_WritePMA>
 8007046:	e17e      	b.n	8007346 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007048:	463b      	mov	r3, r7
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	785b      	ldrb	r3, [r3, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d16f      	bne.n	8007132 <USB_EPStartXfer+0xbf8>
 8007052:	1d3b      	adds	r3, r7, #4
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800705a:	1d3b      	adds	r3, r7, #4
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007062:	b29b      	uxth	r3, r3
 8007064:	461a      	mov	r2, r3
 8007066:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800706a:	4413      	add	r3, r2
 800706c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007070:	463b      	mov	r3, r7
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	00da      	lsls	r2, r3, #3
 8007078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800707c:	4413      	add	r3, r2
 800707e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007082:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d116      	bne.n	80070bc <USB_EPStartXfer+0xb82>
 800708e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007092:	881b      	ldrh	r3, [r3, #0]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800709a:	b29a      	uxth	r2, r3
 800709c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070a0:	801a      	strh	r2, [r3, #0]
 80070a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070a6:	881b      	ldrh	r3, [r3, #0]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070b8:	801a      	strh	r2, [r3, #0]
 80070ba:	e05f      	b.n	800717c <USB_EPStartXfer+0xc42>
 80070bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c0:	2b3e      	cmp	r3, #62	; 0x3e
 80070c2:	d818      	bhi.n	80070f6 <USB_EPStartXfer+0xbbc>
 80070c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070c8:	085b      	lsrs	r3, r3, #1
 80070ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070d2:	f003 0301 	and.w	r3, r3, #1
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <USB_EPStartXfer+0xbaa>
 80070da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070de:	3301      	adds	r3, #1
 80070e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80070e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	029b      	lsls	r3, r3, #10
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070f2:	801a      	strh	r2, [r3, #0]
 80070f4:	e042      	b.n	800717c <USB_EPStartXfer+0xc42>
 80070f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80070fa:	095b      	lsrs	r3, r3, #5
 80070fc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007100:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007104:	f003 031f 	and.w	r3, r3, #31
 8007108:	2b00      	cmp	r3, #0
 800710a:	d104      	bne.n	8007116 <USB_EPStartXfer+0xbdc>
 800710c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007110:	3b01      	subs	r3, #1
 8007112:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8007116:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800711a:	b29b      	uxth	r3, r3
 800711c:	029b      	lsls	r3, r3, #10
 800711e:	b29b      	uxth	r3, r3
 8007120:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007124:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007128:	b29a      	uxth	r2, r3
 800712a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e024      	b.n	800717c <USB_EPStartXfer+0xc42>
 8007132:	463b      	mov	r3, r7
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	785b      	ldrb	r3, [r3, #1]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d11f      	bne.n	800717c <USB_EPStartXfer+0xc42>
 800713c:	1d3b      	adds	r3, r7, #4
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007144:	1d3b      	adds	r3, r7, #4
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800714c:	b29b      	uxth	r3, r3
 800714e:	461a      	mov	r2, r3
 8007150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007154:	4413      	add	r3, r2
 8007156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800715a:	463b      	mov	r3, r7
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	00da      	lsls	r2, r3, #3
 8007162:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007166:	4413      	add	r3, r2
 8007168:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800716c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007170:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007174:	b29a      	uxth	r2, r3
 8007176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800717a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800717c:	463b      	mov	r3, r7
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	891b      	ldrh	r3, [r3, #8]
 8007182:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007186:	463b      	mov	r3, r7
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6959      	ldr	r1, [r3, #20]
 800718c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007190:	b29b      	uxth	r3, r3
 8007192:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8007196:	1d38      	adds	r0, r7, #4
 8007198:	6800      	ldr	r0, [r0, #0]
 800719a:	f000 fdff 	bl	8007d9c <USB_WritePMA>
          ep->xfer_buff += len;
 800719e:	463b      	mov	r3, r7
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071a8:	441a      	add	r2, r3
 80071aa:	463b      	mov	r3, r7
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80071b0:	463b      	mov	r3, r7
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6a1a      	ldr	r2, [r3, #32]
 80071b6:	463b      	mov	r3, r7
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d909      	bls.n	80071d4 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80071c0:	463b      	mov	r3, r7
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	6a1a      	ldr	r2, [r3, #32]
 80071c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ca:	1ad2      	subs	r2, r2, r3
 80071cc:	463b      	mov	r3, r7
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	621a      	str	r2, [r3, #32]
 80071d2:	e008      	b.n	80071e6 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80071d4:	463b      	mov	r3, r7
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80071de:	463b      	mov	r3, r7
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	2200      	movs	r2, #0
 80071e4:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80071e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 80ab 	beq.w	8007346 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80071f0:	1d3b      	adds	r3, r7, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071f8:	463b      	mov	r3, r7
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	785b      	ldrb	r3, [r3, #1]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d16f      	bne.n	80072e2 <USB_EPStartXfer+0xda8>
 8007202:	1d3b      	adds	r3, r7, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800720a:	1d3b      	adds	r3, r7, #4
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007212:	b29b      	uxth	r3, r3
 8007214:	461a      	mov	r2, r3
 8007216:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800721a:	4413      	add	r3, r2
 800721c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007220:	463b      	mov	r3, r7
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	00da      	lsls	r2, r3, #3
 8007228:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800722c:	4413      	add	r3, r2
 800722e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007232:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007236:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800723a:	2b00      	cmp	r3, #0
 800723c:	d116      	bne.n	800726c <USB_EPStartXfer+0xd32>
 800723e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007242:	881b      	ldrh	r3, [r3, #0]
 8007244:	b29b      	uxth	r3, r3
 8007246:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800724a:	b29a      	uxth	r2, r3
 800724c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007250:	801a      	strh	r2, [r3, #0]
 8007252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	b29b      	uxth	r3, r3
 800725a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007262:	b29a      	uxth	r2, r3
 8007264:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007268:	801a      	strh	r2, [r3, #0]
 800726a:	e05b      	b.n	8007324 <USB_EPStartXfer+0xdea>
 800726c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007270:	2b3e      	cmp	r3, #62	; 0x3e
 8007272:	d818      	bhi.n	80072a6 <USB_EPStartXfer+0xd6c>
 8007274:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007278:	085b      	lsrs	r3, r3, #1
 800727a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800727e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b00      	cmp	r3, #0
 8007288:	d004      	beq.n	8007294 <USB_EPStartXfer+0xd5a>
 800728a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800728e:	3301      	adds	r3, #1
 8007290:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007294:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007298:	b29b      	uxth	r3, r3
 800729a:	029b      	lsls	r3, r3, #10
 800729c:	b29a      	uxth	r2, r3
 800729e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072a2:	801a      	strh	r2, [r3, #0]
 80072a4:	e03e      	b.n	8007324 <USB_EPStartXfer+0xdea>
 80072a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072b4:	f003 031f 	and.w	r3, r3, #31
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d104      	bne.n	80072c6 <USB_EPStartXfer+0xd8c>
 80072bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072c0:	3b01      	subs	r3, #1
 80072c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80072c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	029b      	lsls	r3, r3, #10
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072de:	801a      	strh	r2, [r3, #0]
 80072e0:	e020      	b.n	8007324 <USB_EPStartXfer+0xdea>
 80072e2:	463b      	mov	r3, r7
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	785b      	ldrb	r3, [r3, #1]
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d11b      	bne.n	8007324 <USB_EPStartXfer+0xdea>
 80072ec:	1d3b      	adds	r3, r7, #4
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	461a      	mov	r2, r3
 80072f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80072fc:	4413      	add	r3, r2
 80072fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007302:	463b      	mov	r3, r7
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	781b      	ldrb	r3, [r3, #0]
 8007308:	00da      	lsls	r2, r3, #3
 800730a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800730e:	4413      	add	r3, r2
 8007310:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007314:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800731c:	b29a      	uxth	r2, r3
 800731e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007322:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007324:	463b      	mov	r3, r7
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	895b      	ldrh	r3, [r3, #10]
 800732a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800732e:	463b      	mov	r3, r7
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6959      	ldr	r1, [r3, #20]
 8007334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007338:	b29b      	uxth	r3, r3
 800733a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800733e:	1d38      	adds	r0, r7, #4
 8007340:	6800      	ldr	r0, [r0, #0]
 8007342:	f000 fd2b 	bl	8007d9c <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007346:	1d3b      	adds	r3, r7, #4
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	463b      	mov	r3, r7
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	881b      	ldrh	r3, [r3, #0]
 8007356:	b29b      	uxth	r3, r3
 8007358:	f107 020a 	add.w	r2, r7, #10
 800735c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007360:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007364:	8013      	strh	r3, [r2, #0]
 8007366:	f107 030a 	add.w	r3, r7, #10
 800736a:	f107 020a 	add.w	r2, r7, #10
 800736e:	8812      	ldrh	r2, [r2, #0]
 8007370:	f082 0210 	eor.w	r2, r2, #16
 8007374:	801a      	strh	r2, [r3, #0]
 8007376:	f107 030a 	add.w	r3, r7, #10
 800737a:	f107 020a 	add.w	r2, r7, #10
 800737e:	8812      	ldrh	r2, [r2, #0]
 8007380:	f082 0220 	eor.w	r2, r2, #32
 8007384:	801a      	strh	r2, [r3, #0]
 8007386:	1d3b      	adds	r3, r7, #4
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	463b      	mov	r3, r7
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	441a      	add	r2, r3
 8007394:	f107 030a 	add.w	r3, r7, #10
 8007398:	881b      	ldrh	r3, [r3, #0]
 800739a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800739e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	8013      	strh	r3, [r2, #0]
 80073ae:	e3b5      	b.n	8007b1c <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80073b0:	463b      	mov	r3, r7
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	7b1b      	ldrb	r3, [r3, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	f040 8090 	bne.w	80074dc <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80073bc:	463b      	mov	r3, r7
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	699a      	ldr	r2, [r3, #24]
 80073c2:	463b      	mov	r3, r7
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d90e      	bls.n	80073ea <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80073cc:	463b      	mov	r3, r7
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	691b      	ldr	r3, [r3, #16]
 80073d2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80073d6:	463b      	mov	r3, r7
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80073e0:	1ad2      	subs	r2, r2, r3
 80073e2:	463b      	mov	r3, r7
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	619a      	str	r2, [r3, #24]
 80073e8:	e008      	b.n	80073fc <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80073ea:	463b      	mov	r3, r7
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80073f4:	463b      	mov	r3, r7
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2200      	movs	r2, #0
 80073fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073fc:	1d3b      	adds	r3, r7, #4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007404:	1d3b      	adds	r3, r7, #4
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800740c:	b29b      	uxth	r3, r3
 800740e:	461a      	mov	r2, r3
 8007410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007414:	4413      	add	r3, r2
 8007416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800741a:	463b      	mov	r3, r7
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	00da      	lsls	r2, r3, #3
 8007422:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007426:	4413      	add	r3, r2
 8007428:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800742c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007430:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007434:	2b00      	cmp	r3, #0
 8007436:	d116      	bne.n	8007466 <USB_EPStartXfer+0xf2c>
 8007438:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007444:	b29a      	uxth	r2, r3
 8007446:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800744a:	801a      	strh	r2, [r3, #0]
 800744c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	b29b      	uxth	r3, r3
 8007454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800745c:	b29a      	uxth	r2, r3
 800745e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007462:	801a      	strh	r2, [r3, #0]
 8007464:	e32c      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
 8007466:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800746a:	2b3e      	cmp	r3, #62	; 0x3e
 800746c:	d818      	bhi.n	80074a0 <USB_EPStartXfer+0xf66>
 800746e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007478:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800747c:	f003 0301 	and.w	r3, r3, #1
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <USB_EPStartXfer+0xf54>
 8007484:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007488:	3301      	adds	r3, #1
 800748a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800748e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007492:	b29b      	uxth	r3, r3
 8007494:	029b      	lsls	r3, r3, #10
 8007496:	b29a      	uxth	r2, r3
 8007498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800749c:	801a      	strh	r2, [r3, #0]
 800749e:	e30f      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
 80074a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074a4:	095b      	lsrs	r3, r3, #5
 80074a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80074aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80074ae:	f003 031f 	and.w	r3, r3, #31
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d104      	bne.n	80074c0 <USB_EPStartXfer+0xf86>
 80074b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ba:	3b01      	subs	r3, #1
 80074bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80074c0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	029b      	lsls	r3, r3, #10
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074d8:	801a      	strh	r2, [r3, #0]
 80074da:	e2f1      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074dc:	463b      	mov	r3, r7
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	78db      	ldrb	r3, [r3, #3]
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	f040 818f 	bne.w	8007806 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80074e8:	463b      	mov	r3, r7
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	785b      	ldrb	r3, [r3, #1]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d175      	bne.n	80075de <USB_EPStartXfer+0x10a4>
 80074f2:	1d3b      	adds	r3, r7, #4
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074fa:	1d3b      	adds	r3, r7, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007502:	b29b      	uxth	r3, r3
 8007504:	461a      	mov	r2, r3
 8007506:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800750a:	4413      	add	r3, r2
 800750c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007510:	463b      	mov	r3, r7
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	00da      	lsls	r2, r3, #3
 8007518:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800751c:	4413      	add	r3, r2
 800751e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007522:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007526:	463b      	mov	r3, r7
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	691b      	ldr	r3, [r3, #16]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d116      	bne.n	800755e <USB_EPStartXfer+0x1024>
 8007530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007534:	881b      	ldrh	r3, [r3, #0]
 8007536:	b29b      	uxth	r3, r3
 8007538:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800753c:	b29a      	uxth	r2, r3
 800753e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007542:	801a      	strh	r2, [r3, #0]
 8007544:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	b29b      	uxth	r3, r3
 800754c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007554:	b29a      	uxth	r2, r3
 8007556:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	e065      	b.n	800762a <USB_EPStartXfer+0x10f0>
 800755e:	463b      	mov	r3, r7
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b3e      	cmp	r3, #62	; 0x3e
 8007566:	d81a      	bhi.n	800759e <USB_EPStartXfer+0x1064>
 8007568:	463b      	mov	r3, r7
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	085b      	lsrs	r3, r3, #1
 8007570:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007574:	463b      	mov	r3, r7
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b00      	cmp	r3, #0
 8007580:	d004      	beq.n	800758c <USB_EPStartXfer+0x1052>
 8007582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800758c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007590:	b29b      	uxth	r3, r3
 8007592:	029b      	lsls	r3, r3, #10
 8007594:	b29a      	uxth	r2, r3
 8007596:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	e045      	b.n	800762a <USB_EPStartXfer+0x10f0>
 800759e:	463b      	mov	r3, r7
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	691b      	ldr	r3, [r3, #16]
 80075a4:	095b      	lsrs	r3, r3, #5
 80075a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075aa:	463b      	mov	r3, r7
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	f003 031f 	and.w	r3, r3, #31
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <USB_EPStartXfer+0x1088>
 80075b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075bc:	3b01      	subs	r3, #1
 80075be:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80075c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	029b      	lsls	r3, r3, #10
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075da:	801a      	strh	r2, [r3, #0]
 80075dc:	e025      	b.n	800762a <USB_EPStartXfer+0x10f0>
 80075de:	463b      	mov	r3, r7
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	785b      	ldrb	r3, [r3, #1]
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d120      	bne.n	800762a <USB_EPStartXfer+0x10f0>
 80075e8:	1d3b      	adds	r3, r7, #4
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80075f0:	1d3b      	adds	r3, r7, #4
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	461a      	mov	r2, r3
 80075fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007600:	4413      	add	r3, r2
 8007602:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007606:	463b      	mov	r3, r7
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	00da      	lsls	r2, r3, #3
 800760e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007612:	4413      	add	r3, r2
 8007614:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007618:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800761c:	463b      	mov	r3, r7
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	b29a      	uxth	r2, r3
 8007624:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007628:	801a      	strh	r2, [r3, #0]
 800762a:	1d3b      	adds	r3, r7, #4
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007632:	463b      	mov	r3, r7
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d175      	bne.n	8007728 <USB_EPStartXfer+0x11ee>
 800763c:	1d3b      	adds	r3, r7, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007644:	1d3b      	adds	r3, r7, #4
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800764c:	b29b      	uxth	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007654:	4413      	add	r3, r2
 8007656:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800765a:	463b      	mov	r3, r7
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	00da      	lsls	r2, r3, #3
 8007662:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007666:	4413      	add	r3, r2
 8007668:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800766c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007670:	463b      	mov	r3, r7
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d116      	bne.n	80076a8 <USB_EPStartXfer+0x116e>
 800767a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800767e:	881b      	ldrh	r3, [r3, #0]
 8007680:	b29b      	uxth	r3, r3
 8007682:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007686:	b29a      	uxth	r2, r3
 8007688:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800768c:	801a      	strh	r2, [r3, #0]
 800768e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	b29b      	uxth	r3, r3
 8007696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800769a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800769e:	b29a      	uxth	r2, r3
 80076a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076a4:	801a      	strh	r2, [r3, #0]
 80076a6:	e061      	b.n	800776c <USB_EPStartXfer+0x1232>
 80076a8:	463b      	mov	r3, r7
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b3e      	cmp	r3, #62	; 0x3e
 80076b0:	d81a      	bhi.n	80076e8 <USB_EPStartXfer+0x11ae>
 80076b2:	463b      	mov	r3, r7
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	085b      	lsrs	r3, r3, #1
 80076ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076be:	463b      	mov	r3, r7
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d004      	beq.n	80076d6 <USB_EPStartXfer+0x119c>
 80076cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076d0:	3301      	adds	r3, #1
 80076d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80076da:	b29b      	uxth	r3, r3
 80076dc:	029b      	lsls	r3, r3, #10
 80076de:	b29a      	uxth	r2, r3
 80076e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	e041      	b.n	800776c <USB_EPStartXfer+0x1232>
 80076e8:	463b      	mov	r3, r7
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	095b      	lsrs	r3, r3, #5
 80076f0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80076f4:	463b      	mov	r3, r7
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d104      	bne.n	800770c <USB_EPStartXfer+0x11d2>
 8007702:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007706:	3b01      	subs	r3, #1
 8007708:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800770c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007710:	b29b      	uxth	r3, r3
 8007712:	029b      	lsls	r3, r3, #10
 8007714:	b29b      	uxth	r3, r3
 8007716:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800771a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771e:	b29a      	uxth	r2, r3
 8007720:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007724:	801a      	strh	r2, [r3, #0]
 8007726:	e021      	b.n	800776c <USB_EPStartXfer+0x1232>
 8007728:	463b      	mov	r3, r7
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	785b      	ldrb	r3, [r3, #1]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d11c      	bne.n	800776c <USB_EPStartXfer+0x1232>
 8007732:	1d3b      	adds	r3, r7, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800773a:	b29b      	uxth	r3, r3
 800773c:	461a      	mov	r2, r3
 800773e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007742:	4413      	add	r3, r2
 8007744:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007748:	463b      	mov	r3, r7
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	00da      	lsls	r2, r3, #3
 8007750:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007754:	4413      	add	r3, r2
 8007756:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800775a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800775e:	463b      	mov	r3, r7
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	b29a      	uxth	r2, r3
 8007766:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800776a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800776c:	463b      	mov	r3, r7
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	69db      	ldr	r3, [r3, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	f000 81a4 	beq.w	8007ac0 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007778:	1d3b      	adds	r3, r7, #4
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	463b      	mov	r3, r7
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	881b      	ldrh	r3, [r3, #0]
 8007788:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800778c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8007790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d005      	beq.n	80077a4 <USB_EPStartXfer+0x126a>
 8007798:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800779c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d10d      	bne.n	80077c0 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f040 8187 	bne.w	8007ac0 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80077b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80077b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	f040 8180 	bne.w	8007ac0 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80077c0:	1d3b      	adds	r3, r7, #4
 80077c2:	681a      	ldr	r2, [r3, #0]
 80077c4:	463b      	mov	r3, r7
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	009b      	lsls	r3, r3, #2
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077da:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80077de:	1d3b      	adds	r3, r7, #4
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	463b      	mov	r3, r7
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	009b      	lsls	r3, r3, #2
 80077ea:	441a      	add	r2, r3
 80077ec:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80077f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077fc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007800:	b29b      	uxth	r3, r3
 8007802:	8013      	strh	r3, [r2, #0]
 8007804:	e15c      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007806:	463b      	mov	r3, r7
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	78db      	ldrb	r3, [r3, #3]
 800780c:	2b01      	cmp	r3, #1
 800780e:	f040 8155 	bne.w	8007abc <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007812:	463b      	mov	r3, r7
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	699a      	ldr	r2, [r3, #24]
 8007818:	463b      	mov	r3, r7
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	429a      	cmp	r2, r3
 8007820:	d90e      	bls.n	8007840 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8007822:	463b      	mov	r3, r7
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800782c:	463b      	mov	r3, r7
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007836:	1ad2      	subs	r2, r2, r3
 8007838:	463b      	mov	r3, r7
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	619a      	str	r2, [r3, #24]
 800783e:	e008      	b.n	8007852 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8007840:	463b      	mov	r3, r7
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800784a:	463b      	mov	r3, r7
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2200      	movs	r2, #0
 8007850:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007852:	463b      	mov	r3, r7
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	785b      	ldrb	r3, [r3, #1]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d16f      	bne.n	800793c <USB_EPStartXfer+0x1402>
 800785c:	1d3b      	adds	r3, r7, #4
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007864:	1d3b      	adds	r3, r7, #4
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800786c:	b29b      	uxth	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007874:	4413      	add	r3, r2
 8007876:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800787a:	463b      	mov	r3, r7
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	00da      	lsls	r2, r3, #3
 8007882:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007886:	4413      	add	r3, r2
 8007888:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800788c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007890:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007894:	2b00      	cmp	r3, #0
 8007896:	d116      	bne.n	80078c6 <USB_EPStartXfer+0x138c>
 8007898:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078aa:	801a      	strh	r2, [r3, #0]
 80078ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078bc:	b29a      	uxth	r2, r3
 80078be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078c2:	801a      	strh	r2, [r3, #0]
 80078c4:	e05f      	b.n	8007986 <USB_EPStartXfer+0x144c>
 80078c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ca:	2b3e      	cmp	r3, #62	; 0x3e
 80078cc:	d818      	bhi.n	8007900 <USB_EPStartXfer+0x13c6>
 80078ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d2:	085b      	lsrs	r3, r3, #1
 80078d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <USB_EPStartXfer+0x13b4>
 80078e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078e8:	3301      	adds	r3, #1
 80078ea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80078ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	029b      	lsls	r3, r3, #10
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80078fc:	801a      	strh	r2, [r3, #0]
 80078fe:	e042      	b.n	8007986 <USB_EPStartXfer+0x144c>
 8007900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007904:	095b      	lsrs	r3, r3, #5
 8007906:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790e:	f003 031f 	and.w	r3, r3, #31
 8007912:	2b00      	cmp	r3, #0
 8007914:	d104      	bne.n	8007920 <USB_EPStartXfer+0x13e6>
 8007916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800791a:	3b01      	subs	r3, #1
 800791c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007924:	b29b      	uxth	r3, r3
 8007926:	029b      	lsls	r3, r3, #10
 8007928:	b29b      	uxth	r3, r3
 800792a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800792e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007932:	b29a      	uxth	r2, r3
 8007934:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007938:	801a      	strh	r2, [r3, #0]
 800793a:	e024      	b.n	8007986 <USB_EPStartXfer+0x144c>
 800793c:	463b      	mov	r3, r7
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	785b      	ldrb	r3, [r3, #1]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d11f      	bne.n	8007986 <USB_EPStartXfer+0x144c>
 8007946:	1d3b      	adds	r3, r7, #4
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800794e:	1d3b      	adds	r3, r7, #4
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007956:	b29b      	uxth	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800795e:	4413      	add	r3, r2
 8007960:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007964:	463b      	mov	r3, r7
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	00da      	lsls	r2, r3, #3
 800796c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007970:	4413      	add	r3, r2
 8007972:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007976:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800797a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800797e:	b29a      	uxth	r2, r3
 8007980:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007984:	801a      	strh	r2, [r3, #0]
 8007986:	1d3b      	adds	r3, r7, #4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800798e:	463b      	mov	r3, r7
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d16f      	bne.n	8007a78 <USB_EPStartXfer+0x153e>
 8007998:	1d3b      	adds	r3, r7, #4
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079a0:	1d3b      	adds	r3, r7, #4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079b0:	4413      	add	r3, r2
 80079b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079b6:	463b      	mov	r3, r7
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	00da      	lsls	r2, r3, #3
 80079be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c2:	4413      	add	r3, r2
 80079c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d116      	bne.n	8007a02 <USB_EPStartXfer+0x14c8>
 80079d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e6:	801a      	strh	r2, [r3, #0]
 80079e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80079f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079fe:	801a      	strh	r2, [r3, #0]
 8007a00:	e05e      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
 8007a02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a06:	2b3e      	cmp	r3, #62	; 0x3e
 8007a08:	d818      	bhi.n	8007a3c <USB_EPStartXfer+0x1502>
 8007a0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <USB_EPStartXfer+0x14f0>
 8007a20:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a24:	3301      	adds	r3, #1
 8007a26:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	029b      	lsls	r3, r3, #10
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a38:	801a      	strh	r2, [r3, #0]
 8007a3a:	e041      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
 8007a3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a40:	095b      	lsrs	r3, r3, #5
 8007a42:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007a4a:	f003 031f 	and.w	r3, r3, #31
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d104      	bne.n	8007a5c <USB_EPStartXfer+0x1522>
 8007a52:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a56:	3b01      	subs	r3, #1
 8007a58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007a5c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	029b      	lsls	r3, r3, #10
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a74:	801a      	strh	r2, [r3, #0]
 8007a76:	e023      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
 8007a78:	463b      	mov	r3, r7
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	785b      	ldrb	r3, [r3, #1]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d11e      	bne.n	8007ac0 <USB_EPStartXfer+0x1586>
 8007a82:	1d3b      	adds	r3, r7, #4
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a92:	4413      	add	r3, r2
 8007a94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007a98:	463b      	mov	r3, r7
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	00da      	lsls	r2, r3, #3
 8007aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007aaa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ab2:	b29a      	uxth	r2, r3
 8007ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ab8:	801a      	strh	r2, [r3, #0]
 8007aba:	e001      	b.n	8007ac0 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8007abc:	2301      	movs	r3, #1
 8007abe:	e02e      	b.n	8007b1e <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007ac0:	1d3b      	adds	r3, r7, #4
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	463b      	mov	r3, r7
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	4413      	add	r3, r2
 8007ace:	881b      	ldrh	r3, [r3, #0]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ada:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007ade:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007ae2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007ae6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007aea:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007aee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007af2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8007af6:	1d3b      	adds	r3, r7, #4
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	463b      	mov	r3, r7
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	441a      	add	r2, r3
 8007b04:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8007b08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007b1c:	2300      	movs	r3, #0
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	785b      	ldrb	r3, [r3, #1]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d020      	beq.n	8007b7c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b50:	81bb      	strh	r3, [r7, #12]
 8007b52:	89bb      	ldrh	r3, [r7, #12]
 8007b54:	f083 0310 	eor.w	r3, r3, #16
 8007b58:	81bb      	strh	r3, [r7, #12]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	781b      	ldrb	r3, [r3, #0]
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	441a      	add	r2, r3
 8007b64:	89bb      	ldrh	r3, [r7, #12]
 8007b66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	8013      	strh	r3, [r2, #0]
 8007b7a:	e01f      	b.n	8007bbc <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007b7c:	687a      	ldr	r2, [r7, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4413      	add	r3, r2
 8007b86:	881b      	ldrh	r3, [r3, #0]
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b92:	81fb      	strh	r3, [r7, #14]
 8007b94:	89fb      	ldrh	r3, [r7, #14]
 8007b96:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b9a:	81fb      	strh	r3, [r7, #14]
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	009b      	lsls	r3, r3, #2
 8007ba4:	441a      	add	r2, r3
 8007ba6:	89fb      	ldrh	r3, [r7, #14]
 8007ba8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3714      	adds	r7, #20
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc8:	4770      	bx	lr

08007bca <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007bca:	b480      	push	{r7}
 8007bcc:	b087      	sub	sp, #28
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	7b1b      	ldrb	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f040 809d 	bne.w	8007d18 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	785b      	ldrb	r3, [r3, #1]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d04c      	beq.n	8007c80 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	781b      	ldrb	r3, [r3, #0]
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	823b      	strh	r3, [r7, #16]
 8007bf4:	8a3b      	ldrh	r3, [r7, #16]
 8007bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d01b      	beq.n	8007c36 <USB_EPClearStall+0x6c>
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	4413      	add	r3, r2
 8007c08:	881b      	ldrh	r3, [r3, #0]
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c14:	81fb      	strh	r3, [r7, #14]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	441a      	add	r2, r3
 8007c20:	89fb      	ldrh	r3, [r7, #14]
 8007c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	78db      	ldrb	r3, [r3, #3]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d06c      	beq.n	8007d18 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	4413      	add	r3, r2
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c54:	81bb      	strh	r3, [r7, #12]
 8007c56:	89bb      	ldrh	r3, [r7, #12]
 8007c58:	f083 0320 	eor.w	r3, r3, #32
 8007c5c:	81bb      	strh	r3, [r7, #12]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	441a      	add	r2, r3
 8007c68:	89bb      	ldrh	r3, [r7, #12]
 8007c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	8013      	strh	r3, [r2, #0]
 8007c7e:	e04b      	b.n	8007d18 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c80:	687a      	ldr	r2, [r7, #4]
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	881b      	ldrh	r3, [r3, #0]
 8007c8c:	82fb      	strh	r3, [r7, #22]
 8007c8e:	8afb      	ldrh	r3, [r7, #22]
 8007c90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01b      	beq.n	8007cd0 <USB_EPClearStall+0x106>
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cae:	82bb      	strh	r3, [r7, #20]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	8abb      	ldrh	r3, [r7, #20]
 8007cbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	881b      	ldrh	r3, [r3, #0]
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ce6:	827b      	strh	r3, [r7, #18]
 8007ce8:	8a7b      	ldrh	r3, [r7, #18]
 8007cea:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007cee:	827b      	strh	r3, [r7, #18]
 8007cf0:	8a7b      	ldrh	r3, [r7, #18]
 8007cf2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007cf6:	827b      	strh	r3, [r7, #18]
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	441a      	add	r2, r3
 8007d02:	8a7b      	ldrh	r3, [r7, #18]
 8007d04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	460b      	mov	r3, r1
 8007d30:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d103      	bne.n	8007d40 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2280      	movs	r2, #128	; 0x80
 8007d3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b08d      	sub	sp, #52	; 0x34
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	60f8      	str	r0, [r7, #12]
 8007da4:	60b9      	str	r1, [r7, #8]
 8007da6:	4611      	mov	r1, r2
 8007da8:	461a      	mov	r2, r3
 8007daa:	460b      	mov	r3, r1
 8007dac:	80fb      	strh	r3, [r7, #6]
 8007dae:	4613      	mov	r3, r2
 8007db0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007db2:	88bb      	ldrh	r3, [r7, #4]
 8007db4:	3301      	adds	r3, #1
 8007db6:	085b      	lsrs	r3, r3, #1
 8007db8:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007dc2:	88fa      	ldrh	r2, [r7, #6]
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dcc:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dd2:	e01b      	b.n	8007e0c <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	3301      	adds	r3, #1
 8007dde:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	461a      	mov	r2, r3
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	b29a      	uxth	r2, r3
 8007df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df8:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfc:	3302      	adds	r3, #2
 8007dfe:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	3301      	adds	r3, #1
 8007e04:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1e0      	bne.n	8007dd4 <USB_WritePMA+0x38>
  }
}
 8007e12:	bf00      	nop
 8007e14:	bf00      	nop
 8007e16:	3734      	adds	r7, #52	; 0x34
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b08b      	sub	sp, #44	; 0x2c
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	4611      	mov	r1, r2
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	460b      	mov	r3, r1
 8007e30:	80fb      	strh	r3, [r7, #6]
 8007e32:	4613      	mov	r3, r2
 8007e34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007e36:	88bb      	ldrh	r3, [r7, #4]
 8007e38:	085b      	lsrs	r3, r3, #1
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007e46:	88fa      	ldrh	r2, [r7, #6]
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007e50:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007e52:	69bb      	ldr	r3, [r7, #24]
 8007e54:	627b      	str	r3, [r7, #36]	; 0x24
 8007e56:	e018      	b.n	8007e8a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007e58:	6a3b      	ldr	r3, [r7, #32]
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8007e60:	6a3b      	ldr	r3, [r7, #32]
 8007e62:	3302      	adds	r3, #2
 8007e64:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	3301      	adds	r3, #1
 8007e72:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	0a1b      	lsrs	r3, r3, #8
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	3301      	adds	r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	3b01      	subs	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1e3      	bne.n	8007e58 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8007e90:	88bb      	ldrh	r3, [r7, #4]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	881b      	ldrh	r3, [r3, #0]
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	b2da      	uxtb	r2, r3
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	701a      	strb	r2, [r3, #0]
  }
}
 8007eac:	bf00      	nop
 8007eae:	372c      	adds	r7, #44	; 0x2c
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007ec4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007ec8:	f002 f8ec 	bl	800a0a4 <USBD_static_malloc>
 8007ecc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007edc:	2302      	movs	r3, #2
 8007ede:	e066      	b.n	8007fae <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	7c1b      	ldrb	r3, [r3, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d119      	bne.n	8007f24 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007ef0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ef4:	2202      	movs	r2, #2
 8007ef6:	2181      	movs	r1, #129	; 0x81
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f001 ff78 	bl	8009dee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f08:	2202      	movs	r2, #2
 8007f0a:	2101      	movs	r1, #1
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f001 ff6e 	bl	8009dee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2201      	movs	r2, #1
 8007f16:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2210      	movs	r2, #16
 8007f1e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f22:	e016      	b.n	8007f52 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f24:	2340      	movs	r3, #64	; 0x40
 8007f26:	2202      	movs	r2, #2
 8007f28:	2181      	movs	r1, #129	; 0x81
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f001 ff5f 	bl	8009dee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2201      	movs	r2, #1
 8007f34:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f36:	2340      	movs	r3, #64	; 0x40
 8007f38:	2202      	movs	r2, #2
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 ff56 	bl	8009dee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2210      	movs	r2, #16
 8007f4e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007f52:	2308      	movs	r3, #8
 8007f54:	2203      	movs	r2, #3
 8007f56:	2182      	movs	r1, #130	; 0x82
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 ff48 	bl	8009dee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2201      	movs	r2, #1
 8007f62:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	7c1b      	ldrb	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d109      	bne.n	8007f9c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f92:	2101      	movs	r1, #1
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f002 f81a 	bl	8009fce <USBD_LL_PrepareReceive>
 8007f9a:	e007      	b.n	8007fac <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fa2:	2340      	movs	r3, #64	; 0x40
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f002 f811 	bl	8009fce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3710      	adds	r7, #16
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}

08007fb6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fb6:	b580      	push	{r7, lr}
 8007fb8:	b082      	sub	sp, #8
 8007fba:	af00      	add	r7, sp, #0
 8007fbc:	6078      	str	r0, [r7, #4]
 8007fbe:	460b      	mov	r3, r1
 8007fc0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007fc2:	2181      	movs	r1, #129	; 0x81
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f001 ff38 	bl	8009e3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f001 ff31 	bl	8009e3a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007fe0:	2182      	movs	r1, #130	; 0x82
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 ff29 	bl	8009e3a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d00e      	beq.n	8008020 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008012:	4618      	mov	r0, r3
 8008014:	f002 f854 	bl	800a0c0 <USBD_static_free>
    pdev->pClassData = NULL;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3708      	adds	r7, #8
 8008026:	46bd      	mov	sp, r7
 8008028:	bd80      	pop	{r7, pc}
	...

0800802c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800803c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800803e:	2300      	movs	r3, #0
 8008040:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008046:	2300      	movs	r3, #0
 8008048:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8008050:	2303      	movs	r3, #3
 8008052:	e0af      	b.n	80081b4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800805c:	2b00      	cmp	r3, #0
 800805e:	d03f      	beq.n	80080e0 <USBD_CDC_Setup+0xb4>
 8008060:	2b20      	cmp	r3, #32
 8008062:	f040 809f 	bne.w	80081a4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	88db      	ldrh	r3, [r3, #6]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d02e      	beq.n	80080cc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b25b      	sxtb	r3, r3
 8008074:	2b00      	cmp	r3, #0
 8008076:	da16      	bge.n	80080a6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	683a      	ldr	r2, [r7, #0]
 8008082:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008084:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	88d2      	ldrh	r2, [r2, #6]
 800808a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	88db      	ldrh	r3, [r3, #6]
 8008090:	2b07      	cmp	r3, #7
 8008092:	bf28      	it	cs
 8008094:	2307      	movcs	r3, #7
 8008096:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	89fa      	ldrh	r2, [r7, #14]
 800809c:	4619      	mov	r1, r3
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f001 facf 	bl	8009642 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80080a4:	e085      	b.n	80081b2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	785a      	ldrb	r2, [r3, #1]
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	88db      	ldrh	r3, [r3, #6]
 80080b4:	b2da      	uxtb	r2, r3
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80080bc:	6939      	ldr	r1, [r7, #16]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	88db      	ldrh	r3, [r3, #6]
 80080c2:	461a      	mov	r2, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f001 fae8 	bl	800969a <USBD_CtlPrepareRx>
      break;
 80080ca:	e072      	b.n	80081b2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	7850      	ldrb	r0, [r2, #1]
 80080d8:	2200      	movs	r2, #0
 80080da:	6839      	ldr	r1, [r7, #0]
 80080dc:	4798      	blx	r3
      break;
 80080de:	e068      	b.n	80081b2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	785b      	ldrb	r3, [r3, #1]
 80080e4:	2b0b      	cmp	r3, #11
 80080e6:	d852      	bhi.n	800818e <USBD_CDC_Setup+0x162>
 80080e8:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <USBD_CDC_Setup+0xc4>)
 80080ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ee:	bf00      	nop
 80080f0:	08008121 	.word	0x08008121
 80080f4:	0800819d 	.word	0x0800819d
 80080f8:	0800818f 	.word	0x0800818f
 80080fc:	0800818f 	.word	0x0800818f
 8008100:	0800818f 	.word	0x0800818f
 8008104:	0800818f 	.word	0x0800818f
 8008108:	0800818f 	.word	0x0800818f
 800810c:	0800818f 	.word	0x0800818f
 8008110:	0800818f 	.word	0x0800818f
 8008114:	0800818f 	.word	0x0800818f
 8008118:	0800814b 	.word	0x0800814b
 800811c:	08008175 	.word	0x08008175
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008126:	b2db      	uxtb	r3, r3
 8008128:	2b03      	cmp	r3, #3
 800812a:	d107      	bne.n	800813c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800812c:	f107 030a 	add.w	r3, r7, #10
 8008130:	2202      	movs	r2, #2
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fa84 	bl	8009642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800813a:	e032      	b.n	80081a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f001 fa0e 	bl	8009560 <USBD_CtlError>
            ret = USBD_FAIL;
 8008144:	2303      	movs	r3, #3
 8008146:	75fb      	strb	r3, [r7, #23]
          break;
 8008148:	e02b      	b.n	80081a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d107      	bne.n	8008166 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008156:	f107 030d 	add.w	r3, r7, #13
 800815a:	2201      	movs	r2, #1
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f001 fa6f 	bl	8009642 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008164:	e01d      	b.n	80081a2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008166:	6839      	ldr	r1, [r7, #0]
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 f9f9 	bl	8009560 <USBD_CtlError>
            ret = USBD_FAIL;
 800816e:	2303      	movs	r3, #3
 8008170:	75fb      	strb	r3, [r7, #23]
          break;
 8008172:	e016      	b.n	80081a2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b03      	cmp	r3, #3
 800817e:	d00f      	beq.n	80081a0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008180:	6839      	ldr	r1, [r7, #0]
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f001 f9ec 	bl	8009560 <USBD_CtlError>
            ret = USBD_FAIL;
 8008188:	2303      	movs	r3, #3
 800818a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800818c:	e008      	b.n	80081a0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800818e:	6839      	ldr	r1, [r7, #0]
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f001 f9e5 	bl	8009560 <USBD_CtlError>
          ret = USBD_FAIL;
 8008196:	2303      	movs	r3, #3
 8008198:	75fb      	strb	r3, [r7, #23]
          break;
 800819a:	e002      	b.n	80081a2 <USBD_CDC_Setup+0x176>
          break;
 800819c:	bf00      	nop
 800819e:	e008      	b.n	80081b2 <USBD_CDC_Setup+0x186>
          break;
 80081a0:	bf00      	nop
      }
      break;
 80081a2:	e006      	b.n	80081b2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 f9da 	bl	8009560 <USBD_CtlError>
      ret = USBD_FAIL;
 80081ac:	2303      	movs	r3, #3
 80081ae:	75fb      	strb	r3, [r7, #23]
      break;
 80081b0:	bf00      	nop
  }

  return (uint8_t)ret;
 80081b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	460b      	mov	r3, r1
 80081c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80081ce:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80081da:	2303      	movs	r3, #3
 80081dc:	e04f      	b.n	800827e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	6879      	ldr	r1, [r7, #4]
 80081ea:	4613      	mov	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	4413      	add	r3, r2
 80081f0:	009b      	lsls	r3, r3, #2
 80081f2:	440b      	add	r3, r1
 80081f4:	3318      	adds	r3, #24
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d029      	beq.n	8008250 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80081fc:	78fa      	ldrb	r2, [r7, #3]
 80081fe:	6879      	ldr	r1, [r7, #4]
 8008200:	4613      	mov	r3, r2
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	440b      	add	r3, r1
 800820a:	3318      	adds	r3, #24
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	78f9      	ldrb	r1, [r7, #3]
 8008210:	68f8      	ldr	r0, [r7, #12]
 8008212:	460b      	mov	r3, r1
 8008214:	009b      	lsls	r3, r3, #2
 8008216:	440b      	add	r3, r1
 8008218:	00db      	lsls	r3, r3, #3
 800821a:	4403      	add	r3, r0
 800821c:	3338      	adds	r3, #56	; 0x38
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	fbb2 f1f3 	udiv	r1, r2, r3
 8008224:	fb03 f301 	mul.w	r3, r3, r1
 8008228:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800822a:	2b00      	cmp	r3, #0
 800822c:	d110      	bne.n	8008250 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	3318      	adds	r3, #24
 800823e:	2200      	movs	r2, #0
 8008240:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008242:	78f9      	ldrb	r1, [r7, #3]
 8008244:	2300      	movs	r3, #0
 8008246:	2200      	movs	r2, #0
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f001 fe9f 	bl	8009f8c <USBD_LL_Transmit>
 800824e:	e015      	b.n	800827c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800825e:	691b      	ldr	r3, [r3, #16]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d00b      	beq.n	800827c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800826a:	691b      	ldr	r3, [r3, #16]
 800826c:	68ba      	ldr	r2, [r7, #8]
 800826e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008272:	68ba      	ldr	r2, [r7, #8]
 8008274:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008278:	78fa      	ldrb	r2, [r7, #3]
 800827a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800827c:	2300      	movs	r3, #0
}
 800827e:	4618      	mov	r0, r3
 8008280:	3710      	adds	r7, #16
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]
 800828e:	460b      	mov	r3, r1
 8008290:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008298:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d101      	bne.n	80082a8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e015      	b.n	80082d4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082a8:	78fb      	ldrb	r3, [r7, #3]
 80082aa:	4619      	mov	r1, r3
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f001 feaf 	bl	800a010 <USBD_LL_GetRxDataSize>
 80082b2:	4602      	mov	r2, r0
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80082ce:	4611      	mov	r1, r2
 80082d0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082ea:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d101      	bne.n	80082f6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80082f2:	2303      	movs	r3, #3
 80082f4:	e01b      	b.n	800832e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d015      	beq.n	800832c <USBD_CDC_EP0_RxReady+0x50>
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008306:	2bff      	cmp	r3, #255	; 0xff
 8008308:	d010      	beq.n	800832c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	68fa      	ldr	r2, [r7, #12]
 8008314:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008318:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800831a:	68fa      	ldr	r2, [r7, #12]
 800831c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008320:	b292      	uxth	r2, r2
 8008322:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	22ff      	movs	r2, #255	; 0xff
 8008328:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
	...

08008338 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2243      	movs	r2, #67	; 0x43
 8008344:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008346:	4b03      	ldr	r3, [pc, #12]	; (8008354 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	200000e0 	.word	0x200000e0

08008358 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2243      	movs	r2, #67	; 0x43
 8008364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008366:	4b03      	ldr	r3, [pc, #12]	; (8008374 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008368:	4618      	mov	r0, r3
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr
 8008374:	2000009c 	.word	0x2000009c

08008378 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008378:	b480      	push	{r7}
 800837a:	b083      	sub	sp, #12
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2243      	movs	r2, #67	; 0x43
 8008384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008386:	4b03      	ldr	r3, [pc, #12]	; (8008394 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr
 8008394:	20000124 	.word	0x20000124

08008398 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	220a      	movs	r2, #10
 80083a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083a6:	4b03      	ldr	r3, [pc, #12]	; (80083b4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	20000058 	.word	0x20000058

080083b8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083c8:	2303      	movs	r3, #3
 80083ca:	e004      	b.n	80083d6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	683a      	ldr	r2, [r7, #0]
 80083d0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80083e2:	b480      	push	{r7}
 80083e4:	b087      	sub	sp, #28
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	60f8      	str	r0, [r7, #12]
 80083ea:	60b9      	str	r1, [r7, #8]
 80083ec:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083f4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d101      	bne.n	8008400 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80083fc:	2303      	movs	r3, #3
 80083fe:	e008      	b.n	8008412 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	68ba      	ldr	r2, [r7, #8]
 8008404:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	371c      	adds	r7, #28
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr

0800841e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800841e:	b480      	push	{r7}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800842e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8008436:	2303      	movs	r3, #3
 8008438:	e004      	b.n	8008444 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008442:	2300      	movs	r3, #0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3714      	adds	r7, #20
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr

08008450 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b084      	sub	sp, #16
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800845e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008460:	2301      	movs	r3, #1
 8008462:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800846e:	2303      	movs	r3, #3
 8008470:	e01a      	b.n	80084a8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008478:	2b00      	cmp	r3, #0
 800847a:	d114      	bne.n	80084a6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	2201      	movs	r2, #1
 8008480:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800849a:	2181      	movs	r1, #129	; 0x81
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f001 fd75 	bl	8009f8c <USBD_LL_Transmit>

    ret = USBD_OK;
 80084a2:	2300      	movs	r3, #0
 80084a4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80084a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3710      	adds	r7, #16
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80084ca:	2303      	movs	r3, #3
 80084cc:	e016      	b.n	80084fc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	7c1b      	ldrb	r3, [r3, #16]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d109      	bne.n	80084ea <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e0:	2101      	movs	r1, #1
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f001 fd73 	bl	8009fce <USBD_LL_PrepareReceive>
 80084e8:	e007      	b.n	80084fa <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084f0:	2340      	movs	r3, #64	; 0x40
 80084f2:	2101      	movs	r1, #1
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f001 fd6a 	bl	8009fce <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	4613      	mov	r3, r2
 8008510:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d101      	bne.n	800851c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008518:	2303      	movs	r3, #3
 800851a:	e01f      	b.n	800855c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2200      	movs	r2, #0
 8008530:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2201      	movs	r2, #1
 8008546:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	79fa      	ldrb	r2, [r7, #7]
 800854e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f001 fbd1 	bl	8009cf8 <USBD_LL_Init>
 8008556:	4603      	mov	r3, r0
 8008558:	75fb      	strb	r3, [r7, #23]

  return ret;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
}
 800855c:	4618      	mov	r0, r3
 800855e:	3718      	adds	r7, #24
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}

08008564 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008578:	2303      	movs	r3, #3
 800857a:	e016      	b.n	80085aa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	683a      	ldr	r2, [r7, #0]
 8008580:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00b      	beq.n	80085a8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	f107 020e 	add.w	r2, r7, #14
 800859c:	4610      	mov	r0, r2
 800859e:	4798      	blx	r3
 80085a0:	4602      	mov	r2, r0
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}

080085b2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b082      	sub	sp, #8
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f001 fbfc 	bl	8009db8 <USBD_LL_Start>
 80085c0:	4603      	mov	r3, r0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085ca:	b480      	push	{r7}
 80085cc:	b083      	sub	sp, #12
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085ec:	2303      	movs	r3, #3
 80085ee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d009      	beq.n	800860e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	78fa      	ldrb	r2, [r7, #3]
 8008604:	4611      	mov	r1, r2
 8008606:	6878      	ldr	r0, [r7, #4]
 8008608:	4798      	blx	r3
 800860a:	4603      	mov	r3, r0
 800860c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800860e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	460b      	mov	r3, r1
 8008622:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	78fa      	ldrb	r2, [r7, #3]
 8008638:	4611      	mov	r1, r2
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	4798      	blx	r3
  }

  return USBD_OK;
 800863e:	2300      	movs	r3, #0
}
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}

08008648 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
 8008650:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008658:	6839      	ldr	r1, [r7, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f000 ff46 	bl	80094ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800866e:	461a      	mov	r2, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2b02      	cmp	r3, #2
 8008682:	d01a      	beq.n	80086ba <USBD_LL_SetupStage+0x72>
 8008684:	2b02      	cmp	r3, #2
 8008686:	d822      	bhi.n	80086ce <USBD_LL_SetupStage+0x86>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d002      	beq.n	8008692 <USBD_LL_SetupStage+0x4a>
 800868c:	2b01      	cmp	r3, #1
 800868e:	d00a      	beq.n	80086a6 <USBD_LL_SetupStage+0x5e>
 8008690:	e01d      	b.n	80086ce <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9ee 	bl	8008a7c <USBD_StdDevReq>
 80086a0:	4603      	mov	r3, r0
 80086a2:	73fb      	strb	r3, [r7, #15]
      break;
 80086a4:	e020      	b.n	80086e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086ac:	4619      	mov	r1, r3
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fa52 	bl	8008b58 <USBD_StdItfReq>
 80086b4:	4603      	mov	r3, r0
 80086b6:	73fb      	strb	r3, [r7, #15]
      break;
 80086b8:	e016      	b.n	80086e8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80086c0:	4619      	mov	r1, r3
 80086c2:	6878      	ldr	r0, [r7, #4]
 80086c4:	f000 fa91 	bl	8008bea <USBD_StdEPReq>
 80086c8:	4603      	mov	r3, r0
 80086ca:	73fb      	strb	r3, [r7, #15]
      break;
 80086cc:	e00c      	b.n	80086e8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80086d4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 fbcb 	bl	8009e78 <USBD_LL_StallEP>
 80086e2:	4603      	mov	r3, r0
 80086e4:	73fb      	strb	r3, [r7, #15]
      break;
 80086e6:	bf00      	nop
  }

  return ret;
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ea:	4618      	mov	r0, r3
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b086      	sub	sp, #24
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	60f8      	str	r0, [r7, #12]
 80086fa:	460b      	mov	r3, r1
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008700:	7afb      	ldrb	r3, [r7, #11]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d138      	bne.n	8008778 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800870c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008714:	2b03      	cmp	r3, #3
 8008716:	d14a      	bne.n	80087ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	689a      	ldr	r2, [r3, #8]
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	429a      	cmp	r2, r3
 8008722:	d913      	bls.n	800874c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	689a      	ldr	r2, [r3, #8]
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	4293      	cmp	r3, r2
 800873c:	bf28      	it	cs
 800873e:	4613      	movcs	r3, r2
 8008740:	461a      	mov	r2, r3
 8008742:	6879      	ldr	r1, [r7, #4]
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f000 ffc5 	bl	80096d4 <USBD_CtlContinueRx>
 800874a:	e030      	b.n	80087ae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008752:	b2db      	uxtb	r3, r3
 8008754:	2b03      	cmp	r3, #3
 8008756:	d10b      	bne.n	8008770 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d005      	beq.n	8008770 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 ffc0 	bl	80096f6 <USBD_CtlSendStatus>
 8008776:	e01a      	b.n	80087ae <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800877e:	b2db      	uxtb	r3, r3
 8008780:	2b03      	cmp	r3, #3
 8008782:	d114      	bne.n	80087ae <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800878a:	699b      	ldr	r3, [r3, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00e      	beq.n	80087ae <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	699b      	ldr	r3, [r3, #24]
 8008798:	7afa      	ldrb	r2, [r7, #11]
 800879a:	4611      	mov	r1, r2
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	4798      	blx	r3
 80087a0:	4603      	mov	r3, r0
 80087a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80087a4:	7dfb      	ldrb	r3, [r7, #23]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	e000      	b.n	80087b0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3718      	adds	r7, #24
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	460b      	mov	r3, r1
 80087c2:	607a      	str	r2, [r7, #4]
 80087c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80087c6:	7afb      	ldrb	r3, [r7, #11]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d16b      	bne.n	80088a4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	3314      	adds	r3, #20
 80087d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d156      	bne.n	800888a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d914      	bls.n	8008812 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	689a      	ldr	r2, [r3, #8]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	68db      	ldr	r3, [r3, #12]
 80087f0:	1ad2      	subs	r2, r2, r3
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	461a      	mov	r2, r3
 80087fc:	6879      	ldr	r1, [r7, #4]
 80087fe:	68f8      	ldr	r0, [r7, #12]
 8008800:	f000 ff3a 	bl	8009678 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008804:	2300      	movs	r3, #0
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 fbdf 	bl	8009fce <USBD_LL_PrepareReceive>
 8008810:	e03b      	b.n	800888a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	68da      	ldr	r2, [r3, #12]
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	429a      	cmp	r2, r3
 800881c:	d11c      	bne.n	8008858 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	685a      	ldr	r2, [r3, #4]
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008826:	429a      	cmp	r2, r3
 8008828:	d316      	bcc.n	8008858 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008834:	429a      	cmp	r2, r3
 8008836:	d20f      	bcs.n	8008858 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008838:	2200      	movs	r2, #0
 800883a:	2100      	movs	r1, #0
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 ff1b 	bl	8009678 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2200      	movs	r2, #0
 8008846:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800884a:	2300      	movs	r3, #0
 800884c:	2200      	movs	r2, #0
 800884e:	2100      	movs	r1, #0
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f001 fbbc 	bl	8009fce <USBD_LL_PrepareReceive>
 8008856:	e018      	b.n	800888a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885e:	b2db      	uxtb	r3, r3
 8008860:	2b03      	cmp	r3, #3
 8008862:	d10b      	bne.n	800887c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d005      	beq.n	800887c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800887c:	2180      	movs	r1, #128	; 0x80
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f001 fafa 	bl	8009e78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 ff49 	bl	800971c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008890:	2b01      	cmp	r3, #1
 8008892:	d122      	bne.n	80088da <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff fe98 	bl	80085ca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	2200      	movs	r2, #0
 800889e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80088a2:	e01a      	b.n	80088da <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	2b03      	cmp	r3, #3
 80088ae:	d114      	bne.n	80088da <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b6:	695b      	ldr	r3, [r3, #20]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00e      	beq.n	80088da <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	7afa      	ldrb	r2, [r7, #11]
 80088c6:	4611      	mov	r1, r2
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	4798      	blx	r3
 80088cc:	4603      	mov	r3, r0
 80088ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80088d0:	7dfb      	ldrb	r3, [r7, #23]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d001      	beq.n	80088da <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	e000      	b.n	80088dc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2200      	movs	r2, #0
 8008906:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008910:	2b00      	cmp	r3, #0
 8008912:	d101      	bne.n	8008918 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	e02f      	b.n	8008978 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00f      	beq.n	8008942 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	6852      	ldr	r2, [r2, #4]
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	4611      	mov	r1, r2
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008942:	2340      	movs	r3, #64	; 0x40
 8008944:	2200      	movs	r2, #0
 8008946:	2100      	movs	r1, #0
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 fa50 	bl	8009dee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2201      	movs	r2, #1
 8008952:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2240      	movs	r2, #64	; 0x40
 800895a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800895e:	2340      	movs	r3, #64	; 0x40
 8008960:	2200      	movs	r2, #0
 8008962:	2180      	movs	r1, #128	; 0x80
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 fa42 	bl	8009dee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2201      	movs	r2, #1
 800896e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2240      	movs	r2, #64	; 0x40
 8008974:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008976:	2300      	movs	r3, #0
}
 8008978:	4618      	mov	r0, r3
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	78fa      	ldrb	r2, [r7, #3]
 8008990:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	370c      	adds	r7, #12
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr

080089a0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b083      	sub	sp, #12
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ae:	b2da      	uxtb	r2, r3
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2204      	movs	r2, #4
 80089ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b04      	cmp	r3, #4
 80089de:	d106      	bne.n	80089ee <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80089e6:	b2da      	uxtb	r2, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d101      	bne.n	8008a12 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008a0e:	2303      	movs	r3, #3
 8008a10:	e012      	b.n	8008a38 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b03      	cmp	r3, #3
 8008a1c:	d10b      	bne.n	8008a36 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a24:	69db      	ldr	r3, [r3, #28]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d005      	beq.n	8008a36 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a30:	69db      	ldr	r3, [r3, #28]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a36:	2300      	movs	r3, #0
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3708      	adds	r7, #8
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a40:	b480      	push	{r7}
 8008a42:	b087      	sub	sp, #28
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	781b      	ldrb	r3, [r3, #0]
 8008a50:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	3301      	adds	r3, #1
 8008a56:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a5e:	8a3b      	ldrh	r3, [r7, #16]
 8008a60:	021b      	lsls	r3, r3, #8
 8008a62:	b21a      	sxth	r2, r3
 8008a64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	b21b      	sxth	r3, r3
 8008a6c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a6e:	89fb      	ldrh	r3, [r7, #14]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	371c      	adds	r7, #28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a92:	2b40      	cmp	r3, #64	; 0x40
 8008a94:	d005      	beq.n	8008aa2 <USBD_StdDevReq+0x26>
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d853      	bhi.n	8008b42 <USBD_StdDevReq+0xc6>
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d00b      	beq.n	8008ab6 <USBD_StdDevReq+0x3a>
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d14f      	bne.n	8008b42 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	4798      	blx	r3
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab4:	e04a      	b.n	8008b4c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	785b      	ldrb	r3, [r3, #1]
 8008aba:	2b09      	cmp	r3, #9
 8008abc:	d83b      	bhi.n	8008b36 <USBD_StdDevReq+0xba>
 8008abe:	a201      	add	r2, pc, #4	; (adr r2, 8008ac4 <USBD_StdDevReq+0x48>)
 8008ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac4:	08008b19 	.word	0x08008b19
 8008ac8:	08008b2d 	.word	0x08008b2d
 8008acc:	08008b37 	.word	0x08008b37
 8008ad0:	08008b23 	.word	0x08008b23
 8008ad4:	08008b37 	.word	0x08008b37
 8008ad8:	08008af7 	.word	0x08008af7
 8008adc:	08008aed 	.word	0x08008aed
 8008ae0:	08008b37 	.word	0x08008b37
 8008ae4:	08008b0f 	.word	0x08008b0f
 8008ae8:	08008b01 	.word	0x08008b01
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008aec:	6839      	ldr	r1, [r7, #0]
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f9de 	bl	8008eb0 <USBD_GetDescriptor>
          break;
 8008af4:	e024      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008af6:	6839      	ldr	r1, [r7, #0]
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f000 fb6d 	bl	80091d8 <USBD_SetAddress>
          break;
 8008afe:	e01f      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 fbac 	bl	8009260 <USBD_SetConfig>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
          break;
 8008b0c:	e018      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fc4b 	bl	80093ac <USBD_GetConfig>
          break;
 8008b16:	e013      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 fc7c 	bl	8009418 <USBD_GetStatus>
          break;
 8008b20:	e00e      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fcab 	bl	8009480 <USBD_SetFeature>
          break;
 8008b2a:	e009      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fcba 	bl	80094a8 <USBD_ClrFeature>
          break;
 8008b34:	e004      	b.n	8008b40 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008b36:	6839      	ldr	r1, [r7, #0]
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fd11 	bl	8009560 <USBD_CtlError>
          break;
 8008b3e:	bf00      	nop
      }
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fd0b 	bl	8009560 <USBD_CtlError>
      break;
 8008b4a:	bf00      	nop
  }

  return ret;
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3710      	adds	r7, #16
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop

08008b58 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
 8008b60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	781b      	ldrb	r3, [r3, #0]
 8008b6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	d005      	beq.n	8008b7e <USBD_StdItfReq+0x26>
 8008b72:	2b40      	cmp	r3, #64	; 0x40
 8008b74:	d82f      	bhi.n	8008bd6 <USBD_StdItfReq+0x7e>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d001      	beq.n	8008b7e <USBD_StdItfReq+0x26>
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	d12b      	bne.n	8008bd6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d81d      	bhi.n	8008bc8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	889b      	ldrh	r3, [r3, #4]
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d813      	bhi.n	8008bbe <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4798      	blx	r3
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	88db      	ldrh	r3, [r3, #6]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d110      	bne.n	8008bd2 <USBD_StdItfReq+0x7a>
 8008bb0:	7bfb      	ldrb	r3, [r7, #15]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d10d      	bne.n	8008bd2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fd9d 	bl	80096f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008bbc:	e009      	b.n	8008bd2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fccd 	bl	8009560 <USBD_CtlError>
          break;
 8008bc6:	e004      	b.n	8008bd2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fcc8 	bl	8009560 <USBD_CtlError>
          break;
 8008bd0:	e000      	b.n	8008bd4 <USBD_StdItfReq+0x7c>
          break;
 8008bd2:	bf00      	nop
      }
      break;
 8008bd4:	e004      	b.n	8008be0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008bd6:	6839      	ldr	r1, [r7, #0]
 8008bd8:	6878      	ldr	r0, [r7, #4]
 8008bda:	f000 fcc1 	bl	8009560 <USBD_CtlError>
      break;
 8008bde:	bf00      	nop
  }

  return ret;
 8008be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bea:	b580      	push	{r7, lr}
 8008bec:	b084      	sub	sp, #16
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
 8008bf2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	889b      	ldrh	r3, [r3, #4]
 8008bfc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c06:	2b40      	cmp	r3, #64	; 0x40
 8008c08:	d007      	beq.n	8008c1a <USBD_StdEPReq+0x30>
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	f200 8145 	bhi.w	8008e9a <USBD_StdEPReq+0x2b0>
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00c      	beq.n	8008c2e <USBD_StdEPReq+0x44>
 8008c14:	2b20      	cmp	r3, #32
 8008c16:	f040 8140 	bne.w	8008e9a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	4798      	blx	r3
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e13a      	b.n	8008ea4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b03      	cmp	r3, #3
 8008c34:	d007      	beq.n	8008c46 <USBD_StdEPReq+0x5c>
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	f300 8129 	bgt.w	8008e8e <USBD_StdEPReq+0x2a4>
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d07f      	beq.n	8008d40 <USBD_StdEPReq+0x156>
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d03c      	beq.n	8008cbe <USBD_StdEPReq+0xd4>
 8008c44:	e123      	b.n	8008e8e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b02      	cmp	r3, #2
 8008c50:	d002      	beq.n	8008c58 <USBD_StdEPReq+0x6e>
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d016      	beq.n	8008c84 <USBD_StdEPReq+0x9a>
 8008c56:	e02c      	b.n	8008cb2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c58:	7bbb      	ldrb	r3, [r7, #14]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00d      	beq.n	8008c7a <USBD_StdEPReq+0x90>
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	2b80      	cmp	r3, #128	; 0x80
 8008c62:	d00a      	beq.n	8008c7a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c64:	7bbb      	ldrb	r3, [r7, #14]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 f905 	bl	8009e78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c6e:	2180      	movs	r1, #128	; 0x80
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 f901 	bl	8009e78 <USBD_LL_StallEP>
 8008c76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c78:	e020      	b.n	8008cbc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fc6f 	bl	8009560 <USBD_CtlError>
              break;
 8008c82:	e01b      	b.n	8008cbc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	885b      	ldrh	r3, [r3, #2]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10e      	bne.n	8008caa <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c8c:	7bbb      	ldrb	r3, [r7, #14]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d00b      	beq.n	8008caa <USBD_StdEPReq+0xc0>
 8008c92:	7bbb      	ldrb	r3, [r7, #14]
 8008c94:	2b80      	cmp	r3, #128	; 0x80
 8008c96:	d008      	beq.n	8008caa <USBD_StdEPReq+0xc0>
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	88db      	ldrh	r3, [r3, #6]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d104      	bne.n	8008caa <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ca0:	7bbb      	ldrb	r3, [r7, #14]
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f001 f8e7 	bl	8009e78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fd23 	bl	80096f6 <USBD_CtlSendStatus>

              break;
 8008cb0:	e004      	b.n	8008cbc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fc53 	bl	8009560 <USBD_CtlError>
              break;
 8008cba:	bf00      	nop
          }
          break;
 8008cbc:	e0ec      	b.n	8008e98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cc4:	b2db      	uxtb	r3, r3
 8008cc6:	2b02      	cmp	r3, #2
 8008cc8:	d002      	beq.n	8008cd0 <USBD_StdEPReq+0xe6>
 8008cca:	2b03      	cmp	r3, #3
 8008ccc:	d016      	beq.n	8008cfc <USBD_StdEPReq+0x112>
 8008cce:	e030      	b.n	8008d32 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00d      	beq.n	8008cf2 <USBD_StdEPReq+0x108>
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b80      	cmp	r3, #128	; 0x80
 8008cda:	d00a      	beq.n	8008cf2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f001 f8c9 	bl	8009e78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ce6:	2180      	movs	r1, #128	; 0x80
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 f8c5 	bl	8009e78 <USBD_LL_StallEP>
 8008cee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cf0:	e025      	b.n	8008d3e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008cf2:	6839      	ldr	r1, [r7, #0]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fc33 	bl	8009560 <USBD_CtlError>
              break;
 8008cfa:	e020      	b.n	8008d3e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	885b      	ldrh	r3, [r3, #2]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d11b      	bne.n	8008d3c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d004      	beq.n	8008d18 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d0e:	7bbb      	ldrb	r3, [r7, #14]
 8008d10:	4619      	mov	r1, r3
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f001 f8cf 	bl	8009eb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fcec 	bl	80096f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	4798      	blx	r3
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008d30:	e004      	b.n	8008d3c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fc13 	bl	8009560 <USBD_CtlError>
              break;
 8008d3a:	e000      	b.n	8008d3e <USBD_StdEPReq+0x154>
              break;
 8008d3c:	bf00      	nop
          }
          break;
 8008d3e:	e0ab      	b.n	8008e98 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d002      	beq.n	8008d52 <USBD_StdEPReq+0x168>
 8008d4c:	2b03      	cmp	r3, #3
 8008d4e:	d032      	beq.n	8008db6 <USBD_StdEPReq+0x1cc>
 8008d50:	e097      	b.n	8008e82 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d52:	7bbb      	ldrb	r3, [r7, #14]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d007      	beq.n	8008d68 <USBD_StdEPReq+0x17e>
 8008d58:	7bbb      	ldrb	r3, [r7, #14]
 8008d5a:	2b80      	cmp	r3, #128	; 0x80
 8008d5c:	d004      	beq.n	8008d68 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fbfd 	bl	8009560 <USBD_CtlError>
                break;
 8008d66:	e091      	b.n	8008e8c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	da0b      	bge.n	8008d88 <USBD_StdEPReq+0x19e>
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	3310      	adds	r3, #16
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4413      	add	r3, r2
 8008d84:	3304      	adds	r3, #4
 8008d86:	e00b      	b.n	8008da0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d8e:	4613      	mov	r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	4413      	add	r3, r2
 8008d94:	009b      	lsls	r3, r3, #2
 8008d96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d9a:	687a      	ldr	r2, [r7, #4]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3304      	adds	r3, #4
 8008da0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	2202      	movs	r2, #2
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fc47 	bl	8009642 <USBD_CtlSendData>
              break;
 8008db4:	e06a      	b.n	8008e8c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	da11      	bge.n	8008de2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dbe:	7bbb      	ldrb	r3, [r7, #14]
 8008dc0:	f003 020f 	and.w	r2, r3, #15
 8008dc4:	6879      	ldr	r1, [r7, #4]
 8008dc6:	4613      	mov	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4413      	add	r3, r2
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	440b      	add	r3, r1
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	881b      	ldrh	r3, [r3, #0]
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d117      	bne.n	8008e08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fbc0 	bl	8009560 <USBD_CtlError>
                  break;
 8008de0:	e054      	b.n	8008e8c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008de2:	7bbb      	ldrb	r3, [r7, #14]
 8008de4:	f003 020f 	and.w	r2, r3, #15
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	4413      	add	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008df8:	881b      	ldrh	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d104      	bne.n	8008e08 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008dfe:	6839      	ldr	r1, [r7, #0]
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fbad 	bl	8009560 <USBD_CtlError>
                  break;
 8008e06:	e041      	b.n	8008e8c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	da0b      	bge.n	8008e28 <USBD_StdEPReq+0x23e>
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e16:	4613      	mov	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4413      	add	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	3310      	adds	r3, #16
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	4413      	add	r3, r2
 8008e24:	3304      	adds	r3, #4
 8008e26:	e00b      	b.n	8008e40 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e2e:	4613      	mov	r3, r2
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4413      	add	r3, r2
 8008e34:	009b      	lsls	r3, r3, #2
 8008e36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	3304      	adds	r3, #4
 8008e40:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d002      	beq.n	8008e4e <USBD_StdEPReq+0x264>
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b80      	cmp	r3, #128	; 0x80
 8008e4c:	d103      	bne.n	8008e56 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2200      	movs	r2, #0
 8008e52:	601a      	str	r2, [r3, #0]
 8008e54:	e00e      	b.n	8008e74 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e56:	7bbb      	ldrb	r3, [r7, #14]
 8008e58:	4619      	mov	r1, r3
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f001 f84a 	bl	8009ef4 <USBD_LL_IsStallEP>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d003      	beq.n	8008e6e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	601a      	str	r2, [r3, #0]
 8008e6c:	e002      	b.n	8008e74 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	2200      	movs	r2, #0
 8008e72:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2202      	movs	r2, #2
 8008e78:	4619      	mov	r1, r3
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fbe1 	bl	8009642 <USBD_CtlSendData>
              break;
 8008e80:	e004      	b.n	8008e8c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8008e82:	6839      	ldr	r1, [r7, #0]
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 fb6b 	bl	8009560 <USBD_CtlError>
              break;
 8008e8a:	bf00      	nop
          }
          break;
 8008e8c:	e004      	b.n	8008e98 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fb65 	bl	8009560 <USBD_CtlError>
          break;
 8008e96:	bf00      	nop
      }
      break;
 8008e98:	e004      	b.n	8008ea4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fb5f 	bl	8009560 <USBD_CtlError>
      break;
 8008ea2:	bf00      	nop
  }

  return ret;
 8008ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3710      	adds	r7, #16
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
	...

08008eb0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eba:	2300      	movs	r3, #0
 8008ebc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	0a1b      	lsrs	r3, r3, #8
 8008ecc:	b29b      	uxth	r3, r3
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	2b0e      	cmp	r3, #14
 8008ed2:	f200 8152 	bhi.w	800917a <USBD_GetDescriptor+0x2ca>
 8008ed6:	a201      	add	r2, pc, #4	; (adr r2, 8008edc <USBD_GetDescriptor+0x2c>)
 8008ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008edc:	08008f4d 	.word	0x08008f4d
 8008ee0:	08008f65 	.word	0x08008f65
 8008ee4:	08008fa5 	.word	0x08008fa5
 8008ee8:	0800917b 	.word	0x0800917b
 8008eec:	0800917b 	.word	0x0800917b
 8008ef0:	0800911b 	.word	0x0800911b
 8008ef4:	08009147 	.word	0x08009147
 8008ef8:	0800917b 	.word	0x0800917b
 8008efc:	0800917b 	.word	0x0800917b
 8008f00:	0800917b 	.word	0x0800917b
 8008f04:	0800917b 	.word	0x0800917b
 8008f08:	0800917b 	.word	0x0800917b
 8008f0c:	0800917b 	.word	0x0800917b
 8008f10:	0800917b 	.word	0x0800917b
 8008f14:	08008f19 	.word	0x08008f19
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f1e:	69db      	ldr	r3, [r3, #28]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00b      	beq.n	8008f3c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f2a:	69db      	ldr	r3, [r3, #28]
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	7c12      	ldrb	r2, [r2, #16]
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	4610      	mov	r0, r2
 8008f36:	4798      	blx	r3
 8008f38:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f3a:	e126      	b.n	800918a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008f3c:	6839      	ldr	r1, [r7, #0]
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	f000 fb0e 	bl	8009560 <USBD_CtlError>
        err++;
 8008f44:	7afb      	ldrb	r3, [r7, #11]
 8008f46:	3301      	adds	r3, #1
 8008f48:	72fb      	strb	r3, [r7, #11]
      break;
 8008f4a:	e11e      	b.n	800918a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	7c12      	ldrb	r2, [r2, #16]
 8008f58:	f107 0108 	add.w	r1, r7, #8
 8008f5c:	4610      	mov	r0, r2
 8008f5e:	4798      	blx	r3
 8008f60:	60f8      	str	r0, [r7, #12]
      break;
 8008f62:	e112      	b.n	800918a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	7c1b      	ldrb	r3, [r3, #16]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d10d      	bne.n	8008f88 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f74:	f107 0208 	add.w	r2, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	3301      	adds	r3, #1
 8008f82:	2202      	movs	r2, #2
 8008f84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f86:	e100      	b.n	800918a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f90:	f107 0208 	add.w	r2, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	701a      	strb	r2, [r3, #0]
      break;
 8008fa2:	e0f2      	b.n	800918a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	885b      	ldrh	r3, [r3, #2]
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b05      	cmp	r3, #5
 8008fac:	f200 80ac 	bhi.w	8009108 <USBD_GetDescriptor+0x258>
 8008fb0:	a201      	add	r2, pc, #4	; (adr r2, 8008fb8 <USBD_GetDescriptor+0x108>)
 8008fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fb6:	bf00      	nop
 8008fb8:	08008fd1 	.word	0x08008fd1
 8008fbc:	08009005 	.word	0x08009005
 8008fc0:	08009039 	.word	0x08009039
 8008fc4:	0800906d 	.word	0x0800906d
 8008fc8:	080090a1 	.word	0x080090a1
 8008fcc:	080090d5 	.word	0x080090d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	7c12      	ldrb	r2, [r2, #16]
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff2:	e091      	b.n	8009118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fab2 	bl	8009560 <USBD_CtlError>
            err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
          break;
 8009002:	e089      	b.n	8009118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	689b      	ldr	r3, [r3, #8]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7c12      	ldrb	r2, [r2, #16]
 800901c:	f107 0108 	add.w	r1, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009026:	e077      	b.n	8009118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa98 	bl	8009560 <USBD_CtlError>
            err++;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	3301      	adds	r3, #1
 8009034:	72fb      	strb	r3, [r7, #11]
          break;
 8009036:	e06f      	b.n	8009118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	7c12      	ldrb	r2, [r2, #16]
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905a:	e05d      	b.n	8009118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa7e 	bl	8009560 <USBD_CtlError>
            err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
          break;
 800906a:	e055      	b.n	8009118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	691b      	ldr	r3, [r3, #16]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800908e:	e043      	b.n	8009118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa64 	bl	8009560 <USBD_CtlError>
            err++;
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	3301      	adds	r3, #1
 800909c:	72fb      	strb	r3, [r7, #11]
          break;
 800909e:	e03b      	b.n	8009118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00b      	beq.n	80090c4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	687a      	ldr	r2, [r7, #4]
 80090b6:	7c12      	ldrb	r2, [r2, #16]
 80090b8:	f107 0108 	add.w	r1, r7, #8
 80090bc:	4610      	mov	r0, r2
 80090be:	4798      	blx	r3
 80090c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090c2:	e029      	b.n	8009118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090c4:	6839      	ldr	r1, [r7, #0]
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa4a 	bl	8009560 <USBD_CtlError>
            err++;
 80090cc:	7afb      	ldrb	r3, [r7, #11]
 80090ce:	3301      	adds	r3, #1
 80090d0:	72fb      	strb	r3, [r7, #11]
          break;
 80090d2:	e021      	b.n	8009118 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090e6:	699b      	ldr	r3, [r3, #24]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	7c12      	ldrb	r2, [r2, #16]
 80090ec:	f107 0108 	add.w	r1, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f6:	e00f      	b.n	8009118 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 fa30 	bl	8009560 <USBD_CtlError>
            err++;
 8009100:	7afb      	ldrb	r3, [r7, #11]
 8009102:	3301      	adds	r3, #1
 8009104:	72fb      	strb	r3, [r7, #11]
          break;
 8009106:	e007      	b.n	8009118 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009108:	6839      	ldr	r1, [r7, #0]
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fa28 	bl	8009560 <USBD_CtlError>
          err++;
 8009110:	7afb      	ldrb	r3, [r7, #11]
 8009112:	3301      	adds	r3, #1
 8009114:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8009116:	bf00      	nop
      }
      break;
 8009118:	e037      	b.n	800918a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	7c1b      	ldrb	r3, [r3, #16]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800912a:	f107 0208 	add.w	r2, r7, #8
 800912e:	4610      	mov	r0, r2
 8009130:	4798      	blx	r3
 8009132:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009134:	e029      	b.n	800918a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009136:	6839      	ldr	r1, [r7, #0]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fa11 	bl	8009560 <USBD_CtlError>
        err++;
 800913e:	7afb      	ldrb	r3, [r7, #11]
 8009140:	3301      	adds	r3, #1
 8009142:	72fb      	strb	r3, [r7, #11]
      break;
 8009144:	e021      	b.n	800918a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	7c1b      	ldrb	r3, [r3, #16]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d10d      	bne.n	800916a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009156:	f107 0208 	add.w	r2, r7, #8
 800915a:	4610      	mov	r0, r2
 800915c:	4798      	blx	r3
 800915e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	3301      	adds	r3, #1
 8009164:	2207      	movs	r2, #7
 8009166:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009168:	e00f      	b.n	800918a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800916a:	6839      	ldr	r1, [r7, #0]
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f9f7 	bl	8009560 <USBD_CtlError>
        err++;
 8009172:	7afb      	ldrb	r3, [r7, #11]
 8009174:	3301      	adds	r3, #1
 8009176:	72fb      	strb	r3, [r7, #11]
      break;
 8009178:	e007      	b.n	800918a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 f9ef 	bl	8009560 <USBD_CtlError>
      err++;
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	3301      	adds	r3, #1
 8009186:	72fb      	strb	r3, [r7, #11]
      break;
 8009188:	bf00      	nop
  }

  if (err != 0U)
 800918a:	7afb      	ldrb	r3, [r7, #11]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d11e      	bne.n	80091ce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	88db      	ldrh	r3, [r3, #6]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d016      	beq.n	80091c6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009198:	893b      	ldrh	r3, [r7, #8]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00e      	beq.n	80091bc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	88da      	ldrh	r2, [r3, #6]
 80091a2:	893b      	ldrh	r3, [r7, #8]
 80091a4:	4293      	cmp	r3, r2
 80091a6:	bf28      	it	cs
 80091a8:	4613      	movcs	r3, r2
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091ae:	893b      	ldrh	r3, [r7, #8]
 80091b0:	461a      	mov	r2, r3
 80091b2:	68f9      	ldr	r1, [r7, #12]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fa44 	bl	8009642 <USBD_CtlSendData>
 80091ba:	e009      	b.n	80091d0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80091bc:	6839      	ldr	r1, [r7, #0]
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f9ce 	bl	8009560 <USBD_CtlError>
 80091c4:	e004      	b.n	80091d0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fa95 	bl	80096f6 <USBD_CtlSendStatus>
 80091cc:	e000      	b.n	80091d0 <USBD_GetDescriptor+0x320>
    return;
 80091ce:	bf00      	nop
  }
}
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop

080091d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	889b      	ldrh	r3, [r3, #4]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d131      	bne.n	800924e <USBD_SetAddress+0x76>
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	88db      	ldrh	r3, [r3, #6]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d12d      	bne.n	800924e <USBD_SetAddress+0x76>
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	885b      	ldrh	r3, [r3, #2]
 80091f6:	2b7f      	cmp	r3, #127	; 0x7f
 80091f8:	d829      	bhi.n	800924e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	885b      	ldrh	r3, [r3, #2]
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009204:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920c:	b2db      	uxtb	r3, r3
 800920e:	2b03      	cmp	r3, #3
 8009210:	d104      	bne.n	800921c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f9a3 	bl	8009560 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921a:	e01d      	b.n	8009258 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	7bfa      	ldrb	r2, [r7, #15]
 8009220:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009224:	7bfb      	ldrb	r3, [r7, #15]
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fe90 	bl	8009f4e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fa61 	bl	80096f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009234:	7bfb      	ldrb	r3, [r7, #15]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d004      	beq.n	8009244 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2202      	movs	r2, #2
 800923e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009242:	e009      	b.n	8009258 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800924c:	e004      	b.n	8009258 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800924e:	6839      	ldr	r1, [r7, #0]
 8009250:	6878      	ldr	r0, [r7, #4]
 8009252:	f000 f985 	bl	8009560 <USBD_CtlError>
  }
}
 8009256:	bf00      	nop
 8009258:	bf00      	nop
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b084      	sub	sp, #16
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800926a:	2300      	movs	r3, #0
 800926c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	885b      	ldrh	r3, [r3, #2]
 8009272:	b2da      	uxtb	r2, r3
 8009274:	4b4c      	ldr	r3, [pc, #304]	; (80093a8 <USBD_SetConfig+0x148>)
 8009276:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009278:	4b4b      	ldr	r3, [pc, #300]	; (80093a8 <USBD_SetConfig+0x148>)
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d905      	bls.n	800928c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009280:	6839      	ldr	r1, [r7, #0]
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f96c 	bl	8009560 <USBD_CtlError>
    return USBD_FAIL;
 8009288:	2303      	movs	r3, #3
 800928a:	e088      	b.n	800939e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009292:	b2db      	uxtb	r3, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d002      	beq.n	800929e <USBD_SetConfig+0x3e>
 8009298:	2b03      	cmp	r3, #3
 800929a:	d025      	beq.n	80092e8 <USBD_SetConfig+0x88>
 800929c:	e071      	b.n	8009382 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800929e:	4b42      	ldr	r3, [pc, #264]	; (80093a8 <USBD_SetConfig+0x148>)
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d01c      	beq.n	80092e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80092a6:	4b40      	ldr	r3, [pc, #256]	; (80093a8 <USBD_SetConfig+0x148>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80092b0:	4b3d      	ldr	r3, [pc, #244]	; (80093a8 <USBD_SetConfig+0x148>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f992 	bl	80085e0 <USBD_SetClassConfig>
 80092bc:	4603      	mov	r3, r0
 80092be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80092c0:	7bfb      	ldrb	r3, [r7, #15]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f949 	bl	8009560 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80092ce:	e065      	b.n	800939c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 fa10 	bl	80096f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2203      	movs	r2, #3
 80092da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80092de:	e05d      	b.n	800939c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa08 	bl	80096f6 <USBD_CtlSendStatus>
      break;
 80092e6:	e059      	b.n	800939c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80092e8:	4b2f      	ldr	r3, [pc, #188]	; (80093a8 <USBD_SetConfig+0x148>)
 80092ea:	781b      	ldrb	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d112      	bne.n	8009316 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2202      	movs	r2, #2
 80092f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80092f8:	4b2b      	ldr	r3, [pc, #172]	; (80093a8 <USBD_SetConfig+0x148>)
 80092fa:	781b      	ldrb	r3, [r3, #0]
 80092fc:	461a      	mov	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009302:	4b29      	ldr	r3, [pc, #164]	; (80093a8 <USBD_SetConfig+0x148>)
 8009304:	781b      	ldrb	r3, [r3, #0]
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7ff f985 	bl	8008618 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f9f1 	bl	80096f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009314:	e042      	b.n	800939c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8009316:	4b24      	ldr	r3, [pc, #144]	; (80093a8 <USBD_SetConfig+0x148>)
 8009318:	781b      	ldrb	r3, [r3, #0]
 800931a:	461a      	mov	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	429a      	cmp	r2, r3
 8009322:	d02a      	beq.n	800937a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	b2db      	uxtb	r3, r3
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff f973 	bl	8008618 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009332:	4b1d      	ldr	r3, [pc, #116]	; (80093a8 <USBD_SetConfig+0x148>)
 8009334:	781b      	ldrb	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800933c:	4b1a      	ldr	r3, [pc, #104]	; (80093a8 <USBD_SetConfig+0x148>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f7ff f94c 	bl	80085e0 <USBD_SetClassConfig>
 8009348:	4603      	mov	r3, r0
 800934a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800934c:	7bfb      	ldrb	r3, [r7, #15]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00f      	beq.n	8009372 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f903 	bl	8009560 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff f958 	bl	8008618 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2202      	movs	r2, #2
 800936c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009370:	e014      	b.n	800939c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f9bf 	bl	80096f6 <USBD_CtlSendStatus>
      break;
 8009378:	e010      	b.n	800939c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f9bb 	bl	80096f6 <USBD_CtlSendStatus>
      break;
 8009380:	e00c      	b.n	800939c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8eb 	bl	8009560 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <USBD_SetConfig+0x148>)
 800938c:	781b      	ldrb	r3, [r3, #0]
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff f941 	bl	8008618 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009396:	2303      	movs	r3, #3
 8009398:	73fb      	strb	r3, [r7, #15]
      break;
 800939a:	bf00      	nop
  }

  return ret;
 800939c:	7bfb      	ldrb	r3, [r7, #15]
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3710      	adds	r7, #16
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}
 80093a6:	bf00      	nop
 80093a8:	200001fa 	.word	0x200001fa

080093ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80093b6:	683b      	ldr	r3, [r7, #0]
 80093b8:	88db      	ldrh	r3, [r3, #6]
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d004      	beq.n	80093c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093be:	6839      	ldr	r1, [r7, #0]
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f8cd 	bl	8009560 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093c6:	e023      	b.n	8009410 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ce:	b2db      	uxtb	r3, r3
 80093d0:	2b02      	cmp	r3, #2
 80093d2:	dc02      	bgt.n	80093da <USBD_GetConfig+0x2e>
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dc03      	bgt.n	80093e0 <USBD_GetConfig+0x34>
 80093d8:	e015      	b.n	8009406 <USBD_GetConfig+0x5a>
 80093da:	2b03      	cmp	r3, #3
 80093dc:	d00b      	beq.n	80093f6 <USBD_GetConfig+0x4a>
 80093de:	e012      	b.n	8009406 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3308      	adds	r3, #8
 80093ea:	2201      	movs	r2, #1
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f927 	bl	8009642 <USBD_CtlSendData>
        break;
 80093f4:	e00c      	b.n	8009410 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3304      	adds	r3, #4
 80093fa:	2201      	movs	r2, #1
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f91f 	bl	8009642 <USBD_CtlSendData>
        break;
 8009404:	e004      	b.n	8009410 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 f8a9 	bl	8009560 <USBD_CtlError>
        break;
 800940e:	bf00      	nop
}
 8009410:	bf00      	nop
 8009412:	3708      	adds	r7, #8
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009428:	b2db      	uxtb	r3, r3
 800942a:	3b01      	subs	r3, #1
 800942c:	2b02      	cmp	r3, #2
 800942e:	d81e      	bhi.n	800946e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	88db      	ldrh	r3, [r3, #6]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d004      	beq.n	8009442 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 f890 	bl	8009560 <USBD_CtlError>
        break;
 8009440:	e01a      	b.n	8009478 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2201      	movs	r2, #1
 8009446:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800944e:	2b00      	cmp	r3, #0
 8009450:	d005      	beq.n	800945e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f043 0202 	orr.w	r2, r3, #2
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	330c      	adds	r3, #12
 8009462:	2202      	movs	r2, #2
 8009464:	4619      	mov	r1, r3
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 f8eb 	bl	8009642 <USBD_CtlSendData>
      break;
 800946c:	e004      	b.n	8009478 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800946e:	6839      	ldr	r1, [r7, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f875 	bl	8009560 <USBD_CtlError>
      break;
 8009476:	bf00      	nop
  }
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b082      	sub	sp, #8
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
 8009488:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	885b      	ldrh	r3, [r3, #2]
 800948e:	2b01      	cmp	r3, #1
 8009490:	d106      	bne.n	80094a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2201      	movs	r2, #1
 8009496:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f92b 	bl	80096f6 <USBD_CtlSendStatus>
  }
}
 80094a0:	bf00      	nop
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b082      	sub	sp, #8
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	3b01      	subs	r3, #1
 80094bc:	2b02      	cmp	r3, #2
 80094be:	d80b      	bhi.n	80094d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	885b      	ldrh	r3, [r3, #2]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d10c      	bne.n	80094e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2200      	movs	r2, #0
 80094cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80094d0:	6878      	ldr	r0, [r7, #4]
 80094d2:	f000 f910 	bl	80096f6 <USBD_CtlSendStatus>
      }
      break;
 80094d6:	e004      	b.n	80094e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80094d8:	6839      	ldr	r1, [r7, #0]
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f840 	bl	8009560 <USBD_CtlError>
      break;
 80094e0:	e000      	b.n	80094e4 <USBD_ClrFeature+0x3c>
      break;
 80094e2:	bf00      	nop
  }
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	781a      	ldrb	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	3301      	adds	r3, #1
 8009506:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	781a      	ldrb	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3301      	adds	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009516:	68f8      	ldr	r0, [r7, #12]
 8009518:	f7ff fa92 	bl	8008a40 <SWAPBYTE>
 800951c:	4603      	mov	r3, r0
 800951e:	461a      	mov	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	3301      	adds	r3, #1
 8009528:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	3301      	adds	r3, #1
 800952e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009530:	68f8      	ldr	r0, [r7, #12]
 8009532:	f7ff fa85 	bl	8008a40 <SWAPBYTE>
 8009536:	4603      	mov	r3, r0
 8009538:	461a      	mov	r2, r3
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	3301      	adds	r3, #1
 8009542:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	3301      	adds	r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f7ff fa78 	bl	8008a40 <SWAPBYTE>
 8009550:	4603      	mov	r3, r0
 8009552:	461a      	mov	r2, r3
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	80da      	strh	r2, [r3, #6]
}
 8009558:	bf00      	nop
 800955a:	3710      	adds	r7, #16
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b082      	sub	sp, #8
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800956a:	2180      	movs	r1, #128	; 0x80
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 fc83 	bl	8009e78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009572:	2100      	movs	r1, #0
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 fc7f 	bl	8009e78 <USBD_LL_StallEP>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b086      	sub	sp, #24
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800958e:	2300      	movs	r3, #0
 8009590:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d036      	beq.n	8009606 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800959c:	6938      	ldr	r0, [r7, #16]
 800959e:	f000 f836 	bl	800960e <USBD_GetLen>
 80095a2:	4603      	mov	r3, r0
 80095a4:	3301      	adds	r3, #1
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	b29a      	uxth	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	68ba      	ldr	r2, [r7, #8]
 80095b4:	4413      	add	r3, r2
 80095b6:	687a      	ldr	r2, [r7, #4]
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	701a      	strb	r2, [r3, #0]
  idx++;
 80095bc:	7dfb      	ldrb	r3, [r7, #23]
 80095be:	3301      	adds	r3, #1
 80095c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80095c2:	7dfb      	ldrb	r3, [r7, #23]
 80095c4:	68ba      	ldr	r2, [r7, #8]
 80095c6:	4413      	add	r3, r2
 80095c8:	2203      	movs	r2, #3
 80095ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80095cc:	7dfb      	ldrb	r3, [r7, #23]
 80095ce:	3301      	adds	r3, #1
 80095d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80095d2:	e013      	b.n	80095fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80095d4:	7dfb      	ldrb	r3, [r7, #23]
 80095d6:	68ba      	ldr	r2, [r7, #8]
 80095d8:	4413      	add	r3, r2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	7812      	ldrb	r2, [r2, #0]
 80095de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80095e0:	693b      	ldr	r3, [r7, #16]
 80095e2:	3301      	adds	r3, #1
 80095e4:	613b      	str	r3, [r7, #16]
    idx++;
 80095e6:	7dfb      	ldrb	r3, [r7, #23]
 80095e8:	3301      	adds	r3, #1
 80095ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80095ec:	7dfb      	ldrb	r3, [r7, #23]
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	4413      	add	r3, r2
 80095f2:	2200      	movs	r2, #0
 80095f4:	701a      	strb	r2, [r3, #0]
    idx++;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	3301      	adds	r3, #1
 80095fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1e7      	bne.n	80095d4 <USBD_GetString+0x52>
 8009604:	e000      	b.n	8009608 <USBD_GetString+0x86>
    return;
 8009606:	bf00      	nop
  }
}
 8009608:	3718      	adds	r7, #24
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800961e:	e005      	b.n	800962c <USBD_GetLen+0x1e>
  {
    len++;
 8009620:	7bfb      	ldrb	r3, [r7, #15]
 8009622:	3301      	adds	r3, #1
 8009624:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	3301      	adds	r3, #1
 800962a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1f5      	bne.n	8009620 <USBD_GetLen+0x12>
  }

  return len;
 8009634:	7bfb      	ldrb	r3, [r7, #15]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr

08009642 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	60f8      	str	r0, [r7, #12]
 800964a:	60b9      	str	r1, [r7, #8]
 800964c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2202      	movs	r2, #2
 8009652:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	687a      	ldr	r2, [r7, #4]
 8009660:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	2100      	movs	r1, #0
 8009668:	68f8      	ldr	r0, [r7, #12]
 800966a:	f000 fc8f 	bl	8009f8c <USBD_LL_Transmit>

  return USBD_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68ba      	ldr	r2, [r7, #8]
 8009688:	2100      	movs	r1, #0
 800968a:	68f8      	ldr	r0, [r7, #12]
 800968c:	f000 fc7e 	bl	8009f8c <USBD_LL_Transmit>

  return USBD_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2203      	movs	r2, #3
 80096aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	687a      	ldr	r2, [r7, #4]
 80096b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	2100      	movs	r1, #0
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fc82 	bl	8009fce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b084      	sub	sp, #16
 80096d8:	af00      	add	r7, sp, #0
 80096da:	60f8      	str	r0, [r7, #12]
 80096dc:	60b9      	str	r1, [r7, #8]
 80096de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	2100      	movs	r1, #0
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f000 fc71 	bl	8009fce <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2204      	movs	r2, #4
 8009702:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009706:	2300      	movs	r3, #0
 8009708:	2200      	movs	r2, #0
 800970a:	2100      	movs	r1, #0
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc3d 	bl	8009f8c <USBD_LL_Transmit>

  return USBD_OK;
 8009712:	2300      	movs	r3, #0
}
 8009714:	4618      	mov	r0, r3
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2205      	movs	r2, #5
 8009728:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800972c:	2300      	movs	r3, #0
 800972e:	2200      	movs	r2, #0
 8009730:	2100      	movs	r1, #0
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fc4b 	bl	8009fce <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8009748:	2200      	movs	r2, #0
 800974a:	4912      	ldr	r1, [pc, #72]	; (8009794 <MX_USB_Device_Init+0x50>)
 800974c:	4812      	ldr	r0, [pc, #72]	; (8009798 <MX_USB_Device_Init+0x54>)
 800974e:	f7fe fed9 	bl	8008504 <USBD_Init>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8009758:	f7f7 fb48 	bl	8000dec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800975c:	490f      	ldr	r1, [pc, #60]	; (800979c <MX_USB_Device_Init+0x58>)
 800975e:	480e      	ldr	r0, [pc, #56]	; (8009798 <MX_USB_Device_Init+0x54>)
 8009760:	f7fe ff00 	bl	8008564 <USBD_RegisterClass>
 8009764:	4603      	mov	r3, r0
 8009766:	2b00      	cmp	r3, #0
 8009768:	d001      	beq.n	800976e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800976a:	f7f7 fb3f 	bl	8000dec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800976e:	490c      	ldr	r1, [pc, #48]	; (80097a0 <MX_USB_Device_Init+0x5c>)
 8009770:	4809      	ldr	r0, [pc, #36]	; (8009798 <MX_USB_Device_Init+0x54>)
 8009772:	f7fe fe21 	bl	80083b8 <USBD_CDC_RegisterInterface>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d001      	beq.n	8009780 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800977c:	f7f7 fb36 	bl	8000dec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009780:	4805      	ldr	r0, [pc, #20]	; (8009798 <MX_USB_Device_Init+0x54>)
 8009782:	f7fe ff16 	bl	80085b2 <USBD_Start>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800978c:	f7f7 fb2e 	bl	8000dec <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009790:	bf00      	nop
 8009792:	bd80      	pop	{r7, pc}
 8009794:	2000017c 	.word	0x2000017c
 8009798:	20000694 	.word	0x20000694
 800979c:	20000064 	.word	0x20000064
 80097a0:	20000168 	.word	0x20000168

080097a4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80097a8:	2200      	movs	r2, #0
 80097aa:	4905      	ldr	r1, [pc, #20]	; (80097c0 <CDC_Init_FS+0x1c>)
 80097ac:	4805      	ldr	r0, [pc, #20]	; (80097c4 <CDC_Init_FS+0x20>)
 80097ae:	f7fe fe18 	bl	80083e2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80097b2:	4905      	ldr	r1, [pc, #20]	; (80097c8 <CDC_Init_FS+0x24>)
 80097b4:	4803      	ldr	r0, [pc, #12]	; (80097c4 <CDC_Init_FS+0x20>)
 80097b6:	f7fe fe32 	bl	800841e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80097ba:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80097bc:	4618      	mov	r0, r3
 80097be:	bd80      	pop	{r7, pc}
 80097c0:	20000d4c 	.word	0x20000d4c
 80097c4:	20000694 	.word	0x20000694
 80097c8:	20000964 	.word	0x20000964

080097cc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80097cc:	b480      	push	{r7}
 80097ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80097d0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
 80097e8:	4613      	mov	r3, r2
 80097ea:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	2b23      	cmp	r3, #35	; 0x23
 80097f0:	d84a      	bhi.n	8009888 <CDC_Control_FS+0xac>
 80097f2:	a201      	add	r2, pc, #4	; (adr r2, 80097f8 <CDC_Control_FS+0x1c>)
 80097f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f8:	08009889 	.word	0x08009889
 80097fc:	08009889 	.word	0x08009889
 8009800:	08009889 	.word	0x08009889
 8009804:	08009889 	.word	0x08009889
 8009808:	08009889 	.word	0x08009889
 800980c:	08009889 	.word	0x08009889
 8009810:	08009889 	.word	0x08009889
 8009814:	08009889 	.word	0x08009889
 8009818:	08009889 	.word	0x08009889
 800981c:	08009889 	.word	0x08009889
 8009820:	08009889 	.word	0x08009889
 8009824:	08009889 	.word	0x08009889
 8009828:	08009889 	.word	0x08009889
 800982c:	08009889 	.word	0x08009889
 8009830:	08009889 	.word	0x08009889
 8009834:	08009889 	.word	0x08009889
 8009838:	08009889 	.word	0x08009889
 800983c:	08009889 	.word	0x08009889
 8009840:	08009889 	.word	0x08009889
 8009844:	08009889 	.word	0x08009889
 8009848:	08009889 	.word	0x08009889
 800984c:	08009889 	.word	0x08009889
 8009850:	08009889 	.word	0x08009889
 8009854:	08009889 	.word	0x08009889
 8009858:	08009889 	.word	0x08009889
 800985c:	08009889 	.word	0x08009889
 8009860:	08009889 	.word	0x08009889
 8009864:	08009889 	.word	0x08009889
 8009868:	08009889 	.word	0x08009889
 800986c:	08009889 	.word	0x08009889
 8009870:	08009889 	.word	0x08009889
 8009874:	08009889 	.word	0x08009889
 8009878:	08009889 	.word	0x08009889
 800987c:	08009889 	.word	0x08009889
 8009880:	08009889 	.word	0x08009889
 8009884:	08009889 	.word	0x08009889
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009888:	bf00      	nop
  }

  return (USBD_OK);
 800988a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f7f6 fcd1 	bl	800024c <CDC_On_Receive>

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4805      	ldr	r0, [pc, #20]	; (80098c4 <CDC_Receive_FS+0x2c>)
 80098ae:	f7fe fdb6 	bl	800841e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80098b2:	4804      	ldr	r0, [pc, #16]	; (80098c4 <CDC_Receive_FS+0x2c>)
 80098b4:	f7fe fdfc 	bl	80084b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80098b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	20000694 	.word	0x20000694

080098c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80098c8:	b580      	push	{r7, lr}
 80098ca:	b084      	sub	sp, #16
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
 80098d0:	460b      	mov	r3, r1
 80098d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80098d4:	2300      	movs	r3, #0
 80098d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80098d8:	4b0d      	ldr	r3, [pc, #52]	; (8009910 <CDC_Transmit_FS+0x48>)
 80098da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d001      	beq.n	80098ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80098ea:	2301      	movs	r3, #1
 80098ec:	e00b      	b.n	8009906 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80098ee:	887b      	ldrh	r3, [r7, #2]
 80098f0:	461a      	mov	r2, r3
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	4806      	ldr	r0, [pc, #24]	; (8009910 <CDC_Transmit_FS+0x48>)
 80098f6:	f7fe fd74 	bl	80083e2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80098fa:	4805      	ldr	r0, [pc, #20]	; (8009910 <CDC_Transmit_FS+0x48>)
 80098fc:	f7fe fda8 	bl	8008450 <USBD_CDC_TransmitPacket>
 8009900:	4603      	mov	r3, r0
 8009902:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009904:	7bfb      	ldrb	r3, [r7, #15]
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	20000694 	.word	0x20000694

08009914 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	60f8      	str	r0, [r7, #12]
 800991c:	60b9      	str	r1, [r7, #8]
 800991e:	4613      	mov	r3, r2
 8009920:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009926:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800992a:	4618      	mov	r0, r3
 800992c:	371c      	adds	r7, #28
 800992e:	46bd      	mov	sp, r7
 8009930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009934:	4770      	bx	lr
	...

08009938 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009938:	b480      	push	{r7}
 800993a:	b083      	sub	sp, #12
 800993c:	af00      	add	r7, sp, #0
 800993e:	4603      	mov	r3, r0
 8009940:	6039      	str	r1, [r7, #0]
 8009942:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	2212      	movs	r2, #18
 8009948:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800994a:	4b03      	ldr	r3, [pc, #12]	; (8009958 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800994c:	4618      	mov	r0, r3
 800994e:	370c      	adds	r7, #12
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	2000019c 	.word	0x2000019c

0800995c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800995c:	b480      	push	{r7}
 800995e:	b083      	sub	sp, #12
 8009960:	af00      	add	r7, sp, #0
 8009962:	4603      	mov	r3, r0
 8009964:	6039      	str	r1, [r7, #0]
 8009966:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	2204      	movs	r2, #4
 800996c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800996e:	4b03      	ldr	r3, [pc, #12]	; (800997c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr
 800997c:	200001b0 	.word	0x200001b0

08009980 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b082      	sub	sp, #8
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d105      	bne.n	800999e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009992:	683a      	ldr	r2, [r7, #0]
 8009994:	4907      	ldr	r1, [pc, #28]	; (80099b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009996:	4808      	ldr	r0, [pc, #32]	; (80099b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009998:	f7ff fdf3 	bl	8009582 <USBD_GetString>
 800999c:	e004      	b.n	80099a8 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	4904      	ldr	r1, [pc, #16]	; (80099b4 <USBD_CDC_ProductStrDescriptor+0x34>)
 80099a2:	4805      	ldr	r0, [pc, #20]	; (80099b8 <USBD_CDC_ProductStrDescriptor+0x38>)
 80099a4:	f7ff fded 	bl	8009582 <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a8:	4b02      	ldr	r3, [pc, #8]	; (80099b4 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3708      	adds	r7, #8
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	20001134 	.word	0x20001134
 80099b8:	0800a1c4 	.word	0x0800a1c4

080099bc <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	4603      	mov	r3, r0
 80099c4:	6039      	str	r1, [r7, #0]
 80099c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80099c8:	683a      	ldr	r2, [r7, #0]
 80099ca:	4904      	ldr	r1, [pc, #16]	; (80099dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 80099cc:	4804      	ldr	r0, [pc, #16]	; (80099e0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 80099ce:	f7ff fdd8 	bl	8009582 <USBD_GetString>
  return USBD_StrDesc;
 80099d2:	4b02      	ldr	r3, [pc, #8]	; (80099dc <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20001134 	.word	0x20001134
 80099e0:	0800a1dc 	.word	0x0800a1dc

080099e4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	6039      	str	r1, [r7, #0]
 80099ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	221a      	movs	r2, #26
 80099f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80099f6:	f000 f843 	bl	8009a80 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80099fa:	4b02      	ldr	r3, [pc, #8]	; (8009a04 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	200001b4 	.word	0x200001b4

08009a08 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	4603      	mov	r3, r0
 8009a10:	6039      	str	r1, [r7, #0]
 8009a12:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009a14:	79fb      	ldrb	r3, [r7, #7]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d105      	bne.n	8009a26 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009a1a:	683a      	ldr	r2, [r7, #0]
 8009a1c:	4907      	ldr	r1, [pc, #28]	; (8009a3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009a1e:	4808      	ldr	r0, [pc, #32]	; (8009a40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009a20:	f7ff fdaf 	bl	8009582 <USBD_GetString>
 8009a24:	e004      	b.n	8009a30 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009a26:	683a      	ldr	r2, [r7, #0]
 8009a28:	4904      	ldr	r1, [pc, #16]	; (8009a3c <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009a2a:	4805      	ldr	r0, [pc, #20]	; (8009a40 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009a2c:	f7ff fda9 	bl	8009582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a30:	4b02      	ldr	r3, [pc, #8]	; (8009a3c <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	20001134 	.word	0x20001134
 8009a40:	0800a1f0 	.word	0x0800a1f0

08009a44 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	6039      	str	r1, [r7, #0]
 8009a4e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a50:	79fb      	ldrb	r3, [r7, #7]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d105      	bne.n	8009a62 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009a56:	683a      	ldr	r2, [r7, #0]
 8009a58:	4907      	ldr	r1, [pc, #28]	; (8009a78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009a5a:	4808      	ldr	r0, [pc, #32]	; (8009a7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009a5c:	f7ff fd91 	bl	8009582 <USBD_GetString>
 8009a60:	e004      	b.n	8009a6c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	4904      	ldr	r1, [pc, #16]	; (8009a78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009a66:	4805      	ldr	r0, [pc, #20]	; (8009a7c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009a68:	f7ff fd8b 	bl	8009582 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
 8009a76:	bf00      	nop
 8009a78:	20001134 	.word	0x20001134
 8009a7c:	0800a1fc 	.word	0x0800a1fc

08009a80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009a86:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <Get_SerialNum+0x44>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009a8c:	4b0e      	ldr	r3, [pc, #56]	; (8009ac8 <Get_SerialNum+0x48>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009a92:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <Get_SerialNum+0x4c>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009a98:	68fa      	ldr	r2, [r7, #12]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d009      	beq.n	8009aba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	4909      	ldr	r1, [pc, #36]	; (8009ad0 <Get_SerialNum+0x50>)
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f000 f814 	bl	8009ad8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	4908      	ldr	r1, [pc, #32]	; (8009ad4 <Get_SerialNum+0x54>)
 8009ab4:	68b8      	ldr	r0, [r7, #8]
 8009ab6:	f000 f80f 	bl	8009ad8 <IntToUnicode>
  }
}
 8009aba:	bf00      	nop
 8009abc:	3710      	adds	r7, #16
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	1fff7590 	.word	0x1fff7590
 8009ac8:	1fff7594 	.word	0x1fff7594
 8009acc:	1fff7598 	.word	0x1fff7598
 8009ad0:	200001b6 	.word	0x200001b6
 8009ad4:	200001c6 	.word	0x200001c6

08009ad8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009ae6:	2300      	movs	r3, #0
 8009ae8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009aea:	2300      	movs	r3, #0
 8009aec:	75fb      	strb	r3, [r7, #23]
 8009aee:	e027      	b.n	8009b40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	0f1b      	lsrs	r3, r3, #28
 8009af4:	2b09      	cmp	r3, #9
 8009af6:	d80b      	bhi.n	8009b10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	0f1b      	lsrs	r3, r3, #28
 8009afc:	b2da      	uxtb	r2, r3
 8009afe:	7dfb      	ldrb	r3, [r7, #23]
 8009b00:	005b      	lsls	r3, r3, #1
 8009b02:	4619      	mov	r1, r3
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	440b      	add	r3, r1
 8009b08:	3230      	adds	r2, #48	; 0x30
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
 8009b0e:	e00a      	b.n	8009b26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	0f1b      	lsrs	r3, r3, #28
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	7dfb      	ldrb	r3, [r7, #23]
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	440b      	add	r3, r1
 8009b20:	3237      	adds	r2, #55	; 0x37
 8009b22:	b2d2      	uxtb	r2, r2
 8009b24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009b2c:	7dfb      	ldrb	r3, [r7, #23]
 8009b2e:	005b      	lsls	r3, r3, #1
 8009b30:	3301      	adds	r3, #1
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	4413      	add	r3, r2
 8009b36:	2200      	movs	r2, #0
 8009b38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009b3a:	7dfb      	ldrb	r3, [r7, #23]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	75fb      	strb	r3, [r7, #23]
 8009b40:	7dfa      	ldrb	r2, [r7, #23]
 8009b42:	79fb      	ldrb	r3, [r7, #7]
 8009b44:	429a      	cmp	r2, r3
 8009b46:	d3d3      	bcc.n	8009af0 <IntToUnicode+0x18>
  }
}
 8009b48:	bf00      	nop
 8009b4a:	bf00      	nop
 8009b4c:	371c      	adds	r7, #28
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr
	...

08009b58 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <HAL_PCD_MspInit+0x44>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d113      	bne.n	8009b92 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009b6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ba0 <HAL_PCD_MspInit+0x48>)
 8009b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6e:	4a0c      	ldr	r2, [pc, #48]	; (8009ba0 <HAL_PCD_MspInit+0x48>)
 8009b70:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009b74:	6593      	str	r3, [r2, #88]	; 0x58
 8009b76:	4b0a      	ldr	r3, [pc, #40]	; (8009ba0 <HAL_PCD_MspInit+0x48>)
 8009b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b7e:	60fb      	str	r3, [r7, #12]
 8009b80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009b82:	2200      	movs	r2, #0
 8009b84:	2100      	movs	r1, #0
 8009b86:	2014      	movs	r0, #20
 8009b88:	f7f7 fce7 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009b8c:	2014      	movs	r0, #20
 8009b8e:	f7f7 fcfe 	bl	800158e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	40005c00 	.word	0x40005c00
 8009ba0:	40021000 	.word	0x40021000

08009ba4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b082      	sub	sp, #8
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009bb8:	4619      	mov	r1, r3
 8009bba:	4610      	mov	r0, r2
 8009bbc:	f7fe fd44 	bl	8008648 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009bc0:	bf00      	nop
 8009bc2:	3708      	adds	r7, #8
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4613      	mov	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	00db      	lsls	r3, r3, #3
 8009be6:	440b      	add	r3, r1
 8009be8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	78fb      	ldrb	r3, [r7, #3]
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	f7fe fd7e 	bl	80086f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009bf6:	bf00      	nop
 8009bf8:	3708      	adds	r7, #8
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009c10:	78fa      	ldrb	r2, [r7, #3]
 8009c12:	6879      	ldr	r1, [r7, #4]
 8009c14:	4613      	mov	r3, r2
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	4413      	add	r3, r2
 8009c1a:	00db      	lsls	r3, r3, #3
 8009c1c:	440b      	add	r3, r1
 8009c1e:	333c      	adds	r3, #60	; 0x3c
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	78fb      	ldrb	r3, [r7, #3]
 8009c24:	4619      	mov	r1, r3
 8009c26:	f7fe fdc7 	bl	80087b8 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009c2a:	bf00      	nop
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}

08009c32 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c32:	b580      	push	{r7, lr}
 8009c34:	b082      	sub	sp, #8
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f7fe fedb 	bl	80089fc <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}

08009c4e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c4e:	b580      	push	{r7, lr}
 8009c50:	b084      	sub	sp, #16
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009c56:	2301      	movs	r3, #1
 8009c58:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b02      	cmp	r3, #2
 8009c60:	d001      	beq.n	8009c66 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009c62:	f7f7 f8c3 	bl	8000dec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c6c:	7bfa      	ldrb	r2, [r7, #15]
 8009c6e:	4611      	mov	r1, r2
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7fe fe85 	bl	8008980 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f7fe fe31 	bl	80088e4 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009c82:	bf00      	nop
 8009c84:	3710      	adds	r7, #16
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
	...

08009c8c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7fe fe80 	bl	80089a0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d005      	beq.n	8009cb4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ca8:	4b04      	ldr	r3, [pc, #16]	; (8009cbc <HAL_PCD_SuspendCallback+0x30>)
 8009caa:	691b      	ldr	r3, [r3, #16]
 8009cac:	4a03      	ldr	r2, [pc, #12]	; (8009cbc <HAL_PCD_SuspendCallback+0x30>)
 8009cae:	f043 0306 	orr.w	r3, r3, #6
 8009cb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009cb4:	bf00      	nop
 8009cb6:	3708      	adds	r7, #8
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	e000ed00 	.word	0xe000ed00

08009cc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	699b      	ldr	r3, [r3, #24]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d007      	beq.n	8009ce0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009cd0:	4b08      	ldr	r3, [pc, #32]	; (8009cf4 <HAL_PCD_ResumeCallback+0x34>)
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	4a07      	ldr	r2, [pc, #28]	; (8009cf4 <HAL_PCD_ResumeCallback+0x34>)
 8009cd6:	f023 0306 	bic.w	r3, r3, #6
 8009cda:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009cdc:	f000 f9fa 	bl	800a0d4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fe70 	bl	80089cc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009cec:	bf00      	nop
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}
 8009cf4:	e000ed00 	.word	0xe000ed00

08009cf8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009d00:	4a2b      	ldr	r2, [pc, #172]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	4a29      	ldr	r2, [pc, #164]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009d10:	4b27      	ldr	r3, [pc, #156]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d12:	4a28      	ldr	r2, [pc, #160]	; (8009db4 <USBD_LL_Init+0xbc>)
 8009d14:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009d16:	4b26      	ldr	r3, [pc, #152]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d18:	2208      	movs	r2, #8
 8009d1a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009d1c:	4b24      	ldr	r3, [pc, #144]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d1e:	2202      	movs	r2, #2
 8009d20:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d22:	4b23      	ldr	r3, [pc, #140]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d24:	2202      	movs	r2, #2
 8009d26:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009d28:	4b21      	ldr	r3, [pc, #132]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009d2e:	4b20      	ldr	r3, [pc, #128]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009d34:	4b1e      	ldr	r3, [pc, #120]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009d3a:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009d40:	481b      	ldr	r0, [pc, #108]	; (8009db0 <USBD_LL_Init+0xb8>)
 8009d42:	f7f7 fefd 	bl	8001b40 <HAL_PCD_Init>
 8009d46:	4603      	mov	r3, r0
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009d4c:	f7f7 f84e 	bl	8000dec <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d56:	2318      	movs	r3, #24
 8009d58:	2200      	movs	r2, #0
 8009d5a:	2100      	movs	r1, #0
 8009d5c:	f7f9 fb17 	bl	800338e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d66:	2358      	movs	r3, #88	; 0x58
 8009d68:	2200      	movs	r2, #0
 8009d6a:	2180      	movs	r1, #128	; 0x80
 8009d6c:	f7f9 fb0f 	bl	800338e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d76:	23c0      	movs	r3, #192	; 0xc0
 8009d78:	2200      	movs	r2, #0
 8009d7a:	2181      	movs	r1, #129	; 0x81
 8009d7c:	f7f9 fb07 	bl	800338e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d86:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	f7f9 fafe 	bl	800338e <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009d98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	2182      	movs	r1, #130	; 0x82
 8009da0:	f7f9 faf5 	bl	800338e <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009da4:	2300      	movs	r3, #0
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3708      	adds	r7, #8
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20001334 	.word	0x20001334
 8009db4:	40005c00 	.word	0x40005c00

08009db8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b084      	sub	sp, #16
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f7 ff9b 	bl	8001d0a <HAL_PCD_Start>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 f980 	bl	800a0e0 <USBD_Get_USB_Status>
 8009de0:	4603      	mov	r3, r0
 8009de2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}

08009dee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b084      	sub	sp, #16
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	4608      	mov	r0, r1
 8009df8:	4611      	mov	r1, r2
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	70fb      	strb	r3, [r7, #3]
 8009e00:	460b      	mov	r3, r1
 8009e02:	70bb      	strb	r3, [r7, #2]
 8009e04:	4613      	mov	r3, r2
 8009e06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e16:	78bb      	ldrb	r3, [r7, #2]
 8009e18:	883a      	ldrh	r2, [r7, #0]
 8009e1a:	78f9      	ldrb	r1, [r7, #3]
 8009e1c:	f7f8 f90a 	bl	8002034 <HAL_PCD_EP_Open>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 f95a 	bl	800a0e0 <USBD_Get_USB_Status>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b084      	sub	sp, #16
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e46:	2300      	movs	r3, #0
 8009e48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e54:	78fa      	ldrb	r2, [r7, #3]
 8009e56:	4611      	mov	r1, r2
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f7f8 f951 	bl	8002100 <HAL_PCD_EP_Close>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f000 f93b 	bl	800a0e0 <USBD_Get_USB_Status>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3710      	adds	r7, #16
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b084      	sub	sp, #16
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	460b      	mov	r3, r1
 8009e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e84:	2300      	movs	r3, #0
 8009e86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7f8 fa12 	bl	80022c0 <HAL_PCD_EP_SetStall>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	f000 f91c 	bl	800a0e0 <USBD_Get_USB_Status>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}

08009eb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eb6:	b580      	push	{r7, lr}
 8009eb8:	b084      	sub	sp, #16
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
 8009ebe:	460b      	mov	r3, r1
 8009ec0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ed0:	78fa      	ldrb	r2, [r7, #3]
 8009ed2:	4611      	mov	r1, r2
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f7f8 fa45 	bl	8002364 <HAL_PCD_EP_ClrStall>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ede:	7bfb      	ldrb	r3, [r7, #15]
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f000 f8fd 	bl	800a0e0 <USBD_Get_USB_Status>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009eea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	460b      	mov	r3, r1
 8009efe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	da0c      	bge.n	8009f2a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f10:	78fb      	ldrb	r3, [r7, #3]
 8009f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f16:	68f9      	ldr	r1, [r7, #12]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	009b      	lsls	r3, r3, #2
 8009f1e:	4413      	add	r3, r2
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	440b      	add	r3, r1
 8009f24:	3302      	adds	r3, #2
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	e00b      	b.n	8009f42 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f2a:	78fb      	ldrb	r3, [r7, #3]
 8009f2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f30:	68f9      	ldr	r1, [r7, #12]
 8009f32:	4613      	mov	r3, r2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	440b      	add	r3, r1
 8009f3c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8009f40:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3714      	adds	r7, #20
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
 8009f56:	460b      	mov	r3, r1
 8009f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f68:	78fa      	ldrb	r2, [r7, #3]
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f7f8 f83c 	bl	8001fea <HAL_PCD_SetAddress>
 8009f72:	4603      	mov	r3, r0
 8009f74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f76:	7bfb      	ldrb	r3, [r7, #15]
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f000 f8b1 	bl	800a0e0 <USBD_Get_USB_Status>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	607a      	str	r2, [r7, #4]
 8009f96:	603b      	str	r3, [r7, #0]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009faa:	7af9      	ldrb	r1, [r7, #11]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	f7f8 f943 	bl	800223a <HAL_PCD_EP_Transmit>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f000 f890 	bl	800a0e0 <USBD_Get_USB_Status>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fc4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	3718      	adds	r7, #24
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fce:	b580      	push	{r7, lr}
 8009fd0:	b086      	sub	sp, #24
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	60f8      	str	r0, [r7, #12]
 8009fd6:	607a      	str	r2, [r7, #4]
 8009fd8:	603b      	str	r3, [r7, #0]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fec:	7af9      	ldrb	r1, [r7, #11]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f7f8 f8cd 	bl	8002190 <HAL_PCD_EP_Receive>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffa:	7dfb      	ldrb	r3, [r7, #23]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f86f 	bl	800a0e0 <USBD_Get_USB_Status>
 800a002:	4603      	mov	r3, r0
 800a004:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a006:	7dbb      	ldrb	r3, [r7, #22]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f7f8 f8ef 	bl	800220a <HAL_PCD_EP_GetRxCount>
 800a02c:	4603      	mov	r3, r0
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3708      	adds	r7, #8
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}
	...

0800a038 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	460b      	mov	r3, r1
 800a042:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d002      	beq.n	800a050 <HAL_PCDEx_LPM_Callback+0x18>
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d013      	beq.n	800a076 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a04e:	e023      	b.n	800a098 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	699b      	ldr	r3, [r3, #24]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d007      	beq.n	800a068 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a058:	f000 f83c 	bl	800a0d4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a05c:	4b10      	ldr	r3, [pc, #64]	; (800a0a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a05e:	691b      	ldr	r3, [r3, #16]
 800a060:	4a0f      	ldr	r2, [pc, #60]	; (800a0a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a062:	f023 0306 	bic.w	r3, r3, #6
 800a066:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fe fcac 	bl	80089cc <USBD_LL_Resume>
    break;
 800a074:	e010      	b.n	800a098 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7fe fc8f 	bl	80089a0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a08a:	4b05      	ldr	r3, [pc, #20]	; (800a0a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	4a04      	ldr	r2, [pc, #16]	; (800a0a0 <HAL_PCDEx_LPM_Callback+0x68>)
 800a090:	f043 0306 	orr.w	r3, r3, #6
 800a094:	6113      	str	r3, [r2, #16]
    break;
 800a096:	bf00      	nop
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	e000ed00 	.word	0xe000ed00

0800a0a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a0ac:	4b03      	ldr	r3, [pc, #12]	; (800a0bc <USBD_static_malloc+0x18>)
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	200001fc 	.word	0x200001fc

0800a0c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a0d8:	f7f6 faca 	bl	8000670 <SystemClock_Config>
}
 800a0dc:	bf00      	nop
 800a0de:	bd80      	pop	{r7, pc}

0800a0e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0ee:	79fb      	ldrb	r3, [r7, #7]
 800a0f0:	2b03      	cmp	r3, #3
 800a0f2:	d817      	bhi.n	800a124 <USBD_Get_USB_Status+0x44>
 800a0f4:	a201      	add	r2, pc, #4	; (adr r2, 800a0fc <USBD_Get_USB_Status+0x1c>)
 800a0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0fa:	bf00      	nop
 800a0fc:	0800a10d 	.word	0x0800a10d
 800a100:	0800a113 	.word	0x0800a113
 800a104:	0800a119 	.word	0x0800a119
 800a108:	0800a11f 	.word	0x0800a11f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	73fb      	strb	r3, [r7, #15]
    break;
 800a110:	e00b      	b.n	800a12a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a112:	2303      	movs	r3, #3
 800a114:	73fb      	strb	r3, [r7, #15]
    break;
 800a116:	e008      	b.n	800a12a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a118:	2301      	movs	r3, #1
 800a11a:	73fb      	strb	r3, [r7, #15]
    break;
 800a11c:	e005      	b.n	800a12a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a11e:	2303      	movs	r3, #3
 800a120:	73fb      	strb	r3, [r7, #15]
    break;
 800a122:	e002      	b.n	800a12a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a124:	2303      	movs	r3, #3
 800a126:	73fb      	strb	r3, [r7, #15]
    break;
 800a128:	bf00      	nop
  }
  return usb_status;
 800a12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3714      	adds	r7, #20
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <__libc_init_array>:
 800a138:	b570      	push	{r4, r5, r6, lr}
 800a13a:	4d0d      	ldr	r5, [pc, #52]	; (800a170 <__libc_init_array+0x38>)
 800a13c:	4c0d      	ldr	r4, [pc, #52]	; (800a174 <__libc_init_array+0x3c>)
 800a13e:	1b64      	subs	r4, r4, r5
 800a140:	10a4      	asrs	r4, r4, #2
 800a142:	2600      	movs	r6, #0
 800a144:	42a6      	cmp	r6, r4
 800a146:	d109      	bne.n	800a15c <__libc_init_array+0x24>
 800a148:	4d0b      	ldr	r5, [pc, #44]	; (800a178 <__libc_init_array+0x40>)
 800a14a:	4c0c      	ldr	r4, [pc, #48]	; (800a17c <__libc_init_array+0x44>)
 800a14c:	f000 f82e 	bl	800a1ac <_init>
 800a150:	1b64      	subs	r4, r4, r5
 800a152:	10a4      	asrs	r4, r4, #2
 800a154:	2600      	movs	r6, #0
 800a156:	42a6      	cmp	r6, r4
 800a158:	d105      	bne.n	800a166 <__libc_init_array+0x2e>
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a160:	4798      	blx	r3
 800a162:	3601      	adds	r6, #1
 800a164:	e7ee      	b.n	800a144 <__libc_init_array+0xc>
 800a166:	f855 3b04 	ldr.w	r3, [r5], #4
 800a16a:	4798      	blx	r3
 800a16c:	3601      	adds	r6, #1
 800a16e:	e7f2      	b.n	800a156 <__libc_init_array+0x1e>
 800a170:	0800a21c 	.word	0x0800a21c
 800a174:	0800a21c 	.word	0x0800a21c
 800a178:	0800a21c 	.word	0x0800a21c
 800a17c:	0800a220 	.word	0x0800a220

0800a180 <memcpy>:
 800a180:	440a      	add	r2, r1
 800a182:	4291      	cmp	r1, r2
 800a184:	f100 33ff 	add.w	r3, r0, #4294967295
 800a188:	d100      	bne.n	800a18c <memcpy+0xc>
 800a18a:	4770      	bx	lr
 800a18c:	b510      	push	{r4, lr}
 800a18e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a192:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a196:	4291      	cmp	r1, r2
 800a198:	d1f9      	bne.n	800a18e <memcpy+0xe>
 800a19a:	bd10      	pop	{r4, pc}

0800a19c <memset>:
 800a19c:	4402      	add	r2, r0
 800a19e:	4603      	mov	r3, r0
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d100      	bne.n	800a1a6 <memset+0xa>
 800a1a4:	4770      	bx	lr
 800a1a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a1aa:	e7f9      	b.n	800a1a0 <memset+0x4>

0800a1ac <_init>:
 800a1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ae:	bf00      	nop
 800a1b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b2:	bc08      	pop	{r3}
 800a1b4:	469e      	mov	lr, r3
 800a1b6:	4770      	bx	lr

0800a1b8 <_fini>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	bf00      	nop
 800a1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1be:	bc08      	pop	{r3}
 800a1c0:	469e      	mov	lr, r3
 800a1c2:	4770      	bx	lr
